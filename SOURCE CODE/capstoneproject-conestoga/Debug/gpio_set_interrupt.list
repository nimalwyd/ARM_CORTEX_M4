
gpio_set_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800223c  0800223c  0001223c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080022b8  080022b8  000122b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080022c0  080022c0  000122c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080022c4  080022c4  000122c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  20000000  080022c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
  8 .bss          0000003c  20000068  20000068  00020068  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  200000a4  200000a4  00020068  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 11 .debug_line   00002adb  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0000bc4c  00000000  00000000  00022b73  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b4b  00000000  00000000  0002e7bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003d8  00000000  00000000  00030310  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005f0  00000000  00000000  000306e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000141b  00000000  00000000  00030cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00001a18  00000000  00000000  000320f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00033b0b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000b88  00000000  00000000  00033b88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002224 	.word	0x08002224

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08002224 	.word	0x08002224

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000580:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000584:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000586:	e003      	b.n	8000590 <LoopCopyDataInit>

08000588 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000588:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800058a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800058c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800058e:	3104      	adds	r1, #4

08000590 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000590:	480b      	ldr	r0, [pc, #44]	; (80005c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000594:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000596:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000598:	d3f6      	bcc.n	8000588 <CopyDataInit>
	ldr	r2, =_sbss
 800059a:	4a0b      	ldr	r2, [pc, #44]	; (80005c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800059c:	e002      	b.n	80005a4 <LoopFillZerobss>

0800059e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800059e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005a0:	f842 3b04 	str.w	r3, [r2], #4

080005a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <LoopForever+0x16>)
	cmp	r2, r3
 80005a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005a8:	d3f9      	bcc.n	800059e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005aa:	f001 f9b7 	bl	800191c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ae:	f001 f9e9 	bl	8001984 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005b2:	f000 feb5 	bl	8001320 <main>

080005b6 <LoopForever>:

LoopForever:
    b LoopForever
 80005b6:	e7fe      	b.n	80005b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005b8:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80005bc:	080022c8 	.word	0x080022c8
	ldr	r0, =_sdata
 80005c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005c4:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 80005c8:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 80005cc:	200000a4 	.word	0x200000a4

080005d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005d0:	e7fe      	b.n	80005d0 <ADC1_2_IRQHandler>
	...

080005d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <HAL_InitTick+0x24>)
{
 80005d8:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 80005da:	6818      	ldr	r0, [r3, #0]
 80005dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80005e4:	f000 f88a 	bl	80006fc <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80005e8:	2200      	movs	r2, #0
 80005ea:	4621      	mov	r1, r4
 80005ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005f0:	f000 f844 	bl	800067c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80005f4:	2000      	movs	r0, #0
 80005f6:	bd10      	pop	{r4, pc}
 80005f8:	20000000 	.word	0x20000000

080005fc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fc:	4a07      	ldr	r2, [pc, #28]	; (800061c <HAL_Init+0x20>)
{
 80005fe:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000600:	6813      	ldr	r3, [r2, #0]
 8000602:	f043 0310 	orr.w	r3, r3, #16
 8000606:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000608:	2003      	movs	r0, #3
 800060a:	f000 f825 	bl	8000658 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800060e:	2000      	movs	r0, #0
 8000610:	f7ff ffe0 	bl	80005d4 <HAL_InitTick>
  HAL_MspInit();
 8000614:	f001 f908 	bl	8001828 <HAL_MspInit>
}
 8000618:	2000      	movs	r0, #0
 800061a:	bd08      	pop	{r3, pc}
 800061c:	40022000 	.word	0x40022000

08000620 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000620:	4a02      	ldr	r2, [pc, #8]	; (800062c <HAL_IncTick+0xc>)
 8000622:	6813      	ldr	r3, [r2, #0]
 8000624:	3301      	adds	r3, #1
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000090 	.word	0x20000090

08000630 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000630:	4b01      	ldr	r3, [pc, #4]	; (8000638 <HAL_GetTick+0x8>)
 8000632:	6818      	ldr	r0, [r3, #0]
}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000090 	.word	0x20000090

0800063c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800063c:	b513      	push	{r0, r1, r4, lr}
 800063e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000640:	f7ff fff6 	bl	8000630 <HAL_GetTick>
 8000644:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000646:	f7ff fff3 	bl	8000630 <HAL_GetTick>
 800064a:	9b01      	ldr	r3, [sp, #4]
 800064c:	1b00      	subs	r0, r0, r4
 800064e:	4298      	cmp	r0, r3
 8000650:	d3f9      	bcc.n	8000646 <HAL_Delay+0xa>
  {
  }
}
 8000652:	b002      	add	sp, #8
 8000654:	bd10      	pop	{r4, pc}
	...

08000658 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800065a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000660:	041b      	lsls	r3, r3, #16
 8000662:	0c1b      	lsrs	r3, r3, #16
 8000664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000668:	0200      	lsls	r0, r0, #8
 800066a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000672:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000674:	60d3      	str	r3, [r2, #12]
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800067e:	b530      	push	{r4, r5, lr}
 8000680:	68dc      	ldr	r4, [r3, #12]
 8000682:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000686:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800068a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800068c:	2b04      	cmp	r3, #4
 800068e:	bf28      	it	cs
 8000690:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000692:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000694:	f04f 0501 	mov.w	r5, #1
 8000698:	fa05 f303 	lsl.w	r3, r5, r3
 800069c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a0:	bf8c      	ite	hi
 80006a2:	3c03      	subhi	r4, #3
 80006a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a6:	4019      	ands	r1, r3
 80006a8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006aa:	fa05 f404 	lsl.w	r4, r5, r4
 80006ae:	3c01      	subs	r4, #1
 80006b0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80006b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	ea42 0201 	orr.w	r2, r2, r1
 80006b8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	bfaf      	iteee	ge
 80006be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	f000 000f 	andlt.w	r0, r0, #15
 80006c6:	4b06      	ldrlt	r3, [pc, #24]	; (80006e0 <HAL_NVIC_SetPriority+0x64>)
 80006c8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	bfa5      	ittet	ge
 80006cc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80006d0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	bf00      	nop
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	e000ed14 	.word	0xe000ed14

080006e4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006e4:	0942      	lsrs	r2, r0, #5
 80006e6:	2301      	movs	r3, #1
 80006e8:	f000 001f 	and.w	r0, r0, #31
 80006ec:	fa03 f000 	lsl.w	r0, r3, r0
 80006f0:	4b01      	ldr	r3, [pc, #4]	; (80006f8 <HAL_NVIC_EnableIRQ+0x14>)
 80006f2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006f6:	4770      	bx	lr
 80006f8:	e000e100 	.word	0xe000e100

080006fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006fc:	3801      	subs	r0, #1
 80006fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000702:	d20a      	bcs.n	800071a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000706:	4a07      	ldr	r2, [pc, #28]	; (8000724 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000708:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	21f0      	movs	r1, #240	; 0xf0
 800070c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000710:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000712:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000714:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800071a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	e000e010 	.word	0xe000e010
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000728:	4b04      	ldr	r3, [pc, #16]	; (800073c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800072a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800072c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800072e:	bf0c      	ite	eq
 8000730:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000734:	f022 0204 	bicne.w	r2, r2, #4
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	4770      	bx	lr
 800073c:	e000e010 	.word	0xe000e010

08000740 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000740:	4770      	bx	lr

08000742 <HAL_SYSTICK_IRQHandler>:
{
 8000742:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000744:	f7ff fffc 	bl	8000740 <HAL_SYSTICK_Callback>
 8000748:	bd08      	pop	{r3, pc}
	...

0800074c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800074c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000750:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000754:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80008cc <HAL_GPIO_Init+0x180>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000758:	4a5a      	ldr	r2, [pc, #360]	; (80008c4 <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00;
 800075a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 800075c:	fa38 f403 	lsrs.w	r4, r8, r3
 8000760:	d102      	bne.n	8000768 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000762:	b003      	add	sp, #12
 8000764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000768:	2401      	movs	r4, #1
 800076a:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 800076e:	ea18 050a 	ands.w	r5, r8, sl
 8000772:	f000 809c 	beq.w	80008ae <HAL_GPIO_Init+0x162>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000776:	684c      	ldr	r4, [r1, #4]
 8000778:	f024 0b10 	bic.w	fp, r4, #16
 800077c:	f1bb 0f02 	cmp.w	fp, #2
 8000780:	d114      	bne.n	80007ac <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8000782:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8000786:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800078a:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800078e:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000792:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000796:	270f      	movs	r7, #15
 8000798:	fa07 f70c 	lsl.w	r7, r7, ip
 800079c:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80007a0:	690e      	ldr	r6, [r1, #16]
 80007a2:	fa06 f60c 	lsl.w	r6, r6, ip
 80007a6:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 80007a8:	f8ce 6020 	str.w	r6, [lr, #32]
 80007ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80007b0:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80007b2:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80007b4:	fa07 f70c 	lsl.w	r7, r7, ip
 80007b8:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80007ba:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80007be:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80007c0:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007c4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80007c8:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007cc:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80007d0:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007d2:	d811      	bhi.n	80007f8 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 80007d4:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80007d6:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 80007da:	68ce      	ldr	r6, [r1, #12]
 80007dc:	fa06 fe0c 	lsl.w	lr, r6, ip
 80007e0:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80007e4:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80007e6:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007e8:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80007ec:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80007f0:	409e      	lsls	r6, r3
 80007f2:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80007f6:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80007f8:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80007fa:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80007fc:	688e      	ldr	r6, [r1, #8]
 80007fe:	fa06 f60c 	lsl.w	r6, r6, ip
 8000802:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000804:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000806:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000808:	d551      	bpl.n	80008ae <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080a:	f8d9 6018 	ldr.w	r6, [r9, #24]
 800080e:	f046 0601 	orr.w	r6, r6, #1
 8000812:	f8c9 6018 	str.w	r6, [r9, #24]
 8000816:	f8d9 6018 	ldr.w	r6, [r9, #24]
 800081a:	f023 0703 	bic.w	r7, r3, #3
 800081e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000822:	f006 0601 	and.w	r6, r6, #1
 8000826:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800082a:	9601      	str	r6, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800082c:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000830:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000832:	68be      	ldr	r6, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000834:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000838:	f04f 0e0f 	mov.w	lr, #15
 800083c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000840:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000844:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000848:	d033      	beq.n	80008b2 <HAL_GPIO_Init+0x166>
 800084a:	4e1f      	ldr	r6, [pc, #124]	; (80008c8 <HAL_GPIO_Init+0x17c>)
 800084c:	42b0      	cmp	r0, r6
 800084e:	d032      	beq.n	80008b6 <HAL_GPIO_Init+0x16a>
 8000850:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000854:	42b0      	cmp	r0, r6
 8000856:	d030      	beq.n	80008ba <HAL_GPIO_Init+0x16e>
 8000858:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800085c:	42b0      	cmp	r0, r6
 800085e:	d02e      	beq.n	80008be <HAL_GPIO_Init+0x172>
 8000860:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000864:	42b0      	cmp	r0, r6
 8000866:	bf14      	ite	ne
 8000868:	2605      	movne	r6, #5
 800086a:	2604      	moveq	r6, #4
 800086c:	fa06 f60c 	lsl.w	r6, r6, ip
 8000870:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000874:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000876:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000878:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800087a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800087e:	bf0c      	ite	eq
 8000880:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000882:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000884:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000886:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000888:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800088c:	bf0c      	ite	eq
 800088e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000890:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000892:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000894:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000896:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800089a:	bf0c      	ite	eq
 800089c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800089e:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 80008a0:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 80008a2:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008a4:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008a6:	bf54      	ite	pl
 80008a8:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80008aa:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 80008ac:	60d6      	str	r6, [r2, #12]
    position++;
 80008ae:	3301      	adds	r3, #1
 80008b0:	e754      	b.n	800075c <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80008b2:	2600      	movs	r6, #0
 80008b4:	e7da      	b.n	800086c <HAL_GPIO_Init+0x120>
 80008b6:	2601      	movs	r6, #1
 80008b8:	e7d8      	b.n	800086c <HAL_GPIO_Init+0x120>
 80008ba:	2602      	movs	r6, #2
 80008bc:	e7d6      	b.n	800086c <HAL_GPIO_Init+0x120>
 80008be:	2603      	movs	r6, #3
 80008c0:	e7d4      	b.n	800086c <HAL_GPIO_Init+0x120>
 80008c2:	bf00      	nop
 80008c4:	40010400 	.word	0x40010400
 80008c8:	48000400 	.word	0x48000400
 80008cc:	40021000 	.word	0x40021000

080008d0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80008d0:	6903      	ldr	r3, [r0, #16]
 80008d2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80008d4:	bf14      	ite	ne
 80008d6:	2001      	movne	r0, #1
 80008d8:	2000      	moveq	r0, #0
 80008da:	4770      	bx	lr

080008dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008dc:	b10a      	cbz	r2, 80008e2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80008de:	6181      	str	r1, [r0, #24]
 80008e0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80008e2:	6281      	str	r1, [r0, #40]	; 0x28
 80008e4:	4770      	bx	lr

080008e6 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008e6:	4770      	bx	lr

080008e8 <HAL_GPIO_EXTI_IRQHandler>:
{
 80008e8:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80008ea:	4b04      	ldr	r3, [pc, #16]	; (80008fc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80008ec:	6959      	ldr	r1, [r3, #20]
 80008ee:	4201      	tst	r1, r0
 80008f0:	d002      	beq.n	80008f8 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80008f2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80008f4:	f7ff fff7 	bl	80008e6 <HAL_GPIO_EXTI_Callback>
 80008f8:	bd08      	pop	{r3, pc}
 80008fa:	bf00      	nop
 80008fc:	40010400 	.word	0x40010400

08000900 <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8000900:	4770      	bx	lr
	...

08000904 <HAL_PWR_PVD_IRQHandler>:
{
 8000904:	b510      	push	{r4, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8000906:	4c05      	ldr	r4, [pc, #20]	; (800091c <HAL_PWR_PVD_IRQHandler+0x18>)
 8000908:	6963      	ldr	r3, [r4, #20]
 800090a:	03db      	lsls	r3, r3, #15
 800090c:	d504      	bpl.n	8000918 <HAL_PWR_PVD_IRQHandler+0x14>
    HAL_PWR_PVDCallback();
 800090e:	f7ff fff7 	bl	8000900 <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8000912:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000916:	6163      	str	r3, [r4, #20]
 8000918:	bd10      	pop	{r4, pc}
 800091a:	bf00      	nop
 800091c:	40010400 	.word	0x40010400

08000920 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000920:	6803      	ldr	r3, [r0, #0]
{
 8000922:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000926:	07de      	lsls	r6, r3, #31
{
 8000928:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800092a:	d411      	bmi.n	8000950 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800092c:	682b      	ldr	r3, [r5, #0]
 800092e:	079c      	lsls	r4, r3, #30
 8000930:	f100 8083 	bmi.w	8000a3a <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000934:	682b      	ldr	r3, [r5, #0]
 8000936:	0718      	lsls	r0, r3, #28
 8000938:	f100 80f0 	bmi.w	8000b1c <HAL_RCC_OscConfig+0x1fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800093c:	682b      	ldr	r3, [r5, #0]
 800093e:	0759      	lsls	r1, r3, #29
 8000940:	f100 8135 	bmi.w	8000bae <HAL_RCC_OscConfig+0x28e>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000944:	69ea      	ldr	r2, [r5, #28]
 8000946:	2a00      	cmp	r2, #0
 8000948:	f040 81c8 	bne.w	8000cdc <HAL_RCC_OscConfig+0x3bc>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800094c:	2000      	movs	r0, #0
 800094e:	e020      	b.n	8000992 <HAL_RCC_OscConfig+0x72>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000950:	4cbd      	ldr	r4, [pc, #756]	; (8000c48 <HAL_RCC_OscConfig+0x328>)
 8000952:	6863      	ldr	r3, [r4, #4]
 8000954:	f003 030c 	and.w	r3, r3, #12
 8000958:	2b04      	cmp	r3, #4
 800095a:	d007      	beq.n	800096c <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800095c:	6863      	ldr	r3, [r4, #4]
 800095e:	f003 030c 	and.w	r3, r3, #12
 8000962:	2b08      	cmp	r3, #8
 8000964:	d118      	bne.n	8000998 <HAL_RCC_OscConfig+0x78>
 8000966:	6863      	ldr	r3, [r4, #4]
 8000968:	03d8      	lsls	r0, r3, #15
 800096a:	d515      	bpl.n	8000998 <HAL_RCC_OscConfig+0x78>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800096c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000970:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000974:	6822      	ldr	r2, [r4, #0]
 8000976:	fa93 f3a3 	rbit	r3, r3
 800097a:	fab3 f383 	clz	r3, r3
 800097e:	f003 031f 	and.w	r3, r3, #31
 8000982:	fa22 f303 	lsr.w	r3, r2, r3
 8000986:	07d9      	lsls	r1, r3, #31
 8000988:	d5d0      	bpl.n	800092c <HAL_RCC_OscConfig+0xc>
 800098a:	686b      	ldr	r3, [r5, #4]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d1cd      	bne.n	800092c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000990:	2001      	movs	r0, #1
}
 8000992:	b002      	add	sp, #8
 8000994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000998:	686a      	ldr	r2, [r5, #4]
 800099a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800099e:	d123      	bne.n	80009e8 <HAL_RCC_OscConfig+0xc8>
 80009a0:	6823      	ldr	r3, [r4, #0]
 80009a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009a6:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80009a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009aa:	68a9      	ldr	r1, [r5, #8]
 80009ac:	f023 030f 	bic.w	r3, r3, #15
 80009b0:	430b      	orrs	r3, r1
 80009b2:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80009b4:	b342      	cbz	r2, 8000a08 <HAL_RCC_OscConfig+0xe8>
        tickstart = HAL_GetTick();
 80009b6:	f7ff fe3b 	bl	8000630 <HAL_GetTick>
 80009ba:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80009be:	4607      	mov	r7, r0
 80009c0:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009c4:	6822      	ldr	r2, [r4, #0]
 80009c6:	fa96 f3a6 	rbit	r3, r6
 80009ca:	fab3 f383 	clz	r3, r3
 80009ce:	f003 031f 	and.w	r3, r3, #31
 80009d2:	fa22 f303 	lsr.w	r3, r2, r3
 80009d6:	07da      	lsls	r2, r3, #31
 80009d8:	d4a8      	bmi.n	800092c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009da:	f7ff fe29 	bl	8000630 <HAL_GetTick>
 80009de:	1bc0      	subs	r0, r0, r7
 80009e0:	2864      	cmp	r0, #100	; 0x64
 80009e2:	d9ed      	bls.n	80009c0 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 80009e4:	2003      	movs	r0, #3
 80009e6:	e7d4      	b.n	8000992 <HAL_RCC_OscConfig+0x72>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009e8:	6823      	ldr	r3, [r4, #0]
 80009ea:	b932      	cbnz	r2, 80009fa <HAL_RCC_OscConfig+0xda>
 80009ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009f0:	6023      	str	r3, [r4, #0]
 80009f2:	6823      	ldr	r3, [r4, #0]
 80009f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009f8:	e7d5      	b.n	80009a6 <HAL_RCC_OscConfig+0x86>
 80009fa:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80009fe:	d1f5      	bne.n	80009ec <HAL_RCC_OscConfig+0xcc>
 8000a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a04:	6023      	str	r3, [r4, #0]
 8000a06:	e7cb      	b.n	80009a0 <HAL_RCC_OscConfig+0x80>
        tickstart = HAL_GetTick();
 8000a08:	f7ff fe12 	bl	8000630 <HAL_GetTick>
 8000a0c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000a10:	4607      	mov	r7, r0
 8000a12:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a16:	6822      	ldr	r2, [r4, #0]
 8000a18:	fa96 f3a6 	rbit	r3, r6
 8000a1c:	fab3 f383 	clz	r3, r3
 8000a20:	f003 031f 	and.w	r3, r3, #31
 8000a24:	fa22 f303 	lsr.w	r3, r2, r3
 8000a28:	07db      	lsls	r3, r3, #31
 8000a2a:	f57f af7f 	bpl.w	800092c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a2e:	f7ff fdff 	bl	8000630 <HAL_GetTick>
 8000a32:	1bc0      	subs	r0, r0, r7
 8000a34:	2864      	cmp	r0, #100	; 0x64
 8000a36:	d9ec      	bls.n	8000a12 <HAL_RCC_OscConfig+0xf2>
 8000a38:	e7d4      	b.n	80009e4 <HAL_RCC_OscConfig+0xc4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000a3a:	4c83      	ldr	r4, [pc, #524]	; (8000c48 <HAL_RCC_OscConfig+0x328>)
 8000a3c:	6863      	ldr	r3, [r4, #4]
 8000a3e:	f013 0f0c 	tst.w	r3, #12
 8000a42:	d007      	beq.n	8000a54 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000a44:	6863      	ldr	r3, [r4, #4]
 8000a46:	f003 030c 	and.w	r3, r3, #12
 8000a4a:	2b08      	cmp	r3, #8
 8000a4c:	d120      	bne.n	8000a90 <HAL_RCC_OscConfig+0x170>
 8000a4e:	6863      	ldr	r3, [r4, #4]
 8000a50:	03d8      	lsls	r0, r3, #15
 8000a52:	d41d      	bmi.n	8000a90 <HAL_RCC_OscConfig+0x170>
 8000a54:	2302      	movs	r3, #2
 8000a56:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a5a:	6822      	ldr	r2, [r4, #0]
 8000a5c:	fa93 f3a3 	rbit	r3, r3
 8000a60:	fab3 f383 	clz	r3, r3
 8000a64:	f003 031f 	and.w	r3, r3, #31
 8000a68:	fa22 f303 	lsr.w	r3, r2, r3
 8000a6c:	07d9      	lsls	r1, r3, #31
 8000a6e:	d502      	bpl.n	8000a76 <HAL_RCC_OscConfig+0x156>
 8000a70:	692b      	ldr	r3, [r5, #16]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d18c      	bne.n	8000990 <HAL_RCC_OscConfig+0x70>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a76:	6821      	ldr	r1, [r4, #0]
 8000a78:	23f8      	movs	r3, #248	; 0xf8
 8000a7a:	fa93 f3a3 	rbit	r3, r3
 8000a7e:	fab3 f283 	clz	r2, r3
 8000a82:	696b      	ldr	r3, [r5, #20]
 8000a84:	4093      	lsls	r3, r2
 8000a86:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	6023      	str	r3, [r4, #0]
 8000a8e:	e751      	b.n	8000934 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a90:	692a      	ldr	r2, [r5, #16]
 8000a92:	2301      	movs	r3, #1
 8000a94:	b302      	cbz	r2, 8000ad8 <HAL_RCC_OscConfig+0x1b8>
 8000a96:	fa93 f2a3 	rbit	r2, r3
        __HAL_RCC_HSI_ENABLE();
 8000a9a:	fab2 f282 	clz	r2, r2
 8000a9e:	0092      	lsls	r2, r2, #2
 8000aa0:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 8000aa4:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 8000aa8:	2602      	movs	r6, #2
 8000aaa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000aac:	f7ff fdc0 	bl	8000630 <HAL_GetTick>
 8000ab0:	4607      	mov	r7, r0
 8000ab2:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ab6:	6822      	ldr	r2, [r4, #0]
 8000ab8:	fa96 f3a6 	rbit	r3, r6
 8000abc:	fab3 f383 	clz	r3, r3
 8000ac0:	f003 031f 	and.w	r3, r3, #31
 8000ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ac8:	07da      	lsls	r2, r3, #31
 8000aca:	d4d4      	bmi.n	8000a76 <HAL_RCC_OscConfig+0x156>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000acc:	f7ff fdb0 	bl	8000630 <HAL_GetTick>
 8000ad0:	1bc0      	subs	r0, r0, r7
 8000ad2:	2802      	cmp	r0, #2
 8000ad4:	d9ed      	bls.n	8000ab2 <HAL_RCC_OscConfig+0x192>
 8000ad6:	e785      	b.n	80009e4 <HAL_RCC_OscConfig+0xc4>
 8000ad8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8000adc:	fab3 f383 	clz	r3, r3
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000ae6:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000aea:	2602      	movs	r6, #2
 8000aec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000aee:	f7ff fd9f 	bl	8000630 <HAL_GetTick>
 8000af2:	4607      	mov	r7, r0
 8000af4:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000af8:	6822      	ldr	r2, [r4, #0]
 8000afa:	fa96 f3a6 	rbit	r3, r6
 8000afe:	fab3 f383 	clz	r3, r3
 8000b02:	f003 031f 	and.w	r3, r3, #31
 8000b06:	fa22 f303 	lsr.w	r3, r2, r3
 8000b0a:	07db      	lsls	r3, r3, #31
 8000b0c:	f57f af12 	bpl.w	8000934 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b10:	f7ff fd8e 	bl	8000630 <HAL_GetTick>
 8000b14:	1bc0      	subs	r0, r0, r7
 8000b16:	2802      	cmp	r0, #2
 8000b18:	d9ec      	bls.n	8000af4 <HAL_RCC_OscConfig+0x1d4>
 8000b1a:	e763      	b.n	80009e4 <HAL_RCC_OscConfig+0xc4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b1c:	69aa      	ldr	r2, [r5, #24]
 8000b1e:	4c4a      	ldr	r4, [pc, #296]	; (8000c48 <HAL_RCC_OscConfig+0x328>)
 8000b20:	494a      	ldr	r1, [pc, #296]	; (8000c4c <HAL_RCC_OscConfig+0x32c>)
 8000b22:	2301      	movs	r3, #1
 8000b24:	b30a      	cbz	r2, 8000b6a <HAL_RCC_OscConfig+0x24a>
 8000b26:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_LSI_ENABLE();
 8000b2a:	fab2 f282 	clz	r2, r2
 8000b2e:	2602      	movs	r6, #2
 8000b30:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      tickstart = HAL_GetTick();
 8000b34:	f7ff fd7c 	bl	8000630 <HAL_GetTick>
 8000b38:	4607      	mov	r7, r0
 8000b3a:	fa96 f3a6 	rbit	r3, r6
 8000b3e:	fa96 f3a6 	rbit	r3, r6
 8000b42:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b46:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b48:	fa96 f3a6 	rbit	r3, r6
 8000b4c:	fab3 f383 	clz	r3, r3
 8000b50:	f003 031f 	and.w	r3, r3, #31
 8000b54:	fa22 f303 	lsr.w	r3, r2, r3
 8000b58:	07da      	lsls	r2, r3, #31
 8000b5a:	f53f aeef 	bmi.w	800093c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b5e:	f7ff fd67 	bl	8000630 <HAL_GetTick>
 8000b62:	1bc0      	subs	r0, r0, r7
 8000b64:	2802      	cmp	r0, #2
 8000b66:	d9e8      	bls.n	8000b3a <HAL_RCC_OscConfig+0x21a>
 8000b68:	e73c      	b.n	80009e4 <HAL_RCC_OscConfig+0xc4>
 8000b6a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_LSI_DISABLE();
 8000b6e:	fab3 f383 	clz	r3, r3
 8000b72:	2602      	movs	r6, #2
 8000b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      tickstart = HAL_GetTick();
 8000b78:	f7ff fd5a 	bl	8000630 <HAL_GetTick>
 8000b7c:	4607      	mov	r7, r0
 8000b7e:	fa96 f3a6 	rbit	r3, r6
 8000b82:	fa96 f3a6 	rbit	r3, r6
 8000b86:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b8c:	fa96 f3a6 	rbit	r3, r6
 8000b90:	fab3 f383 	clz	r3, r3
 8000b94:	f003 031f 	and.w	r3, r3, #31
 8000b98:	fa22 f303 	lsr.w	r3, r2, r3
 8000b9c:	07db      	lsls	r3, r3, #31
 8000b9e:	f57f aecd 	bpl.w	800093c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ba2:	f7ff fd45 	bl	8000630 <HAL_GetTick>
 8000ba6:	1bc0      	subs	r0, r0, r7
 8000ba8:	2802      	cmp	r0, #2
 8000baa:	d9e8      	bls.n	8000b7e <HAL_RCC_OscConfig+0x25e>
 8000bac:	e71a      	b.n	80009e4 <HAL_RCC_OscConfig+0xc4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bae:	4c26      	ldr	r4, [pc, #152]	; (8000c48 <HAL_RCC_OscConfig+0x328>)
 8000bb0:	69e3      	ldr	r3, [r4, #28]
 8000bb2:	00d8      	lsls	r0, r3, #3
 8000bb4:	d434      	bmi.n	8000c20 <HAL_RCC_OscConfig+0x300>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	69e3      	ldr	r3, [r4, #28]
 8000bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bbc:	61e3      	str	r3, [r4, #28]
 8000bbe:	69e3      	ldr	r3, [r4, #28]
 8000bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	9301      	str	r3, [sp, #4]
 8000bc6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000bc8:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bca:	4e21      	ldr	r6, [pc, #132]	; (8000c50 <HAL_RCC_OscConfig+0x330>)
 8000bcc:	6833      	ldr	r3, [r6, #0]
 8000bce:	05d9      	lsls	r1, r3, #23
 8000bd0:	d528      	bpl.n	8000c24 <HAL_RCC_OscConfig+0x304>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bd2:	68eb      	ldr	r3, [r5, #12]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d13d      	bne.n	8000c54 <HAL_RCC_OscConfig+0x334>
 8000bd8:	6a23      	ldr	r3, [r4, #32]
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000be0:	f7ff fd26 	bl	8000630 <HAL_GetTick>
 8000be4:	2602      	movs	r6, #2
 8000be6:	4682      	mov	sl, r0
 8000be8:	46b1      	mov	r9, r6
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bea:	f241 3888 	movw	r8, #5000	; 0x1388
 8000bee:	fa96 f3a6 	rbit	r3, r6
 8000bf2:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d068      	beq.n	8000ccc <HAL_RCC_OscConfig+0x3ac>
 8000bfa:	6a22      	ldr	r2, [r4, #32]
 8000bfc:	fa99 f3a9 	rbit	r3, r9
 8000c00:	fab3 f383 	clz	r3, r3
 8000c04:	f003 031f 	and.w	r3, r3, #31
 8000c08:	fa22 f303 	lsr.w	r3, r2, r3
 8000c0c:	07db      	lsls	r3, r3, #31
 8000c0e:	d556      	bpl.n	8000cbe <HAL_RCC_OscConfig+0x39e>
    if(pwrclkchanged == SET)
 8000c10:	2f00      	cmp	r7, #0
 8000c12:	f43f ae97 	beq.w	8000944 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c16:	69e3      	ldr	r3, [r4, #28]
 8000c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	61e3      	str	r3, [r4, #28]
 8000c1e:	e691      	b.n	8000944 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000c20:	2700      	movs	r7, #0
 8000c22:	e7d2      	b.n	8000bca <HAL_RCC_OscConfig+0x2aa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c24:	6833      	ldr	r3, [r6, #0]
 8000c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c2a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000c2c:	f7ff fd00 	bl	8000630 <HAL_GetTick>
 8000c30:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c32:	6833      	ldr	r3, [r6, #0]
 8000c34:	05da      	lsls	r2, r3, #23
 8000c36:	d4cc      	bmi.n	8000bd2 <HAL_RCC_OscConfig+0x2b2>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c38:	f7ff fcfa 	bl	8000630 <HAL_GetTick>
 8000c3c:	eba0 0008 	sub.w	r0, r0, r8
 8000c40:	2864      	cmp	r0, #100	; 0x64
 8000c42:	d9f6      	bls.n	8000c32 <HAL_RCC_OscConfig+0x312>
 8000c44:	e6ce      	b.n	80009e4 <HAL_RCC_OscConfig+0xc4>
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	42420480 	.word	0x42420480
 8000c50:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c54:	bb2b      	cbnz	r3, 8000ca2 <HAL_RCC_OscConfig+0x382>
 8000c56:	6a23      	ldr	r3, [r4, #32]
 8000c58:	f023 0301 	bic.w	r3, r3, #1
 8000c5c:	6223      	str	r3, [r4, #32]
 8000c5e:	6a23      	ldr	r3, [r4, #32]
 8000c60:	f023 0304 	bic.w	r3, r3, #4
 8000c64:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000c66:	f7ff fce3 	bl	8000630 <HAL_GetTick>
 8000c6a:	2602      	movs	r6, #2
 8000c6c:	4681      	mov	r9, r0
 8000c6e:	46b0      	mov	r8, r6
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c70:	f241 3a88 	movw	sl, #5000	; 0x1388
 8000c74:	fa96 f3a6 	rbit	r3, r6
 8000c78:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c7c:	b353      	cbz	r3, 8000cd4 <HAL_RCC_OscConfig+0x3b4>
 8000c7e:	6a22      	ldr	r2, [r4, #32]
 8000c80:	fa98 f3a8 	rbit	r3, r8
 8000c84:	fab3 f383 	clz	r3, r3
 8000c88:	f003 031f 	and.w	r3, r3, #31
 8000c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c90:	07d8      	lsls	r0, r3, #31
 8000c92:	d5bd      	bpl.n	8000c10 <HAL_RCC_OscConfig+0x2f0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c94:	f7ff fccc 	bl	8000630 <HAL_GetTick>
 8000c98:	eba0 0009 	sub.w	r0, r0, r9
 8000c9c:	4550      	cmp	r0, sl
 8000c9e:	d9e9      	bls.n	8000c74 <HAL_RCC_OscConfig+0x354>
 8000ca0:	e6a0      	b.n	80009e4 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ca2:	2b05      	cmp	r3, #5
 8000ca4:	6a23      	ldr	r3, [r4, #32]
 8000ca6:	d103      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x390>
 8000ca8:	f043 0304 	orr.w	r3, r3, #4
 8000cac:	6223      	str	r3, [r4, #32]
 8000cae:	e793      	b.n	8000bd8 <HAL_RCC_OscConfig+0x2b8>
 8000cb0:	f023 0301 	bic.w	r3, r3, #1
 8000cb4:	6223      	str	r3, [r4, #32]
 8000cb6:	6a23      	ldr	r3, [r4, #32]
 8000cb8:	f023 0304 	bic.w	r3, r3, #4
 8000cbc:	e78f      	b.n	8000bde <HAL_RCC_OscConfig+0x2be>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cbe:	f7ff fcb7 	bl	8000630 <HAL_GetTick>
 8000cc2:	eba0 000a 	sub.w	r0, r0, sl
 8000cc6:	4540      	cmp	r0, r8
 8000cc8:	d991      	bls.n	8000bee <HAL_RCC_OscConfig+0x2ce>
 8000cca:	e68b      	b.n	80009e4 <HAL_RCC_OscConfig+0xc4>
 8000ccc:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000cd2:	e793      	b.n	8000bfc <HAL_RCC_OscConfig+0x2dc>
 8000cd4:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cd8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000cda:	e7d1      	b.n	8000c80 <HAL_RCC_OscConfig+0x360>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cdc:	4c3f      	ldr	r4, [pc, #252]	; (8000ddc <HAL_RCC_OscConfig+0x4bc>)
 8000cde:	6863      	ldr	r3, [r4, #4]
 8000ce0:	f003 030c 	and.w	r3, r3, #12
 8000ce4:	2b08      	cmp	r3, #8
 8000ce6:	f43f ae53 	beq.w	8000990 <HAL_RCC_OscConfig+0x70>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cea:	2a02      	cmp	r2, #2
 8000cec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cf0:	d150      	bne.n	8000d94 <HAL_RCC_OscConfig+0x474>
 8000cf2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000cf6:	fab3 f383 	clz	r3, r3
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000d00:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d08:	f7ff fc92 	bl	8000630 <HAL_GetTick>
 8000d0c:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000d10:	4607      	mov	r7, r0
 8000d12:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d16:	6822      	ldr	r2, [r4, #0]
 8000d18:	fa96 f3a6 	rbit	r3, r6
 8000d1c:	fab3 f383 	clz	r3, r3
 8000d20:	f003 031f 	and.w	r3, r3, #31
 8000d24:	fa22 f303 	lsr.w	r3, r2, r3
 8000d28:	07d9      	lsls	r1, r3, #31
 8000d2a:	d42d      	bmi.n	8000d88 <HAL_RCC_OscConfig+0x468>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d2c:	6862      	ldr	r2, [r4, #4]
 8000d2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000d30:	6a29      	ldr	r1, [r5, #32]
 8000d32:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000d36:	430b      	orrs	r3, r1
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	6063      	str	r3, [r4, #4]
 8000d3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d40:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000d44:	fab3 f383 	clz	r3, r3
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000d4e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000d52:	2201      	movs	r2, #1
 8000d54:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d56:	f7ff fc6b 	bl	8000630 <HAL_GetTick>
 8000d5a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000d5e:	4606      	mov	r6, r0
 8000d60:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d64:	6822      	ldr	r2, [r4, #0]
 8000d66:	fa95 f3a5 	rbit	r3, r5
 8000d6a:	fab3 f383 	clz	r3, r3
 8000d6e:	f003 031f 	and.w	r3, r3, #31
 8000d72:	fa22 f303 	lsr.w	r3, r2, r3
 8000d76:	07da      	lsls	r2, r3, #31
 8000d78:	f53f ade8 	bmi.w	800094c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d7c:	f7ff fc58 	bl	8000630 <HAL_GetTick>
 8000d80:	1b80      	subs	r0, r0, r6
 8000d82:	2802      	cmp	r0, #2
 8000d84:	d9ec      	bls.n	8000d60 <HAL_RCC_OscConfig+0x440>
 8000d86:	e62d      	b.n	80009e4 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d88:	f7ff fc52 	bl	8000630 <HAL_GetTick>
 8000d8c:	1bc0      	subs	r0, r0, r7
 8000d8e:	2802      	cmp	r0, #2
 8000d90:	d9bf      	bls.n	8000d12 <HAL_RCC_OscConfig+0x3f2>
 8000d92:	e627      	b.n	80009e4 <HAL_RCC_OscConfig+0xc4>
 8000d94:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000d98:	fab3 f383 	clz	r3, r3
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000da2:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000daa:	f7ff fc41 	bl	8000630 <HAL_GetTick>
 8000dae:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000db2:	4606      	mov	r6, r0
 8000db4:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000db8:	6822      	ldr	r2, [r4, #0]
 8000dba:	fa95 f3a5 	rbit	r3, r5
 8000dbe:	fab3 f383 	clz	r3, r3
 8000dc2:	f003 031f 	and.w	r3, r3, #31
 8000dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dca:	07db      	lsls	r3, r3, #31
 8000dcc:	f57f adbe 	bpl.w	800094c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dd0:	f7ff fc2e 	bl	8000630 <HAL_GetTick>
 8000dd4:	1b80      	subs	r0, r0, r6
 8000dd6:	2802      	cmp	r0, #2
 8000dd8:	d9ec      	bls.n	8000db4 <HAL_RCC_OscConfig+0x494>
 8000dda:	e603      	b.n	80009e4 <HAL_RCC_OscConfig+0xc4>
 8000ddc:	40021000 	.word	0x40021000

08000de0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000de0:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8000de2:	4c13      	ldr	r4, [pc, #76]	; (8000e30 <HAL_RCC_GetSysClockFreq+0x50>)
 8000de4:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000de6:	f001 030c 	and.w	r3, r1, #12
 8000dea:	2b08      	cmp	r3, #8
 8000dec:	d11e      	bne.n	8000e2c <HAL_RCC_GetSysClockFreq+0x4c>
 8000dee:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000df2:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000df6:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8000dfa:	fab3 f383 	clz	r3, r3
 8000dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8000e02:	4a0c      	ldr	r2, [pc, #48]	; (8000e34 <HAL_RCC_GetSysClockFreq+0x54>)
 8000e04:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000e06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e08:	220f      	movs	r2, #15
 8000e0a:	fa92 f2a2 	rbit	r2, r2
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	40d3      	lsrs	r3, r2
 8000e18:	4a07      	ldr	r2, [pc, #28]	; (8000e38 <HAL_RCC_GetSysClockFreq+0x58>)
 8000e1a:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000e1c:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000e1e:	bf4a      	itet	mi
 8000e20:	4b06      	ldrmi	r3, [pc, #24]	; (8000e3c <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8000e22:	4b07      	ldrpl	r3, [pc, #28]	; (8000e40 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000e24:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8000e28:	4358      	muls	r0, r3
 8000e2a:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000e2c:	4803      	ldr	r0, [pc, #12]	; (8000e3c <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000e2e:	bd10      	pop	{r4, pc}
 8000e30:	40021000 	.word	0x40021000
 8000e34:	0800223c 	.word	0x0800223c
 8000e38:	0800224c 	.word	0x0800224c
 8000e3c:	007a1200 	.word	0x007a1200
 8000e40:	003d0900 	.word	0x003d0900

08000e44 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e44:	4a55      	ldr	r2, [pc, #340]	; (8000f9c <HAL_RCC_ClockConfig+0x158>)
 8000e46:	6813      	ldr	r3, [r2, #0]
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	428b      	cmp	r3, r1
{
 8000e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e52:	4606      	mov	r6, r0
 8000e54:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e56:	d330      	bcc.n	8000eba <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e58:	6832      	ldr	r2, [r6, #0]
 8000e5a:	0794      	lsls	r4, r2, #30
 8000e5c:	d43a      	bmi.n	8000ed4 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e5e:	07d0      	lsls	r0, r2, #31
 8000e60:	d440      	bmi.n	8000ee4 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e62:	4a4e      	ldr	r2, [pc, #312]	; (8000f9c <HAL_RCC_ClockConfig+0x158>)
 8000e64:	6813      	ldr	r3, [r2, #0]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	429d      	cmp	r5, r3
 8000e6c:	f0c0 8084 	bcc.w	8000f78 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e70:	6832      	ldr	r2, [r6, #0]
 8000e72:	4c4b      	ldr	r4, [pc, #300]	; (8000fa0 <HAL_RCC_ClockConfig+0x15c>)
 8000e74:	f012 0f04 	tst.w	r2, #4
 8000e78:	f040 8089 	bne.w	8000f8e <HAL_RCC_ClockConfig+0x14a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e7c:	0713      	lsls	r3, r2, #28
 8000e7e:	d506      	bpl.n	8000e8e <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e80:	6863      	ldr	r3, [r4, #4]
 8000e82:	6932      	ldr	r2, [r6, #16]
 8000e84:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000e88:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e8c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000e8e:	f7ff ffa7 	bl	8000de0 <HAL_RCC_GetSysClockFreq>
 8000e92:	6863      	ldr	r3, [r4, #4]
 8000e94:	22f0      	movs	r2, #240	; 0xf0
 8000e96:	fa92 f2a2 	rbit	r2, r2
 8000e9a:	fab2 f282 	clz	r2, r2
 8000e9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ea2:	40d3      	lsrs	r3, r2
 8000ea4:	4a3f      	ldr	r2, [pc, #252]	; (8000fa4 <HAL_RCC_ClockConfig+0x160>)
 8000ea6:	5cd3      	ldrb	r3, [r2, r3]
 8000ea8:	40d8      	lsrs	r0, r3
 8000eaa:	4b3f      	ldr	r3, [pc, #252]	; (8000fa8 <HAL_RCC_ClockConfig+0x164>)
 8000eac:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff fb90 	bl	80005d4 <HAL_InitTick>
  return HAL_OK;
 8000eb4:	2000      	movs	r0, #0
}
 8000eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eba:	6813      	ldr	r3, [r2, #0]
 8000ebc:	f023 0307 	bic.w	r3, r3, #7
 8000ec0:	430b      	orrs	r3, r1
 8000ec2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ec4:	6813      	ldr	r3, [r2, #0]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	4299      	cmp	r1, r3
 8000ecc:	d0c4      	beq.n	8000e58 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000ece:	2001      	movs	r0, #1
 8000ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ed4:	4932      	ldr	r1, [pc, #200]	; (8000fa0 <HAL_RCC_ClockConfig+0x15c>)
 8000ed6:	68b0      	ldr	r0, [r6, #8]
 8000ed8:	684b      	ldr	r3, [r1, #4]
 8000eda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ede:	4303      	orrs	r3, r0
 8000ee0:	604b      	str	r3, [r1, #4]
 8000ee2:	e7bc      	b.n	8000e5e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ee4:	6872      	ldr	r2, [r6, #4]
 8000ee6:	4c2e      	ldr	r4, [pc, #184]	; (8000fa0 <HAL_RCC_ClockConfig+0x15c>)
 8000ee8:	2a01      	cmp	r2, #1
 8000eea:	d128      	bne.n	8000f3e <HAL_RCC_ClockConfig+0xfa>
 8000eec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef0:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef4:	6821      	ldr	r1, [r4, #0]
 8000ef6:	fa93 f3a3 	rbit	r3, r3
 8000efa:	fab3 f383 	clz	r3, r3
 8000efe:	f003 031f 	and.w	r3, r3, #31
 8000f02:	fa21 f303 	lsr.w	r3, r1, r3
 8000f06:	07d9      	lsls	r1, r3, #31
 8000f08:	d5e1      	bpl.n	8000ece <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f0a:	6863      	ldr	r3, [r4, #4]
 8000f0c:	f023 0303 	bic.w	r3, r3, #3
 8000f10:	431a      	orrs	r2, r3
 8000f12:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8000f14:	f7ff fb8c 	bl	8000630 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f18:	6873      	ldr	r3, [r6, #4]
 8000f1a:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000f1c:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f1e:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f22:	d112      	bne.n	8000f4a <HAL_RCC_ClockConfig+0x106>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f24:	6863      	ldr	r3, [r4, #4]
 8000f26:	f003 030c 	and.w	r3, r3, #12
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	d099      	beq.n	8000e62 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f2e:	f7ff fb7f 	bl	8000630 <HAL_GetTick>
 8000f32:	1bc0      	subs	r0, r0, r7
 8000f34:	4540      	cmp	r0, r8
 8000f36:	d9f5      	bls.n	8000f24 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8000f38:	2003      	movs	r0, #3
 8000f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f3e:	2a02      	cmp	r2, #2
 8000f40:	bf0c      	ite	eq
 8000f42:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000f46:	2302      	movne	r3, #2
 8000f48:	e7d2      	b.n	8000ef0 <HAL_RCC_ClockConfig+0xac>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d10f      	bne.n	8000f6e <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f4e:	6863      	ldr	r3, [r4, #4]
 8000f50:	f003 030c 	and.w	r3, r3, #12
 8000f54:	2b08      	cmp	r3, #8
 8000f56:	d084      	beq.n	8000e62 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f58:	f7ff fb6a 	bl	8000630 <HAL_GetTick>
 8000f5c:	1bc0      	subs	r0, r0, r7
 8000f5e:	4540      	cmp	r0, r8
 8000f60:	d9f5      	bls.n	8000f4e <HAL_RCC_ClockConfig+0x10a>
 8000f62:	e7e9      	b.n	8000f38 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f64:	f7ff fb64 	bl	8000630 <HAL_GetTick>
 8000f68:	1bc0      	subs	r0, r0, r7
 8000f6a:	4540      	cmp	r0, r8
 8000f6c:	d8e4      	bhi.n	8000f38 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f6e:	6863      	ldr	r3, [r4, #4]
 8000f70:	f013 0f0c 	tst.w	r3, #12
 8000f74:	d1f6      	bne.n	8000f64 <HAL_RCC_ClockConfig+0x120>
 8000f76:	e774      	b.n	8000e62 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f78:	6813      	ldr	r3, [r2, #0]
 8000f7a:	f023 0307 	bic.w	r3, r3, #7
 8000f7e:	432b      	orrs	r3, r5
 8000f80:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f82:	6813      	ldr	r3, [r2, #0]
 8000f84:	f003 0307 	and.w	r3, r3, #7
 8000f88:	429d      	cmp	r5, r3
 8000f8a:	d1a0      	bne.n	8000ece <HAL_RCC_ClockConfig+0x8a>
 8000f8c:	e770      	b.n	8000e70 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f8e:	6863      	ldr	r3, [r4, #4]
 8000f90:	68f1      	ldr	r1, [r6, #12]
 8000f92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f96:	430b      	orrs	r3, r1
 8000f98:	6063      	str	r3, [r4, #4]
 8000f9a:	e76f      	b.n	8000e7c <HAL_RCC_ClockConfig+0x38>
 8000f9c:	40022000 	.word	0x40022000
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	08002273 	.word	0x08002273
 8000fa8:	20000000 	.word	0x20000000

08000fac <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000fac:	4b01      	ldr	r3, [pc, #4]	; (8000fb4 <HAL_RCC_GetHCLKFreq+0x8>)
 8000fae:	6818      	ldr	r0, [r3, #0]
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000000 	.word	0x20000000

08000fb8 <GPIO_SetBits>:
void HD44780_GotoXY(unsigned char x, unsigned char y);
void HD44780_PutStr(char *str);
void HD44780_ClrScr(void);

void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f7ff bc8f 	b.w	80008dc <HAL_GPIO_WritePin>

08000fbe <GPIO_ResetBits>:
}

void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f7ff bc8c 	b.w	80008dc <HAL_GPIO_WritePin>

08000fc4 <hd44780_wr_hi_nibble>:
}

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble(unsigned char data) {
 8000fc4:	b510      	push	{r4, lr}
 8000fc6:	4604      	mov	r4, r0
	if (data & 0x10) {
 8000fc8:	06e2      	lsls	r2, r4, #27
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8000fca:	f04f 0110 	mov.w	r1, #16
 8000fce:	481b      	ldr	r0, [pc, #108]	; (800103c <hd44780_wr_hi_nibble+0x78>)
	if (data & 0x10) {
 8000fd0:	d527      	bpl.n	8001022 <hd44780_wr_hi_nibble+0x5e>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8000fd2:	f7ff fff1 	bl	8000fb8 <GPIO_SetBits>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	}
	if (data & 0x20) {
 8000fd6:	06a3      	lsls	r3, r4, #26
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8000fd8:	f04f 0120 	mov.w	r1, #32
 8000fdc:	4817      	ldr	r0, [pc, #92]	; (800103c <hd44780_wr_hi_nibble+0x78>)
	if (data & 0x20) {
 8000fde:	d523      	bpl.n	8001028 <hd44780_wr_hi_nibble+0x64>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8000fe0:	f7ff ffea 	bl	8000fb8 <GPIO_SetBits>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	}
	if (data & 0x40) {
 8000fe4:	0662      	lsls	r2, r4, #25
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8000fe6:	f04f 0140 	mov.w	r1, #64	; 0x40
 8000fea:	4814      	ldr	r0, [pc, #80]	; (800103c <hd44780_wr_hi_nibble+0x78>)
	if (data & 0x40) {
 8000fec:	d51f      	bpl.n	800102e <hd44780_wr_hi_nibble+0x6a>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8000fee:	f7ff ffe3 	bl	8000fb8 <GPIO_SetBits>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	}
	if (data & 0x80) {
 8000ff2:	0623      	lsls	r3, r4, #24
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8000ff4:	f04f 0180 	mov.w	r1, #128	; 0x80
 8000ff8:	4810      	ldr	r0, [pc, #64]	; (800103c <hd44780_wr_hi_nibble+0x78>)
	if (data & 0x80) {
 8000ffa:	d51b      	bpl.n	8001034 <hd44780_wr_hi_nibble+0x70>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8000ffc:	f7ff ffdc 	bl	8000fb8 <GPIO_SetBits>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
	}

	/* set the EN signal */
	hd44780_EN_On();
 8001000:	2201      	movs	r2, #1
 8001002:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001006:	480d      	ldr	r0, [pc, #52]	; (800103c <hd44780_wr_hi_nibble+0x78>)
 8001008:	f7ff fc68 	bl	80008dc <HAL_GPIO_WritePin>
// I don't like using loops for timing, so I just set a longish hal delay to ensure it works
//	unsigned long i = 0;

//	while (i < del)
//		i++;
	HAL_Delay(10);
 800100c:	200a      	movs	r0, #10
 800100e:	f7ff fb15 	bl	800063c <HAL_Delay>
	hd44780_EN_Off();
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001018:	4808      	ldr	r0, [pc, #32]	; (800103c <hd44780_wr_hi_nibble+0x78>)
}
 800101a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hd44780_EN_Off();
 800101e:	f7ff bc5d 	b.w	80008dc <HAL_GPIO_WritePin>
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8001022:	f7ff ffcc 	bl	8000fbe <GPIO_ResetBits>
 8001026:	e7d6      	b.n	8000fd6 <hd44780_wr_hi_nibble+0x12>
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8001028:	f7ff ffc9 	bl	8000fbe <GPIO_ResetBits>
 800102c:	e7da      	b.n	8000fe4 <hd44780_wr_hi_nibble+0x20>
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 800102e:	f7ff ffc6 	bl	8000fbe <GPIO_ResetBits>
 8001032:	e7de      	b.n	8000ff2 <hd44780_wr_hi_nibble+0x2e>
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8001034:	f7ff ffc3 	bl	8000fbe <GPIO_ResetBits>
 8001038:	e7e2      	b.n	8001000 <hd44780_wr_hi_nibble+0x3c>
 800103a:	bf00      	nop
 800103c:	48000c00 	.word	0x48000c00

08001040 <hd44780_write>:
{
 8001040:	b510      	push	{r4, lr}
 8001042:	4604      	mov	r4, r0
	if ( data & 0x01 ) {
 8001044:	07e2      	lsls	r2, r4, #31
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT0 );
 8001046:	f04f 0101 	mov.w	r1, #1
 800104a:	4830      	ldr	r0, [pc, #192]	; (800110c <hd44780_write+0xcc>)
	if ( data & 0x01 ) {
 800104c:	d546      	bpl.n	80010dc <hd44780_write+0x9c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT0 );
 800104e:	f7ff ffb3 	bl	8000fb8 <GPIO_SetBits>
	if ( data & 0x02 ) {
 8001052:	07a3      	lsls	r3, r4, #30
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT1 );
 8001054:	f04f 0102 	mov.w	r1, #2
 8001058:	482c      	ldr	r0, [pc, #176]	; (800110c <hd44780_write+0xcc>)
	if ( data & 0x02 ) {
 800105a:	d542      	bpl.n	80010e2 <hd44780_write+0xa2>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT1 );
 800105c:	f7ff ffac 	bl	8000fb8 <GPIO_SetBits>
	if ( data & 0x04 ) {
 8001060:	0762      	lsls	r2, r4, #29
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT2 );
 8001062:	f04f 0104 	mov.w	r1, #4
 8001066:	4829      	ldr	r0, [pc, #164]	; (800110c <hd44780_write+0xcc>)
	if ( data & 0x04 ) {
 8001068:	d53e      	bpl.n	80010e8 <hd44780_write+0xa8>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT2 );
 800106a:	f7ff ffa5 	bl	8000fb8 <GPIO_SetBits>
	if ( data & 0x08 ) {
 800106e:	0723      	lsls	r3, r4, #28
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT3 );
 8001070:	f04f 0108 	mov.w	r1, #8
 8001074:	4825      	ldr	r0, [pc, #148]	; (800110c <hd44780_write+0xcc>)
	if ( data & 0x08 ) {
 8001076:	d53a      	bpl.n	80010ee <hd44780_write+0xae>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT3 );
 8001078:	f7ff ff9e 	bl	8000fb8 <GPIO_SetBits>
	if ( data & 0x10 ) {
 800107c:	06e2      	lsls	r2, r4, #27
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
 800107e:	f04f 0110 	mov.w	r1, #16
 8001082:	4822      	ldr	r0, [pc, #136]	; (800110c <hd44780_write+0xcc>)
	if ( data & 0x10 ) {
 8001084:	d536      	bpl.n	80010f4 <hd44780_write+0xb4>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
 8001086:	f7ff ff97 	bl	8000fb8 <GPIO_SetBits>
	if ( data & 0x20 ) {
 800108a:	06a3      	lsls	r3, r4, #26
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
 800108c:	f04f 0120 	mov.w	r1, #32
 8001090:	481e      	ldr	r0, [pc, #120]	; (800110c <hd44780_write+0xcc>)
	if ( data & 0x20 ) {
 8001092:	d532      	bpl.n	80010fa <hd44780_write+0xba>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
 8001094:	f7ff ff90 	bl	8000fb8 <GPIO_SetBits>
	if ( data & 0x40 ) {
 8001098:	0662      	lsls	r2, r4, #25
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
 800109a:	f04f 0140 	mov.w	r1, #64	; 0x40
 800109e:	481b      	ldr	r0, [pc, #108]	; (800110c <hd44780_write+0xcc>)
	if ( data & 0x40 ) {
 80010a0:	d52e      	bpl.n	8001100 <hd44780_write+0xc0>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
 80010a2:	f7ff ff89 	bl	8000fb8 <GPIO_SetBits>
	if ( data & 0x80 ) {
 80010a6:	0623      	lsls	r3, r4, #24
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7 );
 80010a8:	f04f 0180 	mov.w	r1, #128	; 0x80
 80010ac:	4817      	ldr	r0, [pc, #92]	; (800110c <hd44780_write+0xcc>)
	if ( data & 0x80 ) {
 80010ae:	d52a      	bpl.n	8001106 <hd44780_write+0xc6>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7 );
 80010b0:	f7ff ff82 	bl	8000fb8 <GPIO_SetBits>
	hd44780_EN_On();
 80010b4:	2201      	movs	r2, #1
 80010b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ba:	4814      	ldr	r0, [pc, #80]	; (800110c <hd44780_write+0xcc>)
 80010bc:	f7ff fc0e 	bl	80008dc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80010c0:	200a      	movs	r0, #10
 80010c2:	f7ff fabb 	bl	800063c <HAL_Delay>
	hd44780_EN_Off();
 80010c6:	4811      	ldr	r0, [pc, #68]	; (800110c <hd44780_write+0xcc>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ce:	f7ff fc05 	bl	80008dc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80010d2:	200a      	movs	r0, #10
}
 80010d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(10);
 80010d8:	f7ff bab0 	b.w	800063c <HAL_Delay>
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT0 );
 80010dc:	f7ff ff6f 	bl	8000fbe <GPIO_ResetBits>
 80010e0:	e7b7      	b.n	8001052 <hd44780_write+0x12>
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT1 );
 80010e2:	f7ff ff6c 	bl	8000fbe <GPIO_ResetBits>
 80010e6:	e7bb      	b.n	8001060 <hd44780_write+0x20>
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT2 );
 80010e8:	f7ff ff69 	bl	8000fbe <GPIO_ResetBits>
 80010ec:	e7bf      	b.n	800106e <hd44780_write+0x2e>
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT3 );
 80010ee:	f7ff ff66 	bl	8000fbe <GPIO_ResetBits>
 80010f2:	e7c3      	b.n	800107c <hd44780_write+0x3c>
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4 );
 80010f4:	f7ff ff63 	bl	8000fbe <GPIO_ResetBits>
 80010f8:	e7c7      	b.n	800108a <hd44780_write+0x4a>
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5 );
 80010fa:	f7ff ff60 	bl	8000fbe <GPIO_ResetBits>
 80010fe:	e7cb      	b.n	8001098 <hd44780_write+0x58>
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6 );
 8001100:	f7ff ff5d 	bl	8000fbe <GPIO_ResetBits>
 8001104:	e7cf      	b.n	80010a6 <hd44780_write+0x66>
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7 );
 8001106:	f7ff ff5a 	bl	8000fbe <GPIO_ResetBits>
 800110a:	e7d3      	b.n	80010b4 <hd44780_write+0x74>
 800110c:	48000c00 	.word	0x48000c00

08001110 <hd44780_wr_cmd>:
void hd44780_wr_cmd(unsigned char cmd) {
 8001110:	b510      	push	{r4, lr}
	hd44780_RS_Off();
 8001112:	2200      	movs	r2, #0
void hd44780_wr_cmd(unsigned char cmd) {
 8001114:	4604      	mov	r4, r0
	hd44780_RS_Off();
 8001116:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800111a:	4804      	ldr	r0, [pc, #16]	; (800112c <hd44780_wr_cmd+0x1c>)
 800111c:	f7ff fbde 	bl	80008dc <HAL_GPIO_WritePin>
	hd44780_write(cmd);
 8001120:	4620      	mov	r0, r4
}
 8001122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hd44780_write(cmd);
 8001126:	f7ff bf8b 	b.w	8001040 <hd44780_write>
 800112a:	bf00      	nop
 800112c:	48000c00 	.word	0x48000c00

08001130 <hd44780_wr_data>:
void hd44780_wr_data(unsigned char data) {
 8001130:	b510      	push	{r4, lr}
	hd44780_RS_On();
 8001132:	2201      	movs	r2, #1
void hd44780_wr_data(unsigned char data) {
 8001134:	4604      	mov	r4, r0
	hd44780_RS_On();
 8001136:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800113a:	4804      	ldr	r0, [pc, #16]	; (800114c <hd44780_wr_data+0x1c>)
 800113c:	f7ff fbce 	bl	80008dc <HAL_GPIO_WritePin>
	hd44780_write(data);
 8001140:	4620      	mov	r0, r4
}
 8001142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hd44780_write(data);
 8001146:	f7ff bf7b 	b.w	8001040 <hd44780_write>
 800114a:	bf00      	nop
 800114c:	48000c00 	.word	0x48000c00

08001150 <HD44780_Init>:
void HD44780_Init(void) {
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOD_CLK_ENABLE()
 8001150:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <HD44780_Init+0xa8>)
void HD44780_Init(void) {
 8001152:	b570      	push	{r4, r5, r6, lr}
	__GPIOD_CLK_ENABLE()
 8001154:	695a      	ldr	r2, [r3, #20]
			| HD44780_DATABIT1 | HD44780_DATABIT0;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 8001156:	4d29      	ldr	r5, [pc, #164]	; (80011fc <HD44780_Init+0xac>)
	__GPIOD_CLK_ENABLE()
 8001158:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800115c:	615a      	str	r2, [r3, #20]
 800115e:	695b      	ldr	r3, [r3, #20]
void HD44780_Init(void) {
 8001160:	b086      	sub	sp, #24
	__GPIOD_CLK_ENABLE()
 8001162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001166:	9300      	str	r3, [sp, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2401      	movs	r4, #1
	__GPIOD_CLK_ENABLE()
 800116a:	9b00      	ldr	r3, [sp, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800116c:	9402      	str	r4, [sp, #8]
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 800116e:	23ff      	movs	r3, #255	; 0xff
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8001170:	2603      	movs	r6, #3
	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 8001172:	a901      	add	r1, sp, #4
 8001174:	4628      	mov	r0, r5
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 8001176:	9301      	str	r3, [sp, #4]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8001178:	9403      	str	r4, [sp, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800117a:	9604      	str	r6, [sp, #16]
	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 800117c:	f7ff fae6 	bl	800074c <HAL_GPIO_Init>

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	GPIO_InitStructure.Pin = HD44780_RS_BIT | HD44780_RW_BIT | HD44780_EN_BIT;
 8001180:	f44f 63e0 	mov.w	r3, #1792	; 0x700
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;

	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 8001184:	a901      	add	r1, sp, #4
 8001186:	4628      	mov	r0, r5
	GPIO_InitStructure.Pin = HD44780_RS_BIT | HD44780_RW_BIT | HD44780_EN_BIT;
 8001188:	9301      	str	r3, [sp, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	9402      	str	r4, [sp, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 800118c:	9403      	str	r4, [sp, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800118e:	9604      	str	r6, [sp, #16]
	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 8001190:	f7ff fadc 	bl	800074c <HAL_GPIO_Init>

	/* clear control bits */
	hd44780_EN_Off();
 8001194:	4628      	mov	r0, r5
 8001196:	2200      	movs	r2, #0
 8001198:	f44f 7100 	mov.w	r1, #512	; 0x200
 800119c:	f7ff fb9e 	bl	80008dc <HAL_GPIO_WritePin>
	hd44780_RS_Off();
 80011a0:	4628      	mov	r0, r5
 80011a2:	2200      	movs	r2, #0
 80011a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a8:	f7ff fb98 	bl	80008dc <HAL_GPIO_WritePin>
	hd44780_RW_Off();
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b2:	4628      	mov	r0, r5
 80011b4:	f7ff fb92 	bl	80008dc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80011b8:	200a      	movs	r0, #10
 80011ba:	f7ff fa3f 	bl	800063c <HAL_Delay>

	/* wait initial delay for LCD to settle */
	/* reset procedure - 3 function calls resets the device */
	hd44780_init_delay();
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80011be:	2030      	movs	r0, #48	; 0x30
 80011c0:	f7ff ff00 	bl	8000fc4 <hd44780_wr_hi_nibble>
	HAL_Delay(10);
 80011c4:	200a      	movs	r0, #10
 80011c6:	f7ff fa39 	bl	800063c <HAL_Delay>
	hd44780_init_delay2();
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80011ca:	2030      	movs	r0, #48	; 0x30
 80011cc:	f7ff fefa 	bl	8000fc4 <hd44780_wr_hi_nibble>
	HAL_Delay(10);
 80011d0:	200a      	movs	r0, #10
 80011d2:	f7ff fa33 	bl	800063c <HAL_Delay>
	hd44780_init_delay3();
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80011d6:	2030      	movs	r0, #48	; 0x30
 80011d8:	f7ff fef4 	bl	8000fc4 <hd44780_wr_hi_nibble>
	/* 4bit interface */
	hd44780_wr_hi_nibble( HD44780_CMD_FUNCTION);
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT */

	/* sets the configured values - can be set again only after reset */
	hd44780_function(HD44780_CONF_BUS, HD44780_CONF_LINES, HD44780_CONF_FONT);
 80011dc:	2038      	movs	r0, #56	; 0x38
 80011de:	f7ff ff97 	bl	8001110 <hd44780_wr_cmd>

	/* turn the display on with no cursor or blinking */
	hd44780_display(HD44780_DISP_ON, HD44780_DISP_CURS_OFF,
 80011e2:	200c      	movs	r0, #12
 80011e4:	f7ff ff94 	bl	8001110 <hd44780_wr_cmd>
			HD44780_DISP_BLINK_OFF);

	/* clear the display */
	hd44780_clear();
 80011e8:	4620      	mov	r0, r4
 80011ea:	f7ff ff91 	bl	8001110 <hd44780_wr_cmd>

	/* addr increment, shift cursor */
	hd44780_entry(HD44780_ENTRY_ADDR_INC, HD44780_ENTRY_SHIFT_CURS);
 80011ee:	2006      	movs	r0, #6
 80011f0:	f7ff ff8e 	bl	8001110 <hd44780_wr_cmd>


}
 80011f4:	b006      	add	sp, #24
 80011f6:	bd70      	pop	{r4, r5, r6, pc}
 80011f8:	40021000 	.word	0x40021000
 80011fc:	48000c00 	.word	0x48000c00

08001200 <HD44780_GotoXY>:

	if (x > (HD44780_DISP_LENGTH - 1))
		x = 0;

	if (y > (HD44780_DISP_ROWS - 1))
		y = 0;
 8001200:	2901      	cmp	r1, #1
 8001202:	bf88      	it	hi
 8001204:	2100      	movhi	r1, #0
		break;
	case 3:
		copy_y = 0xd4;
		break;
	}
	hd44780_wr_cmd(x + copy_y);
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <HD44780_GotoXY+0x18>)
 8001208:	5c5b      	ldrb	r3, [r3, r1]
		x = 0;
 800120a:	280f      	cmp	r0, #15
 800120c:	bf88      	it	hi
 800120e:	2000      	movhi	r0, #0
	hd44780_wr_cmd(x + copy_y);
 8001210:	4418      	add	r0, r3
 8001212:	b2c0      	uxtb	r0, r0
 8001214:	f7ff bf7c 	b.w	8001110 <hd44780_wr_cmd>
 8001218:	0800225c 	.word	0x0800225c

0800121c <HD44780_PutStr>:

 Parameters			: str			-	string (char array) to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutStr(char *str) {
 800121c:	b513      	push	{r0, r1, r4, lr}
	__IO unsigned int i = 0;
 800121e:	2300      	movs	r3, #0
void HD44780_PutStr(char *str) {
 8001220:	4604      	mov	r4, r0
	__IO unsigned int i = 0;
 8001222:	9301      	str	r3, [sp, #4]

	do {
		HD44780_PutChar(str[i]);
 8001224:	9b01      	ldr	r3, [sp, #4]
	hd44780_wr_data(c & 0xff);
 8001226:	5ce0      	ldrb	r0, [r4, r3]
 8001228:	f7ff ff82 	bl	8001130 <hd44780_wr_data>
		i++;
 800122c:	9b01      	ldr	r3, [sp, #4]
 800122e:	3301      	adds	r3, #1
 8001230:	9301      	str	r3, [sp, #4]
	} while (str[i] != '\0');
 8001232:	9b01      	ldr	r3, [sp, #4]
 8001234:	5ce3      	ldrb	r3, [r4, r3]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f4      	bne.n	8001224 <HD44780_PutStr+0x8>
}
 800123a:	b002      	add	sp, #8
 800123c:	bd10      	pop	{r4, pc}

0800123e <HD44780_ClrScr>:

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_ClrScr(void) {
	hd44780_wr_cmd(HD44780_CMD_CLEAR);
 800123e:	2001      	movs	r0, #1
 8001240:	f7ff bf66 	b.w	8001110 <hd44780_wr_cmd>

08001244 <DWT_Delay_Init>:
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001244:	4b0d      	ldr	r3, [pc, #52]	; (800127c <DWT_Delay_Init+0x38>)
 8001246:	68da      	ldr	r2, [r3, #12]
 8001248:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800124c:	60da      	str	r2, [r3, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800124e:	68da      	ldr	r2, [r3, #12]
 8001250:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001254:	60da      	str	r2, [r3, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <DWT_Delay_Init+0x3c>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	f022 0201 	bic.w	r2, r2, #1
 800125e:	601a      	str	r2, [r3, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	f042 0201 	orr.w	r2, r2, #1
 8001266:	601a      	str	r2, [r3, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001268:	2200      	movs	r2, #0
 800126a:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800126c:	bf00      	nop
     __ASM volatile ("NOP");
 800126e:	bf00      	nop
  __ASM volatile ("NOP");
 8001270:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001272:	6858      	ldr	r0, [r3, #4]
     }
     else
  {
    return 1; /*clock cycle counter not started*/
  }
}
 8001274:	fab0 f080 	clz	r0, r0
 8001278:	0940      	lsrs	r0, r0, #5
 800127a:	4770      	bx	lr
 800127c:	e000edf0 	.word	0xe000edf0
 8001280:	e0001000 	.word	0xe0001000

08001284 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8001284:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001286:	4c09      	ldr	r4, [pc, #36]	; (80012ac <DWT_Delay_us+0x28>)
{
 8001288:	9001      	str	r0, [sp, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800128a:	6865      	ldr	r5, [r4, #4]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800128c:	f7ff fe8e 	bl	8000fac <HAL_RCC_GetHCLKFreq>
 8001290:	9b01      	ldr	r3, [sp, #4]
 8001292:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <DWT_Delay_us+0x2c>)
 8001294:	fbb0 f0f2 	udiv	r0, r0, r2
 8001298:	4343      	muls	r3, r0
 800129a:	9301      	str	r3, [sp, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800129c:	6863      	ldr	r3, [r4, #4]
 800129e:	9a01      	ldr	r2, [sp, #4]
 80012a0:	1b5b      	subs	r3, r3, r5
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d3fa      	bcc.n	800129c <DWT_Delay_us+0x18>
}
 80012a6:	b003      	add	sp, #12
 80012a8:	bd30      	pop	{r4, r5, pc}
 80012aa:	bf00      	nop
 80012ac:	e0001000 	.word	0xe0001000
 80012b0:	000f4240 	.word	0x000f4240

080012b4 <SystemClock_Config>:


/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80012b4:	b510      	push	{r4, lr}
 80012b6:	b090      	sub	sp, #64	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b8:	2301      	movs	r3, #1
 80012ba:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80012bc:	2310      	movs	r3, #16
 80012be:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012c0:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012c2:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012c4:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012c8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012cc:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ce:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012d0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d2:	f7ff fb25 	bl	8000920 <HAL_RCC_OscConfig>
 80012d6:	4601      	mov	r1, r0
 80012d8:	b100      	cbz	r0, 80012dc <SystemClock_Config+0x28>
 80012da:	e7fe      	b.n	80012da <SystemClock_Config+0x26>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012dc:	230f      	movs	r3, #15
 80012de:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e0:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e6:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012e8:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ea:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ec:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012ee:	f7ff fda9 	bl	8000e44 <HAL_RCC_ClockConfig>
 80012f2:	4604      	mov	r4, r0
 80012f4:	b100      	cbz	r0, 80012f8 <SystemClock_Config+0x44>
 80012f6:	e7fe      	b.n	80012f6 <SystemClock_Config+0x42>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80012f8:	f7ff fe58 	bl	8000fac <HAL_RCC_GetHCLKFreq>
 80012fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001300:	fbb0 f0f3 	udiv	r0, r0, r3
 8001304:	f7ff f9fa 	bl	80006fc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001308:	2004      	movs	r0, #4
 800130a:	f7ff fa0d 	bl	8000728 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800130e:	4622      	mov	r2, r4
 8001310:	4621      	mov	r1, r4
 8001312:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001316:	f7ff f9b1 	bl	800067c <HAL_NVIC_SetPriority>
}
 800131a:	b010      	add	sp, #64	; 0x40
 800131c:	bd10      	pop	{r4, pc}
	...

08001320 <main>:
{
 8001320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001324:	b091      	sub	sp, #68	; 0x44
	  HAL_Init();
 8001326:	f7ff f969 	bl	80005fc <HAL_Init>
	  SystemClock_Config();
 800132a:	f7ff ffc3 	bl	80012b4 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	4bbe      	ldr	r3, [pc, #760]	; (8001628 <main+0x308>)
 8001330:	695a      	ldr	r2, [r3, #20]
 8001332:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001336:	615a      	str	r2, [r3, #20]
 8001338:	695a      	ldr	r2, [r3, #20]
 800133a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800133e:	9200      	str	r2, [sp, #0]
 8001340:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001342:	695a      	ldr	r2, [r3, #20]
 8001344:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001348:	615a      	str	r2, [r3, #20]
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001350:	9301      	str	r3, [sp, #4]


  /*Configure GPIO pin : PA0 */

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001352:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001354:	2702      	movs	r7, #2
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001356:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001358:	4bb4      	ldr	r3, [pc, #720]	; (800162c <main+0x30c>)
 800135a:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	a90b      	add	r1, sp, #44	; 0x2c
 800135e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  GPIO_InitStruct.Pin = GPIO_PIN_10;
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001364:	f44f 6680 	mov.w	r6, #1024	; 0x400
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001368:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800136a:	970d      	str	r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136c:	f7ff f9ee 	bl	800074c <HAL_GPIO_Init>
   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	a90b      	add	r1, sp, #44	; 0x2c
 8001372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001376:	960b      	str	r6, [sp, #44]	; 0x2c
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	950c      	str	r5, [sp, #48]	; 0x30
   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800137a:	970d      	str	r7, [sp, #52]	; 0x34
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	940e      	str	r4, [sp, #56]	; 0x38
   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	f7ff f9e5 	bl	800074c <HAL_GPIO_Init>


   GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001382:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001386:	a90b      	add	r1, sp, #44	; 0x2c
 8001388:	48a9      	ldr	r0, [pc, #676]	; (8001630 <main+0x310>)
   GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800138a:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	940e      	str	r4, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001392:	f7ff f9db 	bl	800074c <HAL_GPIO_Init>


    GPIO_InitStruct.Pin = GPIO_PIN_10;
       GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
       GPIO_InitStruct.Pull = GPIO_PULLDOWN;
       HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	a90b      	add	r1, sp, #44	; 0x2c
 8001398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800139c:	960b      	str	r6, [sp, #44]	; 0x2c
       GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139e:	950c      	str	r5, [sp, #48]	; 0x30
       GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013a0:	970d      	str	r7, [sp, #52]	; 0x34
       HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f7ff f9d3 	bl	800074c <HAL_GPIO_Init>

     HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,1);
 80013a6:	462a      	mov	r2, r5
 80013a8:	4631      	mov	r1, r6
 80013aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ae:	f7ff fa95 	bl	80008dc <HAL_GPIO_WritePin>



  /*Configure GPIO pins : PE10 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80013b2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013b6:	a90b      	add	r1, sp, #44	; 0x2c
 80013b8:	489d      	ldr	r0, [pc, #628]	; (8001630 <main+0x310>)
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80013ba:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013bc:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013c2:	f7ff f9c3 	bl	800074c <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80013c6:	4622      	mov	r2, r4
 80013c8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80013cc:	4898      	ldr	r0, [pc, #608]	; (8001630 <main+0x310>)
 80013ce:	f7ff fa85 	bl	80008dc <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013d2:	4622      	mov	r2, r4
 80013d4:	4621      	mov	r1, r4
 80013d6:	2006      	movs	r0, #6
 80013d8:	f7ff f950 	bl	800067c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013dc:	2006      	movs	r0, #6
 80013de:	f7ff f981 	bl	80006e4 <HAL_NVIC_EnableIRQ>
	  HD44780_Init();
 80013e2:	f7ff feb5 	bl	8001150 <HD44780_Init>
	  if(DWT_Delay_Init())
 80013e6:	f7ff ff2d 	bl	8001244 <DWT_Delay_Init>
 80013ea:	b9b0      	cbnz	r0, 800141a <main+0xfa>
timer = (timer/72000000);
 80013ec:	f20f 2930 	addw	r9, pc, #560	; 0x230
 80013f0:	e9d9 8900 	ldrd	r8, r9, [r9]
  HD44780_PutStr("measuring...");			//display text
 80013f4:	4f8f      	ldr	r7, [pc, #572]	; (8001634 <main+0x314>)
 80013f6:	4e90      	ldr	r6, [pc, #576]	; (8001638 <main+0x318>)
  HD44780_ClrScr();
 80013f8:	f7ff ff21 	bl	800123e <HD44780_ClrScr>
  HD44780_GotoXY(0, 0);						//set the character cursor to col=0, row=0
 80013fc:	2100      	movs	r1, #0
 80013fe:	4608      	mov	r0, r1
 8001400:	f7ff fefe 	bl	8001200 <HD44780_GotoXY>
  HD44780_PutStr("measuring...");			//display text
 8001404:	4638      	mov	r0, r7
 8001406:	f7ff ff09 	bl	800121c <HD44780_PutStr>
  HAL_Delay(500);
 800140a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800140e:	f7ff f915 	bl	800063c <HAL_Delay>
  if(DWT_Delay_Init())
 8001412:	f7ff ff17 	bl	8001244 <DWT_Delay_Init>
 8001416:	b108      	cbz	r0, 800141c <main+0xfc>
 8001418:	e7fe      	b.n	8001418 <main+0xf8>
 800141a:	e7fe      	b.n	800141a <main+0xfa>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,1);
 800141c:	4c84      	ldr	r4, [pc, #528]	; (8001630 <main+0x310>)
 800141e:	4605      	mov	r5, r0
if(i==0)  // trigger the sensor1
 8001420:	2d00      	cmp	r5, #0
 8001422:	d17d      	bne.n	8001520 <main+0x200>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,1);
 8001424:	2201      	movs	r2, #1
 8001426:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800142a:	4620      	mov	r0, r4
 800142c:	f7ff fa56 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,1);
 8001430:	2201      	movs	r2, #1
 8001432:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001436:	4620      	mov	r0, r4
 8001438:	f7ff fa50 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,1);
 800143c:	2201      	movs	r2, #1
 800143e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001442:	4620      	mov	r0, r4
 8001444:	f7ff fa4a 	bl	80008dc <HAL_GPIO_WritePin>
DWT_Delay_us(1);
 8001448:	2001      	movs	r0, #1
 800144a:	f7ff ff1b 	bl	8001284 <DWT_Delay_us>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,0);
 800144e:	462a      	mov	r2, r5
 8001450:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001454:	4620      	mov	r0, r4
 8001456:	f7ff fa41 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,0);
 800145a:	462a      	mov	r2, r5
 800145c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001460:	4620      	mov	r0, r4
 8001462:	f7ff fa3b 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,0);
 8001466:	462a      	mov	r2, r5
 8001468:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800146c:	4620      	mov	r0, r4
 800146e:	f7ff fa35 	bl	80008dc <HAL_GPIO_WritePin>
DWT_Delay_us(10);
 8001472:	200a      	movs	r0, #10
 8001474:	f7ff ff06 	bl	8001284 <DWT_Delay_us>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,1);
 8001478:	2201      	movs	r2, #1
 800147a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800147e:	4620      	mov	r0, r4
 8001480:	f7ff fa2c 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,1);
 8001484:	2201      	movs	r2, #1
 8001486:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800148a:	4620      	mov	r0, r4
 800148c:	f7ff fa26 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,1);
 8001490:	2201      	movs	r2, #1
 8001492:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001496:	4620      	mov	r0, r4
 8001498:	f7ff fa20 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,0);
 800149c:	462a      	mov	r2, r5
 800149e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014a2:	4620      	mov	r0, r4
 80014a4:	f7ff fa1a 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_14,0);
 80014a8:	462a      	mov	r2, r5
 80014aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014ae:	4620      	mov	r0, r4
 80014b0:	f7ff fa14 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_15,0);
 80014b4:	462a      	mov	r2, r5
 80014b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ba:	4620      	mov	r0, r4
 80014bc:	f7ff fa0e 	bl	80008dc <HAL_GPIO_WritePin>
HAL_Delay(2000);
 80014c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014c4:	f7ff f8ba 	bl	800063c <HAL_Delay>
timer =   (34000* timer) ;
 80014c8:	e9d6 0100 	ldrd	r0, r1, [r6]
 80014cc:	f248 4ed0 	movw	lr, #34000	; 0x84d0
 80014d0:	fba0 230e 	umull	r2, r3, r0, lr
 80014d4:	fb0e 3301 	mla	r3, lr, r1, r3
 80014d8:	e9c6 2300 	strd	r2, r3, [r6]
timer = (timer/72000000);			//calculate the distance
 80014dc:	4642      	mov	r2, r8
 80014de:	e9d6 0100 	ldrd	r0, r1, [r6]
 80014e2:	464b      	mov	r3, r9
 80014e4:	f7fe fec4 	bl	8000270 <__aeabi_uldivmod>
 80014e8:	e9c6 0100 	strd	r0, r1, [r6]
sprintf(buffer, "%d", timer);
 80014ec:	4953      	ldr	r1, [pc, #332]	; (800163c <main+0x31c>)
 80014ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80014f2:	a802      	add	r0, sp, #8
 80014f4:	f000 fa6a 	bl	80019cc <siprintf>
HD44780_ClrScr();
 80014f8:	f7ff fea1 	bl	800123e <HD44780_ClrScr>
HD44780_GotoXY(0, 0);				//set the character cursor to col=0, row=0
 80014fc:	4629      	mov	r1, r5
 80014fe:	4628      	mov	r0, r5
 8001500:	f7ff fe7e 	bl	8001200 <HD44780_GotoXY>
HD44780_PutStr(buffer);				//display text
 8001504:	a802      	add	r0, sp, #8
 8001506:	f7ff fe89 	bl	800121c <HD44780_PutStr>
HD44780_GotoXY(3, 0);
 800150a:	4629      	mov	r1, r5
HD44780_GotoXY(3, 1);
 800150c:	2003      	movs	r0, #3
 800150e:	f7ff fe77 	bl	8001200 <HD44780_GotoXY>
HD44780_PutStr("cm");				//display text
 8001512:	484b      	ldr	r0, [pc, #300]	; (8001640 <main+0x320>)
 8001514:	f7ff fe82 	bl	800121c <HD44780_PutStr>
for(int i=0;i<=3;i++)
 8001518:	3501      	adds	r5, #1
 800151a:	2d04      	cmp	r5, #4
 800151c:	d180      	bne.n	8001420 <main+0x100>
 800151e:	e76b      	b.n	80013f8 <main+0xd8>
if(i==1)  // trigger the sensor2
 8001520:	2d01      	cmp	r5, #1
 8001522:	f040 808f 	bne.w	8001644 <main+0x324>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,1);
 8001526:	462a      	mov	r2, r5
 8001528:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800152c:	4620      	mov	r0, r4
 800152e:	f7ff f9d5 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,1);
 8001532:	462a      	mov	r2, r5
 8001534:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001538:	4620      	mov	r0, r4
 800153a:	f7ff f9cf 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,1);
 800153e:	462a      	mov	r2, r5
 8001540:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001544:	4620      	mov	r0, r4
 8001546:	f7ff f9c9 	bl	80008dc <HAL_GPIO_WritePin>
DWT_Delay_us(1);
 800154a:	4628      	mov	r0, r5
 800154c:	f7ff fe9a 	bl	8001284 <DWT_Delay_us>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,1);
 8001550:	462a      	mov	r2, r5
 8001552:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001556:	4620      	mov	r0, r4
 8001558:	f7ff f9c0 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,0);
 800155c:	2200      	movs	r2, #0
 800155e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001562:	4620      	mov	r0, r4
 8001564:	f7ff f9ba 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,0);
 8001568:	2200      	movs	r2, #0
 800156a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800156e:	4620      	mov	r0, r4
 8001570:	f7ff f9b4 	bl	80008dc <HAL_GPIO_WritePin>
DWT_Delay_us(10);
 8001574:	200a      	movs	r0, #10
 8001576:	f7ff fe85 	bl	8001284 <DWT_Delay_us>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,1);
 800157a:	462a      	mov	r2, r5
 800157c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001580:	4620      	mov	r0, r4
 8001582:	f7ff f9ab 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,1);
 8001586:	462a      	mov	r2, r5
 8001588:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800158c:	4620      	mov	r0, r4
 800158e:	f7ff f9a5 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,1);
 8001592:	462a      	mov	r2, r5
 8001594:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001598:	4620      	mov	r0, r4
 800159a:	f7ff f99f 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,1);
 800159e:	462a      	mov	r2, r5
 80015a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a4:	4620      	mov	r0, r4
 80015a6:	f7ff f999 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_14,0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015b0:	4620      	mov	r0, r4
 80015b2:	f7ff f993 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_15,0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015bc:	4620      	mov	r0, r4
 80015be:	f7ff f98d 	bl	80008dc <HAL_GPIO_WritePin>
HAL_Delay(2000);
 80015c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015c6:	f7ff f839 	bl	800063c <HAL_Delay>
timer =   (34000* timer) ;
 80015ca:	e9d6 0100 	ldrd	r0, r1, [r6]
 80015ce:	f248 4ed0 	movw	lr, #34000	; 0x84d0
 80015d2:	fba0 230e 	umull	r2, r3, r0, lr
 80015d6:	fb0e 3301 	mla	r3, lr, r1, r3
 80015da:	e9c6 2300 	strd	r2, r3, [r6]
timer = (timer/72000000);
 80015de:	4642      	mov	r2, r8
 80015e0:	e9d6 0100 	ldrd	r0, r1, [r6]
 80015e4:	464b      	mov	r3, r9
 80015e6:	f7fe fe43 	bl	8000270 <__aeabi_uldivmod>
 80015ea:	e9c6 0100 	strd	r0, r1, [r6]
sprintf(buffer1, "%d", timer);
 80015ee:	4913      	ldr	r1, [pc, #76]	; (800163c <main+0x31c>)
 80015f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80015f4:	a805      	add	r0, sp, #20
 80015f6:	f000 f9e9 	bl	80019cc <siprintf>
HD44780_GotoXY(7, 0);				//set the character cursor to col=0, row=0
 80015fa:	2100      	movs	r1, #0
 80015fc:	2007      	movs	r0, #7
 80015fe:	f7ff fdff 	bl	8001200 <HD44780_GotoXY>
HD44780_PutStr(buffer1);				//display text
 8001602:	a805      	add	r0, sp, #20
 8001604:	f7ff fe0a 	bl	800121c <HD44780_PutStr>
HD44780_GotoXY(10, 0);
 8001608:	2100      	movs	r1, #0
 800160a:	200a      	movs	r0, #10
 800160c:	f7ff fdf8 	bl	8001200 <HD44780_GotoXY>
HD44780_PutStr("cm");				//display text
 8001610:	480b      	ldr	r0, [pc, #44]	; (8001640 <main+0x320>)
 8001612:	f7ff fe03 	bl	800121c <HD44780_PutStr>
HAL_Delay(500);
 8001616:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
HAL_Delay(1000);
 800161a:	f7ff f80f 	bl	800063c <HAL_Delay>
 800161e:	e77b      	b.n	8001518 <main+0x1f8>
 8001620:	044aa200 	.word	0x044aa200
 8001624:	00000000 	.word	0x00000000
 8001628:	40021000 	.word	0x40021000
 800162c:	10310000 	.word	0x10310000
 8001630:	48001000 	.word	0x48001000
 8001634:	08002260 	.word	0x08002260
 8001638:	20000098 	.word	0x20000098
 800163c:	0800226d 	.word	0x0800226d
 8001640:	08002270 	.word	0x08002270
if(i==2)  // trigger the sensor3
 8001644:	2d02      	cmp	r5, #2
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,1);
 8001646:	f04f 0201 	mov.w	r2, #1
 800164a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800164e:	4620      	mov	r0, r4
if(i==2)  // trigger the sensor3
 8001650:	d16e      	bne.n	8001730 <main+0x410>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,1);
 8001652:	f7ff f943 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,1);
 8001656:	2201      	movs	r2, #1
 8001658:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800165c:	4620      	mov	r0, r4
 800165e:	f7ff f93d 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,1);
 8001662:	2201      	movs	r2, #1
 8001664:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001668:	4620      	mov	r0, r4
 800166a:	f7ff f937 	bl	80008dc <HAL_GPIO_WritePin>
DWT_Delay_us(1);
 800166e:	2001      	movs	r0, #1
 8001670:	f7ff fe08 	bl	8001284 <DWT_Delay_us>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,0);
 8001674:	2200      	movs	r2, #0
 8001676:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800167a:	4620      	mov	r0, r4
 800167c:	f7ff f92e 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,1);
 8001680:	2201      	movs	r2, #1
 8001682:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001686:	4620      	mov	r0, r4
 8001688:	f7ff f928 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,0);
 800168c:	2200      	movs	r2, #0
 800168e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001692:	4620      	mov	r0, r4
 8001694:	f7ff f922 	bl	80008dc <HAL_GPIO_WritePin>
DWT_Delay_us(10);
 8001698:	200a      	movs	r0, #10
 800169a:	f7ff fdf3 	bl	8001284 <DWT_Delay_us>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,1);
 800169e:	2201      	movs	r2, #1
 80016a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016a4:	4620      	mov	r0, r4
 80016a6:	f7ff f919 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,1);
 80016aa:	2201      	movs	r2, #1
 80016ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016b0:	4620      	mov	r0, r4
 80016b2:	f7ff f913 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,1);
 80016b6:	2201      	movs	r2, #1
 80016b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016bc:	4620      	mov	r0, r4
 80016be:	f7ff f90d 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016c8:	4620      	mov	r0, r4
 80016ca:	f7ff f907 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_14,1);
 80016ce:	2201      	movs	r2, #1
 80016d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016d4:	4620      	mov	r0, r4
 80016d6:	f7ff f901 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_15,0);
 80016da:	2200      	movs	r2, #0
 80016dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e0:	4620      	mov	r0, r4
 80016e2:	f7ff f8fb 	bl	80008dc <HAL_GPIO_WritePin>
HAL_Delay(2000);
 80016e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016ea:	f7fe ffa7 	bl	800063c <HAL_Delay>
timer =   (34000* timer) ;
 80016ee:	e9d6 0100 	ldrd	r0, r1, [r6]
 80016f2:	f248 4ed0 	movw	lr, #34000	; 0x84d0
 80016f6:	fba0 230e 	umull	r2, r3, r0, lr
 80016fa:	fb0e 3301 	mla	r3, lr, r1, r3
 80016fe:	e9c6 2300 	strd	r2, r3, [r6]
timer = (timer/72000000);			//calculate the distance
 8001702:	4642      	mov	r2, r8
 8001704:	e9d6 0100 	ldrd	r0, r1, [r6]
 8001708:	464b      	mov	r3, r9
 800170a:	f7fe fdb1 	bl	8000270 <__aeabi_uldivmod>
 800170e:	e9c6 0100 	strd	r0, r1, [r6]
sprintf(buffer2, "%d", timer);
 8001712:	4943      	ldr	r1, [pc, #268]	; (8001820 <main+0x500>)
 8001714:	e9d6 2300 	ldrd	r2, r3, [r6]
 8001718:	a808      	add	r0, sp, #32
 800171a:	f000 f957 	bl	80019cc <siprintf>
HD44780_GotoXY(0, 1);				//set the character cursor to col=0, row=0
 800171e:	2101      	movs	r1, #1
 8001720:	2000      	movs	r0, #0
 8001722:	f7ff fd6d 	bl	8001200 <HD44780_GotoXY>
HD44780_PutStr(buffer2);				//display text
 8001726:	a808      	add	r0, sp, #32
 8001728:	f7ff fd78 	bl	800121c <HD44780_PutStr>
HD44780_GotoXY(3, 1);
 800172c:	2101      	movs	r1, #1
 800172e:	e6ed      	b.n	800150c <main+0x1ec>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,1);
 8001730:	f7ff f8d4 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,1);
 8001734:	2201      	movs	r2, #1
 8001736:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800173a:	4620      	mov	r0, r4
 800173c:	f7ff f8ce 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,1);
 8001740:	2201      	movs	r2, #1
 8001742:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001746:	4620      	mov	r0, r4
 8001748:	f7ff f8c8 	bl	80008dc <HAL_GPIO_WritePin>
DWT_Delay_us(1);
 800174c:	2001      	movs	r0, #1
 800174e:	f7ff fd99 	bl	8001284 <DWT_Delay_us>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,1);
 8001752:	2201      	movs	r2, #1
 8001754:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001758:	4620      	mov	r0, r4
 800175a:	f7ff f8bf 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,1);
 800175e:	2201      	movs	r2, #1
 8001760:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001764:	4620      	mov	r0, r4
 8001766:	f7ff f8b9 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,0);
 800176a:	2200      	movs	r2, #0
 800176c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001770:	4620      	mov	r0, r4
 8001772:	f7ff f8b3 	bl	80008dc <HAL_GPIO_WritePin>
DWT_Delay_us(10);
 8001776:	200a      	movs	r0, #10
 8001778:	f7ff fd84 	bl	8001284 <DWT_Delay_us>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,1);
 800177c:	2201      	movs	r2, #1
 800177e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001782:	4620      	mov	r0, r4
 8001784:	f7ff f8aa 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,1);
 8001788:	2201      	movs	r2, #1
 800178a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800178e:	4620      	mov	r0, r4
 8001790:	f7ff f8a4 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,1);
 8001794:	2201      	movs	r2, #1
 8001796:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800179a:	4620      	mov	r0, r4
 800179c:	f7ff f89e 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,1);
 80017a0:	2201      	movs	r2, #1
 80017a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a6:	4620      	mov	r0, r4
 80017a8:	f7ff f898 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_14,1);
 80017ac:	2201      	movs	r2, #1
 80017ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017b2:	4620      	mov	r0, r4
 80017b4:	f7ff f892 	bl	80008dc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_15,0);
 80017b8:	2200      	movs	r2, #0
 80017ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017be:	4620      	mov	r0, r4
 80017c0:	f7ff f88c 	bl	80008dc <HAL_GPIO_WritePin>
HAL_Delay(2000);
 80017c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017c8:	f7fe ff38 	bl	800063c <HAL_Delay>
timer =   (34000* timer) ;
 80017cc:	e9d6 0100 	ldrd	r0, r1, [r6]
 80017d0:	f248 4ed0 	movw	lr, #34000	; 0x84d0
 80017d4:	fba0 230e 	umull	r2, r3, r0, lr
 80017d8:	fb0e 3301 	mla	r3, lr, r1, r3
 80017dc:	e9c6 2300 	strd	r2, r3, [r6]
timer = (timer/72000000);
 80017e0:	4642      	mov	r2, r8
 80017e2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80017e6:	464b      	mov	r3, r9
 80017e8:	f7fe fd42 	bl	8000270 <__aeabi_uldivmod>
 80017ec:	e9c6 0100 	strd	r0, r1, [r6]
sprintf(buffer3, "%d", timer);
 80017f0:	490b      	ldr	r1, [pc, #44]	; (8001820 <main+0x500>)
 80017f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80017f6:	a80b      	add	r0, sp, #44	; 0x2c
 80017f8:	f000 f8e8 	bl	80019cc <siprintf>
HD44780_GotoXY(7, 1);				//set the character cursor to col=0, row=0
 80017fc:	2101      	movs	r1, #1
 80017fe:	2007      	movs	r0, #7
 8001800:	f7ff fcfe 	bl	8001200 <HD44780_GotoXY>
HD44780_PutStr(buffer3);				//display text
 8001804:	a80b      	add	r0, sp, #44	; 0x2c
 8001806:	f7ff fd09 	bl	800121c <HD44780_PutStr>
HD44780_GotoXY(10, 1);
 800180a:	2101      	movs	r1, #1
 800180c:	200a      	movs	r0, #10
 800180e:	f7ff fcf7 	bl	8001200 <HD44780_GotoXY>
HD44780_PutStr("cm");				//display text
 8001812:	4804      	ldr	r0, [pc, #16]	; (8001824 <main+0x504>)
 8001814:	f7ff fd02 	bl	800121c <HD44780_PutStr>
HAL_Delay(1000);
 8001818:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800181c:	e6fd      	b.n	800161a <main+0x2fa>
 800181e:	bf00      	nop
 8001820:	0800226d 	.word	0x0800226d
 8001824:	08002270 	.word	0x08002270

08001828 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001828:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <HAL_MspInit+0x88>)
{
 800182a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182c:	699a      	ldr	r2, [r3, #24]
 800182e:	f042 0201 	orr.w	r2, r2, #1
 8001832:	619a      	str	r2, [r3, #24]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800183c:	2007      	movs	r0, #7
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001840:	f7fe ff0a 	bl	8000658 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001844:	2200      	movs	r2, #0
 8001846:	4611      	mov	r1, r2
 8001848:	f06f 000b 	mvn.w	r0, #11
 800184c:	f7fe ff16 	bl	800067c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001850:	2200      	movs	r2, #0
 8001852:	4611      	mov	r1, r2
 8001854:	f06f 000a 	mvn.w	r0, #10
 8001858:	f7fe ff10 	bl	800067c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	4611      	mov	r1, r2
 8001860:	f06f 0009 	mvn.w	r0, #9
 8001864:	f7fe ff0a 	bl	800067c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001868:	2200      	movs	r2, #0
 800186a:	4611      	mov	r1, r2
 800186c:	f06f 0004 	mvn.w	r0, #4
 8001870:	f7fe ff04 	bl	800067c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001874:	2200      	movs	r2, #0
 8001876:	4611      	mov	r1, r2
 8001878:	f06f 0003 	mvn.w	r0, #3
 800187c:	f7fe fefe 	bl	800067c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001880:	2200      	movs	r2, #0
 8001882:	4611      	mov	r1, r2
 8001884:	f06f 0001 	mvn.w	r0, #1
 8001888:	f7fe fef8 	bl	800067c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800188c:	2200      	movs	r2, #0
 800188e:	4611      	mov	r1, r2
 8001890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001894:	f7fe fef2 	bl	800067c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init*/
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8001898:	2200      	movs	r2, #0
 800189a:	4611      	mov	r1, r2
 800189c:	2001      	movs	r0, #1
 800189e:	f7fe feed 	bl	800067c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80018a2:	2001      	movs	r0, #1
 80018a4:	f7fe ff1e 	bl	80006e4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a8:	b003      	add	sp, #12
 80018aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000

080018b4 <SVC_Handler>:
 80018b4:	4770      	bx	lr

080018b6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80018b6:	4770      	bx	lr

080018b8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80018b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ba:	f7fe feb1 	bl	8000620 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80018c2:	f7fe bf3e 	b.w	8000742 <HAL_SYSTICK_IRQHandler>

080018c6 <PVD_IRQHandler>:
void PVD_IRQHandler(void)
{
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80018c6:	f7ff b81d 	b.w	8000904 <HAL_PWR_PVD_IRQHandler>
	...

080018cc <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 80018cc:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,1);
 80018ce:	2201      	movs	r2, #1
 80018d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018d4:	480e      	ldr	r0, [pc, #56]	; (8001910 <EXTI0_IRQHandler+0x44>)


  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);


  DWT->CYCCNT=0;
 80018d6:	4c0f      	ldr	r4, [pc, #60]	; (8001914 <EXTI0_IRQHandler+0x48>)
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,0);
 80018d8:	4d0d      	ldr	r5, [pc, #52]	; (8001910 <EXTI0_IRQHandler+0x44>)
			timer = (DWT->CYCCNT);  // increase the count as long as the echo signal remains high
 80018da:	4e0f      	ldr	r6, [pc, #60]	; (8001918 <EXTI0_IRQHandler+0x4c>)
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,1);
 80018dc:	f7fe fffe 	bl	80008dc <HAL_GPIO_WritePin>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80018e0:	2001      	movs	r0, #1
 80018e2:	f7ff f801 	bl	80008e8 <HAL_GPIO_EXTI_IRQHandler>
  DWT->CYCCNT=0;
 80018e6:	2200      	movs	r2, #0
 80018e8:	6062      	str	r2, [r4, #4]
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 80018ea:	2101      	movs	r1, #1
 80018ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f0:	f7fe ffee 	bl	80008d0 <HAL_GPIO_ReadPin>
 80018f4:	b900      	cbnz	r0, 80018f8 <EXTI0_IRQHandler+0x2c>
//	}



  /* USER CODE END EXTI0_IRQn 1 */
}
 80018f6:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,0);
 80018f8:	2200      	movs	r2, #0
 80018fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018fe:	4628      	mov	r0, r5
 8001900:	f7fe ffec 	bl	80008dc <HAL_GPIO_WritePin>
			timer = (DWT->CYCCNT);  // increase the count as long as the echo signal remains high
 8001904:	6862      	ldr	r2, [r4, #4]
 8001906:	2300      	movs	r3, #0
 8001908:	e9c6 2300 	strd	r2, r3, [r6]
 800190c:	e7ed      	b.n	80018ea <EXTI0_IRQHandler+0x1e>
 800190e:	bf00      	nop
 8001910:	48001000 	.word	0x48001000
 8001914:	e0001000 	.word	0xe0001000
 8001918:	20000098 	.word	0x20000098

0800191c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800191c:	4915      	ldr	r1, [pc, #84]	; (8001974 <SystemInit+0x58>)
 800191e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001922:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800192a:	4b13      	ldr	r3, [pc, #76]	; (8001978 <SystemInit+0x5c>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	f042 0201 	orr.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001934:	6858      	ldr	r0, [r3, #4]
 8001936:	4a11      	ldr	r2, [pc, #68]	; (800197c <SystemInit+0x60>)
 8001938:	4002      	ands	r2, r0
 800193a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001942:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001946:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800194e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001956:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800195a:	f022 020f 	bic.w	r2, r2, #15
 800195e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001960:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001962:	4a07      	ldr	r2, [pc, #28]	; (8001980 <SystemInit+0x64>)
 8001964:	4002      	ands	r2, r0
 8001966:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800196c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001970:	608b      	str	r3, [r1, #8]
 8001972:	4770      	bx	lr
 8001974:	e000ed00 	.word	0xe000ed00
 8001978:	40021000 	.word	0x40021000
 800197c:	f87fc00c 	.word	0xf87fc00c
 8001980:	ff00fccc 	.word	0xff00fccc

08001984 <__libc_init_array>:
 8001984:	b570      	push	{r4, r5, r6, lr}
 8001986:	4e0d      	ldr	r6, [pc, #52]	; (80019bc <__libc_init_array+0x38>)
 8001988:	4c0d      	ldr	r4, [pc, #52]	; (80019c0 <__libc_init_array+0x3c>)
 800198a:	1ba4      	subs	r4, r4, r6
 800198c:	10a4      	asrs	r4, r4, #2
 800198e:	2500      	movs	r5, #0
 8001990:	42a5      	cmp	r5, r4
 8001992:	d109      	bne.n	80019a8 <__libc_init_array+0x24>
 8001994:	4e0b      	ldr	r6, [pc, #44]	; (80019c4 <__libc_init_array+0x40>)
 8001996:	4c0c      	ldr	r4, [pc, #48]	; (80019c8 <__libc_init_array+0x44>)
 8001998:	f000 fc44 	bl	8002224 <_init>
 800199c:	1ba4      	subs	r4, r4, r6
 800199e:	10a4      	asrs	r4, r4, #2
 80019a0:	2500      	movs	r5, #0
 80019a2:	42a5      	cmp	r5, r4
 80019a4:	d105      	bne.n	80019b2 <__libc_init_array+0x2e>
 80019a6:	bd70      	pop	{r4, r5, r6, pc}
 80019a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019ac:	4798      	blx	r3
 80019ae:	3501      	adds	r5, #1
 80019b0:	e7ee      	b.n	8001990 <__libc_init_array+0xc>
 80019b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019b6:	4798      	blx	r3
 80019b8:	3501      	adds	r5, #1
 80019ba:	e7f2      	b.n	80019a2 <__libc_init_array+0x1e>
 80019bc:	080022c0 	.word	0x080022c0
 80019c0:	080022c0 	.word	0x080022c0
 80019c4:	080022c0 	.word	0x080022c0
 80019c8:	080022c4 	.word	0x080022c4

080019cc <siprintf>:
 80019cc:	b40e      	push	{r1, r2, r3}
 80019ce:	b500      	push	{lr}
 80019d0:	b09c      	sub	sp, #112	; 0x70
 80019d2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80019d6:	ab1d      	add	r3, sp, #116	; 0x74
 80019d8:	f8ad 1014 	strh.w	r1, [sp, #20]
 80019dc:	9002      	str	r0, [sp, #8]
 80019de:	9006      	str	r0, [sp, #24]
 80019e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80019e4:	480a      	ldr	r0, [pc, #40]	; (8001a10 <siprintf+0x44>)
 80019e6:	9104      	str	r1, [sp, #16]
 80019e8:	9107      	str	r1, [sp, #28]
 80019ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80019f2:	f8ad 1016 	strh.w	r1, [sp, #22]
 80019f6:	6800      	ldr	r0, [r0, #0]
 80019f8:	9301      	str	r3, [sp, #4]
 80019fa:	a902      	add	r1, sp, #8
 80019fc:	f000 f866 	bl	8001acc <_svfiprintf_r>
 8001a00:	9b02      	ldr	r3, [sp, #8]
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
 8001a06:	b01c      	add	sp, #112	; 0x70
 8001a08:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a0c:	b003      	add	sp, #12
 8001a0e:	4770      	bx	lr
 8001a10:	20000004 	.word	0x20000004

08001a14 <__ssputs_r>:
 8001a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a18:	688e      	ldr	r6, [r1, #8]
 8001a1a:	429e      	cmp	r6, r3
 8001a1c:	4682      	mov	sl, r0
 8001a1e:	460c      	mov	r4, r1
 8001a20:	4691      	mov	r9, r2
 8001a22:	4698      	mov	r8, r3
 8001a24:	d835      	bhi.n	8001a92 <__ssputs_r+0x7e>
 8001a26:	898a      	ldrh	r2, [r1, #12]
 8001a28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001a2c:	d031      	beq.n	8001a92 <__ssputs_r+0x7e>
 8001a2e:	6825      	ldr	r5, [r4, #0]
 8001a30:	6909      	ldr	r1, [r1, #16]
 8001a32:	1a6f      	subs	r7, r5, r1
 8001a34:	6965      	ldr	r5, [r4, #20]
 8001a36:	2302      	movs	r3, #2
 8001a38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001a3c:	fb95 f5f3 	sdiv	r5, r5, r3
 8001a40:	f108 0301 	add.w	r3, r8, #1
 8001a44:	443b      	add	r3, r7
 8001a46:	429d      	cmp	r5, r3
 8001a48:	bf38      	it	cc
 8001a4a:	461d      	movcc	r5, r3
 8001a4c:	0553      	lsls	r3, r2, #21
 8001a4e:	d531      	bpl.n	8001ab4 <__ssputs_r+0xa0>
 8001a50:	4629      	mov	r1, r5
 8001a52:	f000 fb39 	bl	80020c8 <_malloc_r>
 8001a56:	4606      	mov	r6, r0
 8001a58:	b950      	cbnz	r0, 8001a70 <__ssputs_r+0x5c>
 8001a5a:	230c      	movs	r3, #12
 8001a5c:	f8ca 3000 	str.w	r3, [sl]
 8001a60:	89a3      	ldrh	r3, [r4, #12]
 8001a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a66:	81a3      	strh	r3, [r4, #12]
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a70:	463a      	mov	r2, r7
 8001a72:	6921      	ldr	r1, [r4, #16]
 8001a74:	f000 fab4 	bl	8001fe0 <memcpy>
 8001a78:	89a3      	ldrh	r3, [r4, #12]
 8001a7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a82:	81a3      	strh	r3, [r4, #12]
 8001a84:	6126      	str	r6, [r4, #16]
 8001a86:	6165      	str	r5, [r4, #20]
 8001a88:	443e      	add	r6, r7
 8001a8a:	1bed      	subs	r5, r5, r7
 8001a8c:	6026      	str	r6, [r4, #0]
 8001a8e:	60a5      	str	r5, [r4, #8]
 8001a90:	4646      	mov	r6, r8
 8001a92:	4546      	cmp	r6, r8
 8001a94:	bf28      	it	cs
 8001a96:	4646      	movcs	r6, r8
 8001a98:	4632      	mov	r2, r6
 8001a9a:	4649      	mov	r1, r9
 8001a9c:	6820      	ldr	r0, [r4, #0]
 8001a9e:	f000 faaa 	bl	8001ff6 <memmove>
 8001aa2:	68a3      	ldr	r3, [r4, #8]
 8001aa4:	1b9b      	subs	r3, r3, r6
 8001aa6:	60a3      	str	r3, [r4, #8]
 8001aa8:	6823      	ldr	r3, [r4, #0]
 8001aaa:	441e      	add	r6, r3
 8001aac:	6026      	str	r6, [r4, #0]
 8001aae:	2000      	movs	r0, #0
 8001ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ab4:	462a      	mov	r2, r5
 8001ab6:	f000 fb65 	bl	8002184 <_realloc_r>
 8001aba:	4606      	mov	r6, r0
 8001abc:	2800      	cmp	r0, #0
 8001abe:	d1e1      	bne.n	8001a84 <__ssputs_r+0x70>
 8001ac0:	6921      	ldr	r1, [r4, #16]
 8001ac2:	4650      	mov	r0, sl
 8001ac4:	f000 fab2 	bl	800202c <_free_r>
 8001ac8:	e7c7      	b.n	8001a5a <__ssputs_r+0x46>
	...

08001acc <_svfiprintf_r>:
 8001acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ad0:	b09d      	sub	sp, #116	; 0x74
 8001ad2:	4680      	mov	r8, r0
 8001ad4:	9303      	str	r3, [sp, #12]
 8001ad6:	898b      	ldrh	r3, [r1, #12]
 8001ad8:	061c      	lsls	r4, r3, #24
 8001ada:	460d      	mov	r5, r1
 8001adc:	4616      	mov	r6, r2
 8001ade:	d50f      	bpl.n	8001b00 <_svfiprintf_r+0x34>
 8001ae0:	690b      	ldr	r3, [r1, #16]
 8001ae2:	b96b      	cbnz	r3, 8001b00 <_svfiprintf_r+0x34>
 8001ae4:	2140      	movs	r1, #64	; 0x40
 8001ae6:	f000 faef 	bl	80020c8 <_malloc_r>
 8001aea:	6028      	str	r0, [r5, #0]
 8001aec:	6128      	str	r0, [r5, #16]
 8001aee:	b928      	cbnz	r0, 8001afc <_svfiprintf_r+0x30>
 8001af0:	230c      	movs	r3, #12
 8001af2:	f8c8 3000 	str.w	r3, [r8]
 8001af6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001afa:	e0c5      	b.n	8001c88 <_svfiprintf_r+0x1bc>
 8001afc:	2340      	movs	r3, #64	; 0x40
 8001afe:	616b      	str	r3, [r5, #20]
 8001b00:	2300      	movs	r3, #0
 8001b02:	9309      	str	r3, [sp, #36]	; 0x24
 8001b04:	2320      	movs	r3, #32
 8001b06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001b0a:	2330      	movs	r3, #48	; 0x30
 8001b0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001b10:	f04f 0b01 	mov.w	fp, #1
 8001b14:	4637      	mov	r7, r6
 8001b16:	463c      	mov	r4, r7
 8001b18:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d13c      	bne.n	8001b9a <_svfiprintf_r+0xce>
 8001b20:	ebb7 0a06 	subs.w	sl, r7, r6
 8001b24:	d00b      	beq.n	8001b3e <_svfiprintf_r+0x72>
 8001b26:	4653      	mov	r3, sl
 8001b28:	4632      	mov	r2, r6
 8001b2a:	4629      	mov	r1, r5
 8001b2c:	4640      	mov	r0, r8
 8001b2e:	f7ff ff71 	bl	8001a14 <__ssputs_r>
 8001b32:	3001      	adds	r0, #1
 8001b34:	f000 80a3 	beq.w	8001c7e <_svfiprintf_r+0x1b2>
 8001b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b3a:	4453      	add	r3, sl
 8001b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8001b3e:	783b      	ldrb	r3, [r7, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 809c 	beq.w	8001c7e <_svfiprintf_r+0x1b2>
 8001b46:	2300      	movs	r3, #0
 8001b48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b4c:	9304      	str	r3, [sp, #16]
 8001b4e:	9307      	str	r3, [sp, #28]
 8001b50:	9205      	str	r2, [sp, #20]
 8001b52:	9306      	str	r3, [sp, #24]
 8001b54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001b58:	931a      	str	r3, [sp, #104]	; 0x68
 8001b5a:	2205      	movs	r2, #5
 8001b5c:	7821      	ldrb	r1, [r4, #0]
 8001b5e:	4850      	ldr	r0, [pc, #320]	; (8001ca0 <_svfiprintf_r+0x1d4>)
 8001b60:	f7fe fb36 	bl	80001d0 <memchr>
 8001b64:	1c67      	adds	r7, r4, #1
 8001b66:	9b04      	ldr	r3, [sp, #16]
 8001b68:	b9d8      	cbnz	r0, 8001ba2 <_svfiprintf_r+0xd6>
 8001b6a:	06d9      	lsls	r1, r3, #27
 8001b6c:	bf44      	itt	mi
 8001b6e:	2220      	movmi	r2, #32
 8001b70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001b74:	071a      	lsls	r2, r3, #28
 8001b76:	bf44      	itt	mi
 8001b78:	222b      	movmi	r2, #43	; 0x2b
 8001b7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001b7e:	7822      	ldrb	r2, [r4, #0]
 8001b80:	2a2a      	cmp	r2, #42	; 0x2a
 8001b82:	d016      	beq.n	8001bb2 <_svfiprintf_r+0xe6>
 8001b84:	9a07      	ldr	r2, [sp, #28]
 8001b86:	2100      	movs	r1, #0
 8001b88:	200a      	movs	r0, #10
 8001b8a:	4627      	mov	r7, r4
 8001b8c:	3401      	adds	r4, #1
 8001b8e:	783b      	ldrb	r3, [r7, #0]
 8001b90:	3b30      	subs	r3, #48	; 0x30
 8001b92:	2b09      	cmp	r3, #9
 8001b94:	d951      	bls.n	8001c3a <_svfiprintf_r+0x16e>
 8001b96:	b1c9      	cbz	r1, 8001bcc <_svfiprintf_r+0x100>
 8001b98:	e011      	b.n	8001bbe <_svfiprintf_r+0xf2>
 8001b9a:	2b25      	cmp	r3, #37	; 0x25
 8001b9c:	d0c0      	beq.n	8001b20 <_svfiprintf_r+0x54>
 8001b9e:	4627      	mov	r7, r4
 8001ba0:	e7b9      	b.n	8001b16 <_svfiprintf_r+0x4a>
 8001ba2:	4a3f      	ldr	r2, [pc, #252]	; (8001ca0 <_svfiprintf_r+0x1d4>)
 8001ba4:	1a80      	subs	r0, r0, r2
 8001ba6:	fa0b f000 	lsl.w	r0, fp, r0
 8001baa:	4318      	orrs	r0, r3
 8001bac:	9004      	str	r0, [sp, #16]
 8001bae:	463c      	mov	r4, r7
 8001bb0:	e7d3      	b.n	8001b5a <_svfiprintf_r+0x8e>
 8001bb2:	9a03      	ldr	r2, [sp, #12]
 8001bb4:	1d11      	adds	r1, r2, #4
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	9103      	str	r1, [sp, #12]
 8001bba:	2a00      	cmp	r2, #0
 8001bbc:	db01      	blt.n	8001bc2 <_svfiprintf_r+0xf6>
 8001bbe:	9207      	str	r2, [sp, #28]
 8001bc0:	e004      	b.n	8001bcc <_svfiprintf_r+0x100>
 8001bc2:	4252      	negs	r2, r2
 8001bc4:	f043 0302 	orr.w	r3, r3, #2
 8001bc8:	9207      	str	r2, [sp, #28]
 8001bca:	9304      	str	r3, [sp, #16]
 8001bcc:	783b      	ldrb	r3, [r7, #0]
 8001bce:	2b2e      	cmp	r3, #46	; 0x2e
 8001bd0:	d10e      	bne.n	8001bf0 <_svfiprintf_r+0x124>
 8001bd2:	787b      	ldrb	r3, [r7, #1]
 8001bd4:	2b2a      	cmp	r3, #42	; 0x2a
 8001bd6:	f107 0101 	add.w	r1, r7, #1
 8001bda:	d132      	bne.n	8001c42 <_svfiprintf_r+0x176>
 8001bdc:	9b03      	ldr	r3, [sp, #12]
 8001bde:	1d1a      	adds	r2, r3, #4
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	9203      	str	r2, [sp, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	bfb8      	it	lt
 8001be8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001bec:	3702      	adds	r7, #2
 8001bee:	9305      	str	r3, [sp, #20]
 8001bf0:	4c2c      	ldr	r4, [pc, #176]	; (8001ca4 <_svfiprintf_r+0x1d8>)
 8001bf2:	7839      	ldrb	r1, [r7, #0]
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	f7fe faea 	bl	80001d0 <memchr>
 8001bfc:	b138      	cbz	r0, 8001c0e <_svfiprintf_r+0x142>
 8001bfe:	2340      	movs	r3, #64	; 0x40
 8001c00:	1b00      	subs	r0, r0, r4
 8001c02:	fa03 f000 	lsl.w	r0, r3, r0
 8001c06:	9b04      	ldr	r3, [sp, #16]
 8001c08:	4303      	orrs	r3, r0
 8001c0a:	9304      	str	r3, [sp, #16]
 8001c0c:	3701      	adds	r7, #1
 8001c0e:	7839      	ldrb	r1, [r7, #0]
 8001c10:	4825      	ldr	r0, [pc, #148]	; (8001ca8 <_svfiprintf_r+0x1dc>)
 8001c12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001c16:	2206      	movs	r2, #6
 8001c18:	1c7e      	adds	r6, r7, #1
 8001c1a:	f7fe fad9 	bl	80001d0 <memchr>
 8001c1e:	2800      	cmp	r0, #0
 8001c20:	d035      	beq.n	8001c8e <_svfiprintf_r+0x1c2>
 8001c22:	4b22      	ldr	r3, [pc, #136]	; (8001cac <_svfiprintf_r+0x1e0>)
 8001c24:	b9fb      	cbnz	r3, 8001c66 <_svfiprintf_r+0x19a>
 8001c26:	9b03      	ldr	r3, [sp, #12]
 8001c28:	3307      	adds	r3, #7
 8001c2a:	f023 0307 	bic.w	r3, r3, #7
 8001c2e:	3308      	adds	r3, #8
 8001c30:	9303      	str	r3, [sp, #12]
 8001c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c34:	444b      	add	r3, r9
 8001c36:	9309      	str	r3, [sp, #36]	; 0x24
 8001c38:	e76c      	b.n	8001b14 <_svfiprintf_r+0x48>
 8001c3a:	fb00 3202 	mla	r2, r0, r2, r3
 8001c3e:	2101      	movs	r1, #1
 8001c40:	e7a3      	b.n	8001b8a <_svfiprintf_r+0xbe>
 8001c42:	2300      	movs	r3, #0
 8001c44:	9305      	str	r3, [sp, #20]
 8001c46:	4618      	mov	r0, r3
 8001c48:	240a      	movs	r4, #10
 8001c4a:	460f      	mov	r7, r1
 8001c4c:	3101      	adds	r1, #1
 8001c4e:	783a      	ldrb	r2, [r7, #0]
 8001c50:	3a30      	subs	r2, #48	; 0x30
 8001c52:	2a09      	cmp	r2, #9
 8001c54:	d903      	bls.n	8001c5e <_svfiprintf_r+0x192>
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0ca      	beq.n	8001bf0 <_svfiprintf_r+0x124>
 8001c5a:	9005      	str	r0, [sp, #20]
 8001c5c:	e7c8      	b.n	8001bf0 <_svfiprintf_r+0x124>
 8001c5e:	fb04 2000 	mla	r0, r4, r0, r2
 8001c62:	2301      	movs	r3, #1
 8001c64:	e7f1      	b.n	8001c4a <_svfiprintf_r+0x17e>
 8001c66:	ab03      	add	r3, sp, #12
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	462a      	mov	r2, r5
 8001c6c:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <_svfiprintf_r+0x1e4>)
 8001c6e:	a904      	add	r1, sp, #16
 8001c70:	4640      	mov	r0, r8
 8001c72:	f3af 8000 	nop.w
 8001c76:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001c7a:	4681      	mov	r9, r0
 8001c7c:	d1d9      	bne.n	8001c32 <_svfiprintf_r+0x166>
 8001c7e:	89ab      	ldrh	r3, [r5, #12]
 8001c80:	065b      	lsls	r3, r3, #25
 8001c82:	f53f af38 	bmi.w	8001af6 <_svfiprintf_r+0x2a>
 8001c86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001c88:	b01d      	add	sp, #116	; 0x74
 8001c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c8e:	ab03      	add	r3, sp, #12
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	462a      	mov	r2, r5
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <_svfiprintf_r+0x1e4>)
 8001c96:	a904      	add	r1, sp, #16
 8001c98:	4640      	mov	r0, r8
 8001c9a:	f000 f881 	bl	8001da0 <_printf_i>
 8001c9e:	e7ea      	b.n	8001c76 <_svfiprintf_r+0x1aa>
 8001ca0:	08002283 	.word	0x08002283
 8001ca4:	08002289 	.word	0x08002289
 8001ca8:	0800228d 	.word	0x0800228d
 8001cac:	00000000 	.word	0x00000000
 8001cb0:	08001a15 	.word	0x08001a15

08001cb4 <_printf_common>:
 8001cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cb8:	4691      	mov	r9, r2
 8001cba:	461f      	mov	r7, r3
 8001cbc:	688a      	ldr	r2, [r1, #8]
 8001cbe:	690b      	ldr	r3, [r1, #16]
 8001cc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	bfb8      	it	lt
 8001cc8:	4613      	movlt	r3, r2
 8001cca:	f8c9 3000 	str.w	r3, [r9]
 8001cce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001cd2:	4606      	mov	r6, r0
 8001cd4:	460c      	mov	r4, r1
 8001cd6:	b112      	cbz	r2, 8001cde <_printf_common+0x2a>
 8001cd8:	3301      	adds	r3, #1
 8001cda:	f8c9 3000 	str.w	r3, [r9]
 8001cde:	6823      	ldr	r3, [r4, #0]
 8001ce0:	0699      	lsls	r1, r3, #26
 8001ce2:	bf42      	ittt	mi
 8001ce4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001ce8:	3302      	addmi	r3, #2
 8001cea:	f8c9 3000 	strmi.w	r3, [r9]
 8001cee:	6825      	ldr	r5, [r4, #0]
 8001cf0:	f015 0506 	ands.w	r5, r5, #6
 8001cf4:	d107      	bne.n	8001d06 <_printf_common+0x52>
 8001cf6:	f104 0a19 	add.w	sl, r4, #25
 8001cfa:	68e3      	ldr	r3, [r4, #12]
 8001cfc:	f8d9 2000 	ldr.w	r2, [r9]
 8001d00:	1a9b      	subs	r3, r3, r2
 8001d02:	429d      	cmp	r5, r3
 8001d04:	db29      	blt.n	8001d5a <_printf_common+0xa6>
 8001d06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001d0a:	6822      	ldr	r2, [r4, #0]
 8001d0c:	3300      	adds	r3, #0
 8001d0e:	bf18      	it	ne
 8001d10:	2301      	movne	r3, #1
 8001d12:	0692      	lsls	r2, r2, #26
 8001d14:	d42e      	bmi.n	8001d74 <_printf_common+0xc0>
 8001d16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001d1a:	4639      	mov	r1, r7
 8001d1c:	4630      	mov	r0, r6
 8001d1e:	47c0      	blx	r8
 8001d20:	3001      	adds	r0, #1
 8001d22:	d021      	beq.n	8001d68 <_printf_common+0xb4>
 8001d24:	6823      	ldr	r3, [r4, #0]
 8001d26:	68e5      	ldr	r5, [r4, #12]
 8001d28:	f8d9 2000 	ldr.w	r2, [r9]
 8001d2c:	f003 0306 	and.w	r3, r3, #6
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	bf08      	it	eq
 8001d34:	1aad      	subeq	r5, r5, r2
 8001d36:	68a3      	ldr	r3, [r4, #8]
 8001d38:	6922      	ldr	r2, [r4, #16]
 8001d3a:	bf0c      	ite	eq
 8001d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d40:	2500      	movne	r5, #0
 8001d42:	4293      	cmp	r3, r2
 8001d44:	bfc4      	itt	gt
 8001d46:	1a9b      	subgt	r3, r3, r2
 8001d48:	18ed      	addgt	r5, r5, r3
 8001d4a:	f04f 0900 	mov.w	r9, #0
 8001d4e:	341a      	adds	r4, #26
 8001d50:	454d      	cmp	r5, r9
 8001d52:	d11b      	bne.n	8001d8c <_printf_common+0xd8>
 8001d54:	2000      	movs	r0, #0
 8001d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	4652      	mov	r2, sl
 8001d5e:	4639      	mov	r1, r7
 8001d60:	4630      	mov	r0, r6
 8001d62:	47c0      	blx	r8
 8001d64:	3001      	adds	r0, #1
 8001d66:	d103      	bne.n	8001d70 <_printf_common+0xbc>
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d70:	3501      	adds	r5, #1
 8001d72:	e7c2      	b.n	8001cfa <_printf_common+0x46>
 8001d74:	18e1      	adds	r1, r4, r3
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	2030      	movs	r0, #48	; 0x30
 8001d7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001d7e:	4422      	add	r2, r4
 8001d80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001d84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001d88:	3302      	adds	r3, #2
 8001d8a:	e7c4      	b.n	8001d16 <_printf_common+0x62>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	4622      	mov	r2, r4
 8001d90:	4639      	mov	r1, r7
 8001d92:	4630      	mov	r0, r6
 8001d94:	47c0      	blx	r8
 8001d96:	3001      	adds	r0, #1
 8001d98:	d0e6      	beq.n	8001d68 <_printf_common+0xb4>
 8001d9a:	f109 0901 	add.w	r9, r9, #1
 8001d9e:	e7d7      	b.n	8001d50 <_printf_common+0x9c>

08001da0 <_printf_i>:
 8001da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001da4:	4617      	mov	r7, r2
 8001da6:	7e0a      	ldrb	r2, [r1, #24]
 8001da8:	b085      	sub	sp, #20
 8001daa:	2a6e      	cmp	r2, #110	; 0x6e
 8001dac:	4698      	mov	r8, r3
 8001dae:	4606      	mov	r6, r0
 8001db0:	460c      	mov	r4, r1
 8001db2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001db4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001db8:	f000 80bc 	beq.w	8001f34 <_printf_i+0x194>
 8001dbc:	d81a      	bhi.n	8001df4 <_printf_i+0x54>
 8001dbe:	2a63      	cmp	r2, #99	; 0x63
 8001dc0:	d02e      	beq.n	8001e20 <_printf_i+0x80>
 8001dc2:	d80a      	bhi.n	8001dda <_printf_i+0x3a>
 8001dc4:	2a00      	cmp	r2, #0
 8001dc6:	f000 80c8 	beq.w	8001f5a <_printf_i+0x1ba>
 8001dca:	2a58      	cmp	r2, #88	; 0x58
 8001dcc:	f000 808a 	beq.w	8001ee4 <_printf_i+0x144>
 8001dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001dd4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001dd8:	e02a      	b.n	8001e30 <_printf_i+0x90>
 8001dda:	2a64      	cmp	r2, #100	; 0x64
 8001ddc:	d001      	beq.n	8001de2 <_printf_i+0x42>
 8001dde:	2a69      	cmp	r2, #105	; 0x69
 8001de0:	d1f6      	bne.n	8001dd0 <_printf_i+0x30>
 8001de2:	6821      	ldr	r1, [r4, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001dea:	d023      	beq.n	8001e34 <_printf_i+0x94>
 8001dec:	1d11      	adds	r1, r2, #4
 8001dee:	6019      	str	r1, [r3, #0]
 8001df0:	6813      	ldr	r3, [r2, #0]
 8001df2:	e027      	b.n	8001e44 <_printf_i+0xa4>
 8001df4:	2a73      	cmp	r2, #115	; 0x73
 8001df6:	f000 80b4 	beq.w	8001f62 <_printf_i+0x1c2>
 8001dfa:	d808      	bhi.n	8001e0e <_printf_i+0x6e>
 8001dfc:	2a6f      	cmp	r2, #111	; 0x6f
 8001dfe:	d02a      	beq.n	8001e56 <_printf_i+0xb6>
 8001e00:	2a70      	cmp	r2, #112	; 0x70
 8001e02:	d1e5      	bne.n	8001dd0 <_printf_i+0x30>
 8001e04:	680a      	ldr	r2, [r1, #0]
 8001e06:	f042 0220 	orr.w	r2, r2, #32
 8001e0a:	600a      	str	r2, [r1, #0]
 8001e0c:	e003      	b.n	8001e16 <_printf_i+0x76>
 8001e0e:	2a75      	cmp	r2, #117	; 0x75
 8001e10:	d021      	beq.n	8001e56 <_printf_i+0xb6>
 8001e12:	2a78      	cmp	r2, #120	; 0x78
 8001e14:	d1dc      	bne.n	8001dd0 <_printf_i+0x30>
 8001e16:	2278      	movs	r2, #120	; 0x78
 8001e18:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001e1c:	496e      	ldr	r1, [pc, #440]	; (8001fd8 <_printf_i+0x238>)
 8001e1e:	e064      	b.n	8001eea <_printf_i+0x14a>
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001e26:	1d11      	adds	r1, r2, #4
 8001e28:	6019      	str	r1, [r3, #0]
 8001e2a:	6813      	ldr	r3, [r2, #0]
 8001e2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0a3      	b.n	8001f7c <_printf_i+0x1dc>
 8001e34:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001e38:	f102 0104 	add.w	r1, r2, #4
 8001e3c:	6019      	str	r1, [r3, #0]
 8001e3e:	d0d7      	beq.n	8001df0 <_printf_i+0x50>
 8001e40:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	da03      	bge.n	8001e50 <_printf_i+0xb0>
 8001e48:	222d      	movs	r2, #45	; 0x2d
 8001e4a:	425b      	negs	r3, r3
 8001e4c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001e50:	4962      	ldr	r1, [pc, #392]	; (8001fdc <_printf_i+0x23c>)
 8001e52:	220a      	movs	r2, #10
 8001e54:	e017      	b.n	8001e86 <_printf_i+0xe6>
 8001e56:	6820      	ldr	r0, [r4, #0]
 8001e58:	6819      	ldr	r1, [r3, #0]
 8001e5a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001e5e:	d003      	beq.n	8001e68 <_printf_i+0xc8>
 8001e60:	1d08      	adds	r0, r1, #4
 8001e62:	6018      	str	r0, [r3, #0]
 8001e64:	680b      	ldr	r3, [r1, #0]
 8001e66:	e006      	b.n	8001e76 <_printf_i+0xd6>
 8001e68:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001e6c:	f101 0004 	add.w	r0, r1, #4
 8001e70:	6018      	str	r0, [r3, #0]
 8001e72:	d0f7      	beq.n	8001e64 <_printf_i+0xc4>
 8001e74:	880b      	ldrh	r3, [r1, #0]
 8001e76:	4959      	ldr	r1, [pc, #356]	; (8001fdc <_printf_i+0x23c>)
 8001e78:	2a6f      	cmp	r2, #111	; 0x6f
 8001e7a:	bf14      	ite	ne
 8001e7c:	220a      	movne	r2, #10
 8001e7e:	2208      	moveq	r2, #8
 8001e80:	2000      	movs	r0, #0
 8001e82:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001e86:	6865      	ldr	r5, [r4, #4]
 8001e88:	60a5      	str	r5, [r4, #8]
 8001e8a:	2d00      	cmp	r5, #0
 8001e8c:	f2c0 809c 	blt.w	8001fc8 <_printf_i+0x228>
 8001e90:	6820      	ldr	r0, [r4, #0]
 8001e92:	f020 0004 	bic.w	r0, r0, #4
 8001e96:	6020      	str	r0, [r4, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d13f      	bne.n	8001f1c <_printf_i+0x17c>
 8001e9c:	2d00      	cmp	r5, #0
 8001e9e:	f040 8095 	bne.w	8001fcc <_printf_i+0x22c>
 8001ea2:	4675      	mov	r5, lr
 8001ea4:	2a08      	cmp	r2, #8
 8001ea6:	d10b      	bne.n	8001ec0 <_printf_i+0x120>
 8001ea8:	6823      	ldr	r3, [r4, #0]
 8001eaa:	07da      	lsls	r2, r3, #31
 8001eac:	d508      	bpl.n	8001ec0 <_printf_i+0x120>
 8001eae:	6923      	ldr	r3, [r4, #16]
 8001eb0:	6862      	ldr	r2, [r4, #4]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	bfde      	ittt	le
 8001eb6:	2330      	movle	r3, #48	; 0x30
 8001eb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001ebc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001ec0:	ebae 0305 	sub.w	r3, lr, r5
 8001ec4:	6123      	str	r3, [r4, #16]
 8001ec6:	f8cd 8000 	str.w	r8, [sp]
 8001eca:	463b      	mov	r3, r7
 8001ecc:	aa03      	add	r2, sp, #12
 8001ece:	4621      	mov	r1, r4
 8001ed0:	4630      	mov	r0, r6
 8001ed2:	f7ff feef 	bl	8001cb4 <_printf_common>
 8001ed6:	3001      	adds	r0, #1
 8001ed8:	d155      	bne.n	8001f86 <_printf_i+0x1e6>
 8001eda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ede:	b005      	add	sp, #20
 8001ee0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ee4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001ee8:	493c      	ldr	r1, [pc, #240]	; (8001fdc <_printf_i+0x23c>)
 8001eea:	6822      	ldr	r2, [r4, #0]
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001ef2:	f100 0504 	add.w	r5, r0, #4
 8001ef6:	601d      	str	r5, [r3, #0]
 8001ef8:	d001      	beq.n	8001efe <_printf_i+0x15e>
 8001efa:	6803      	ldr	r3, [r0, #0]
 8001efc:	e002      	b.n	8001f04 <_printf_i+0x164>
 8001efe:	0655      	lsls	r5, r2, #25
 8001f00:	d5fb      	bpl.n	8001efa <_printf_i+0x15a>
 8001f02:	8803      	ldrh	r3, [r0, #0]
 8001f04:	07d0      	lsls	r0, r2, #31
 8001f06:	bf44      	itt	mi
 8001f08:	f042 0220 	orrmi.w	r2, r2, #32
 8001f0c:	6022      	strmi	r2, [r4, #0]
 8001f0e:	b91b      	cbnz	r3, 8001f18 <_printf_i+0x178>
 8001f10:	6822      	ldr	r2, [r4, #0]
 8001f12:	f022 0220 	bic.w	r2, r2, #32
 8001f16:	6022      	str	r2, [r4, #0]
 8001f18:	2210      	movs	r2, #16
 8001f1a:	e7b1      	b.n	8001e80 <_printf_i+0xe0>
 8001f1c:	4675      	mov	r5, lr
 8001f1e:	fbb3 f0f2 	udiv	r0, r3, r2
 8001f22:	fb02 3310 	mls	r3, r2, r0, r3
 8001f26:	5ccb      	ldrb	r3, [r1, r3]
 8001f28:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2800      	cmp	r0, #0
 8001f30:	d1f5      	bne.n	8001f1e <_printf_i+0x17e>
 8001f32:	e7b7      	b.n	8001ea4 <_printf_i+0x104>
 8001f34:	6808      	ldr	r0, [r1, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	6949      	ldr	r1, [r1, #20]
 8001f3a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001f3e:	d004      	beq.n	8001f4a <_printf_i+0x1aa>
 8001f40:	1d10      	adds	r0, r2, #4
 8001f42:	6018      	str	r0, [r3, #0]
 8001f44:	6813      	ldr	r3, [r2, #0]
 8001f46:	6019      	str	r1, [r3, #0]
 8001f48:	e007      	b.n	8001f5a <_printf_i+0x1ba>
 8001f4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001f4e:	f102 0004 	add.w	r0, r2, #4
 8001f52:	6018      	str	r0, [r3, #0]
 8001f54:	6813      	ldr	r3, [r2, #0]
 8001f56:	d0f6      	beq.n	8001f46 <_printf_i+0x1a6>
 8001f58:	8019      	strh	r1, [r3, #0]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	6123      	str	r3, [r4, #16]
 8001f5e:	4675      	mov	r5, lr
 8001f60:	e7b1      	b.n	8001ec6 <_printf_i+0x126>
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	1d11      	adds	r1, r2, #4
 8001f66:	6019      	str	r1, [r3, #0]
 8001f68:	6815      	ldr	r5, [r2, #0]
 8001f6a:	6862      	ldr	r2, [r4, #4]
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4628      	mov	r0, r5
 8001f70:	f7fe f92e 	bl	80001d0 <memchr>
 8001f74:	b108      	cbz	r0, 8001f7a <_printf_i+0x1da>
 8001f76:	1b40      	subs	r0, r0, r5
 8001f78:	6060      	str	r0, [r4, #4]
 8001f7a:	6863      	ldr	r3, [r4, #4]
 8001f7c:	6123      	str	r3, [r4, #16]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f84:	e79f      	b.n	8001ec6 <_printf_i+0x126>
 8001f86:	6923      	ldr	r3, [r4, #16]
 8001f88:	462a      	mov	r2, r5
 8001f8a:	4639      	mov	r1, r7
 8001f8c:	4630      	mov	r0, r6
 8001f8e:	47c0      	blx	r8
 8001f90:	3001      	adds	r0, #1
 8001f92:	d0a2      	beq.n	8001eda <_printf_i+0x13a>
 8001f94:	6823      	ldr	r3, [r4, #0]
 8001f96:	079b      	lsls	r3, r3, #30
 8001f98:	d507      	bpl.n	8001faa <_printf_i+0x20a>
 8001f9a:	2500      	movs	r5, #0
 8001f9c:	f104 0919 	add.w	r9, r4, #25
 8001fa0:	68e3      	ldr	r3, [r4, #12]
 8001fa2:	9a03      	ldr	r2, [sp, #12]
 8001fa4:	1a9b      	subs	r3, r3, r2
 8001fa6:	429d      	cmp	r5, r3
 8001fa8:	db05      	blt.n	8001fb6 <_printf_i+0x216>
 8001faa:	68e0      	ldr	r0, [r4, #12]
 8001fac:	9b03      	ldr	r3, [sp, #12]
 8001fae:	4298      	cmp	r0, r3
 8001fb0:	bfb8      	it	lt
 8001fb2:	4618      	movlt	r0, r3
 8001fb4:	e793      	b.n	8001ede <_printf_i+0x13e>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	464a      	mov	r2, r9
 8001fba:	4639      	mov	r1, r7
 8001fbc:	4630      	mov	r0, r6
 8001fbe:	47c0      	blx	r8
 8001fc0:	3001      	adds	r0, #1
 8001fc2:	d08a      	beq.n	8001eda <_printf_i+0x13a>
 8001fc4:	3501      	adds	r5, #1
 8001fc6:	e7eb      	b.n	8001fa0 <_printf_i+0x200>
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1a7      	bne.n	8001f1c <_printf_i+0x17c>
 8001fcc:	780b      	ldrb	r3, [r1, #0]
 8001fce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001fd2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001fd6:	e765      	b.n	8001ea4 <_printf_i+0x104>
 8001fd8:	080022a5 	.word	0x080022a5
 8001fdc:	08002294 	.word	0x08002294

08001fe0 <memcpy>:
 8001fe0:	b510      	push	{r4, lr}
 8001fe2:	1e43      	subs	r3, r0, #1
 8001fe4:	440a      	add	r2, r1
 8001fe6:	4291      	cmp	r1, r2
 8001fe8:	d100      	bne.n	8001fec <memcpy+0xc>
 8001fea:	bd10      	pop	{r4, pc}
 8001fec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001ff0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001ff4:	e7f7      	b.n	8001fe6 <memcpy+0x6>

08001ff6 <memmove>:
 8001ff6:	4288      	cmp	r0, r1
 8001ff8:	b510      	push	{r4, lr}
 8001ffa:	eb01 0302 	add.w	r3, r1, r2
 8001ffe:	d803      	bhi.n	8002008 <memmove+0x12>
 8002000:	1e42      	subs	r2, r0, #1
 8002002:	4299      	cmp	r1, r3
 8002004:	d10c      	bne.n	8002020 <memmove+0x2a>
 8002006:	bd10      	pop	{r4, pc}
 8002008:	4298      	cmp	r0, r3
 800200a:	d2f9      	bcs.n	8002000 <memmove+0xa>
 800200c:	1881      	adds	r1, r0, r2
 800200e:	1ad2      	subs	r2, r2, r3
 8002010:	42d3      	cmn	r3, r2
 8002012:	d100      	bne.n	8002016 <memmove+0x20>
 8002014:	bd10      	pop	{r4, pc}
 8002016:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800201a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800201e:	e7f7      	b.n	8002010 <memmove+0x1a>
 8002020:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002024:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002028:	e7eb      	b.n	8002002 <memmove+0xc>
	...

0800202c <_free_r>:
 800202c:	b538      	push	{r3, r4, r5, lr}
 800202e:	4605      	mov	r5, r0
 8002030:	2900      	cmp	r1, #0
 8002032:	d045      	beq.n	80020c0 <_free_r+0x94>
 8002034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002038:	1f0c      	subs	r4, r1, #4
 800203a:	2b00      	cmp	r3, #0
 800203c:	bfb8      	it	lt
 800203e:	18e4      	addlt	r4, r4, r3
 8002040:	f000 f8d6 	bl	80021f0 <__malloc_lock>
 8002044:	4a1f      	ldr	r2, [pc, #124]	; (80020c4 <_free_r+0x98>)
 8002046:	6813      	ldr	r3, [r2, #0]
 8002048:	4610      	mov	r0, r2
 800204a:	b933      	cbnz	r3, 800205a <_free_r+0x2e>
 800204c:	6063      	str	r3, [r4, #4]
 800204e:	6014      	str	r4, [r2, #0]
 8002050:	4628      	mov	r0, r5
 8002052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002056:	f000 b8cc 	b.w	80021f2 <__malloc_unlock>
 800205a:	42a3      	cmp	r3, r4
 800205c:	d90c      	bls.n	8002078 <_free_r+0x4c>
 800205e:	6821      	ldr	r1, [r4, #0]
 8002060:	1862      	adds	r2, r4, r1
 8002062:	4293      	cmp	r3, r2
 8002064:	bf04      	itt	eq
 8002066:	681a      	ldreq	r2, [r3, #0]
 8002068:	685b      	ldreq	r3, [r3, #4]
 800206a:	6063      	str	r3, [r4, #4]
 800206c:	bf04      	itt	eq
 800206e:	1852      	addeq	r2, r2, r1
 8002070:	6022      	streq	r2, [r4, #0]
 8002072:	6004      	str	r4, [r0, #0]
 8002074:	e7ec      	b.n	8002050 <_free_r+0x24>
 8002076:	4613      	mov	r3, r2
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	b10a      	cbz	r2, 8002080 <_free_r+0x54>
 800207c:	42a2      	cmp	r2, r4
 800207e:	d9fa      	bls.n	8002076 <_free_r+0x4a>
 8002080:	6819      	ldr	r1, [r3, #0]
 8002082:	1858      	adds	r0, r3, r1
 8002084:	42a0      	cmp	r0, r4
 8002086:	d10b      	bne.n	80020a0 <_free_r+0x74>
 8002088:	6820      	ldr	r0, [r4, #0]
 800208a:	4401      	add	r1, r0
 800208c:	1858      	adds	r0, r3, r1
 800208e:	4282      	cmp	r2, r0
 8002090:	6019      	str	r1, [r3, #0]
 8002092:	d1dd      	bne.n	8002050 <_free_r+0x24>
 8002094:	6810      	ldr	r0, [r2, #0]
 8002096:	6852      	ldr	r2, [r2, #4]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	4401      	add	r1, r0
 800209c:	6019      	str	r1, [r3, #0]
 800209e:	e7d7      	b.n	8002050 <_free_r+0x24>
 80020a0:	d902      	bls.n	80020a8 <_free_r+0x7c>
 80020a2:	230c      	movs	r3, #12
 80020a4:	602b      	str	r3, [r5, #0]
 80020a6:	e7d3      	b.n	8002050 <_free_r+0x24>
 80020a8:	6820      	ldr	r0, [r4, #0]
 80020aa:	1821      	adds	r1, r4, r0
 80020ac:	428a      	cmp	r2, r1
 80020ae:	bf04      	itt	eq
 80020b0:	6811      	ldreq	r1, [r2, #0]
 80020b2:	6852      	ldreq	r2, [r2, #4]
 80020b4:	6062      	str	r2, [r4, #4]
 80020b6:	bf04      	itt	eq
 80020b8:	1809      	addeq	r1, r1, r0
 80020ba:	6021      	streq	r1, [r4, #0]
 80020bc:	605c      	str	r4, [r3, #4]
 80020be:	e7c7      	b.n	8002050 <_free_r+0x24>
 80020c0:	bd38      	pop	{r3, r4, r5, pc}
 80020c2:	bf00      	nop
 80020c4:	20000084 	.word	0x20000084

080020c8 <_malloc_r>:
 80020c8:	b570      	push	{r4, r5, r6, lr}
 80020ca:	1ccd      	adds	r5, r1, #3
 80020cc:	f025 0503 	bic.w	r5, r5, #3
 80020d0:	3508      	adds	r5, #8
 80020d2:	2d0c      	cmp	r5, #12
 80020d4:	bf38      	it	cc
 80020d6:	250c      	movcc	r5, #12
 80020d8:	2d00      	cmp	r5, #0
 80020da:	4606      	mov	r6, r0
 80020dc:	db01      	blt.n	80020e2 <_malloc_r+0x1a>
 80020de:	42a9      	cmp	r1, r5
 80020e0:	d903      	bls.n	80020ea <_malloc_r+0x22>
 80020e2:	230c      	movs	r3, #12
 80020e4:	6033      	str	r3, [r6, #0]
 80020e6:	2000      	movs	r0, #0
 80020e8:	bd70      	pop	{r4, r5, r6, pc}
 80020ea:	f000 f881 	bl	80021f0 <__malloc_lock>
 80020ee:	4a23      	ldr	r2, [pc, #140]	; (800217c <_malloc_r+0xb4>)
 80020f0:	6814      	ldr	r4, [r2, #0]
 80020f2:	4621      	mov	r1, r4
 80020f4:	b991      	cbnz	r1, 800211c <_malloc_r+0x54>
 80020f6:	4c22      	ldr	r4, [pc, #136]	; (8002180 <_malloc_r+0xb8>)
 80020f8:	6823      	ldr	r3, [r4, #0]
 80020fa:	b91b      	cbnz	r3, 8002104 <_malloc_r+0x3c>
 80020fc:	4630      	mov	r0, r6
 80020fe:	f000 f867 	bl	80021d0 <_sbrk_r>
 8002102:	6020      	str	r0, [r4, #0]
 8002104:	4629      	mov	r1, r5
 8002106:	4630      	mov	r0, r6
 8002108:	f000 f862 	bl	80021d0 <_sbrk_r>
 800210c:	1c43      	adds	r3, r0, #1
 800210e:	d126      	bne.n	800215e <_malloc_r+0x96>
 8002110:	230c      	movs	r3, #12
 8002112:	6033      	str	r3, [r6, #0]
 8002114:	4630      	mov	r0, r6
 8002116:	f000 f86c 	bl	80021f2 <__malloc_unlock>
 800211a:	e7e4      	b.n	80020e6 <_malloc_r+0x1e>
 800211c:	680b      	ldr	r3, [r1, #0]
 800211e:	1b5b      	subs	r3, r3, r5
 8002120:	d41a      	bmi.n	8002158 <_malloc_r+0x90>
 8002122:	2b0b      	cmp	r3, #11
 8002124:	d90f      	bls.n	8002146 <_malloc_r+0x7e>
 8002126:	600b      	str	r3, [r1, #0]
 8002128:	50cd      	str	r5, [r1, r3]
 800212a:	18cc      	adds	r4, r1, r3
 800212c:	4630      	mov	r0, r6
 800212e:	f000 f860 	bl	80021f2 <__malloc_unlock>
 8002132:	f104 000b 	add.w	r0, r4, #11
 8002136:	1d23      	adds	r3, r4, #4
 8002138:	f020 0007 	bic.w	r0, r0, #7
 800213c:	1ac3      	subs	r3, r0, r3
 800213e:	d01b      	beq.n	8002178 <_malloc_r+0xb0>
 8002140:	425a      	negs	r2, r3
 8002142:	50e2      	str	r2, [r4, r3]
 8002144:	bd70      	pop	{r4, r5, r6, pc}
 8002146:	428c      	cmp	r4, r1
 8002148:	bf0d      	iteet	eq
 800214a:	6863      	ldreq	r3, [r4, #4]
 800214c:	684b      	ldrne	r3, [r1, #4]
 800214e:	6063      	strne	r3, [r4, #4]
 8002150:	6013      	streq	r3, [r2, #0]
 8002152:	bf18      	it	ne
 8002154:	460c      	movne	r4, r1
 8002156:	e7e9      	b.n	800212c <_malloc_r+0x64>
 8002158:	460c      	mov	r4, r1
 800215a:	6849      	ldr	r1, [r1, #4]
 800215c:	e7ca      	b.n	80020f4 <_malloc_r+0x2c>
 800215e:	1cc4      	adds	r4, r0, #3
 8002160:	f024 0403 	bic.w	r4, r4, #3
 8002164:	42a0      	cmp	r0, r4
 8002166:	d005      	beq.n	8002174 <_malloc_r+0xac>
 8002168:	1a21      	subs	r1, r4, r0
 800216a:	4630      	mov	r0, r6
 800216c:	f000 f830 	bl	80021d0 <_sbrk_r>
 8002170:	3001      	adds	r0, #1
 8002172:	d0cd      	beq.n	8002110 <_malloc_r+0x48>
 8002174:	6025      	str	r5, [r4, #0]
 8002176:	e7d9      	b.n	800212c <_malloc_r+0x64>
 8002178:	bd70      	pop	{r4, r5, r6, pc}
 800217a:	bf00      	nop
 800217c:	20000084 	.word	0x20000084
 8002180:	20000088 	.word	0x20000088

08002184 <_realloc_r>:
 8002184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002186:	4607      	mov	r7, r0
 8002188:	4614      	mov	r4, r2
 800218a:	460e      	mov	r6, r1
 800218c:	b921      	cbnz	r1, 8002198 <_realloc_r+0x14>
 800218e:	4611      	mov	r1, r2
 8002190:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002194:	f7ff bf98 	b.w	80020c8 <_malloc_r>
 8002198:	b922      	cbnz	r2, 80021a4 <_realloc_r+0x20>
 800219a:	f7ff ff47 	bl	800202c <_free_r>
 800219e:	4625      	mov	r5, r4
 80021a0:	4628      	mov	r0, r5
 80021a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021a4:	f000 f826 	bl	80021f4 <_malloc_usable_size_r>
 80021a8:	4284      	cmp	r4, r0
 80021aa:	d90f      	bls.n	80021cc <_realloc_r+0x48>
 80021ac:	4621      	mov	r1, r4
 80021ae:	4638      	mov	r0, r7
 80021b0:	f7ff ff8a 	bl	80020c8 <_malloc_r>
 80021b4:	4605      	mov	r5, r0
 80021b6:	2800      	cmp	r0, #0
 80021b8:	d0f2      	beq.n	80021a0 <_realloc_r+0x1c>
 80021ba:	4631      	mov	r1, r6
 80021bc:	4622      	mov	r2, r4
 80021be:	f7ff ff0f 	bl	8001fe0 <memcpy>
 80021c2:	4631      	mov	r1, r6
 80021c4:	4638      	mov	r0, r7
 80021c6:	f7ff ff31 	bl	800202c <_free_r>
 80021ca:	e7e9      	b.n	80021a0 <_realloc_r+0x1c>
 80021cc:	4635      	mov	r5, r6
 80021ce:	e7e7      	b.n	80021a0 <_realloc_r+0x1c>

080021d0 <_sbrk_r>:
 80021d0:	b538      	push	{r3, r4, r5, lr}
 80021d2:	4c06      	ldr	r4, [pc, #24]	; (80021ec <_sbrk_r+0x1c>)
 80021d4:	2300      	movs	r3, #0
 80021d6:	4605      	mov	r5, r0
 80021d8:	4608      	mov	r0, r1
 80021da:	6023      	str	r3, [r4, #0]
 80021dc:	f000 f814 	bl	8002208 <_sbrk>
 80021e0:	1c43      	adds	r3, r0, #1
 80021e2:	d102      	bne.n	80021ea <_sbrk_r+0x1a>
 80021e4:	6823      	ldr	r3, [r4, #0]
 80021e6:	b103      	cbz	r3, 80021ea <_sbrk_r+0x1a>
 80021e8:	602b      	str	r3, [r5, #0]
 80021ea:	bd38      	pop	{r3, r4, r5, pc}
 80021ec:	200000a0 	.word	0x200000a0

080021f0 <__malloc_lock>:
 80021f0:	4770      	bx	lr

080021f2 <__malloc_unlock>:
 80021f2:	4770      	bx	lr

080021f4 <_malloc_usable_size_r>:
 80021f4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80021f8:	2800      	cmp	r0, #0
 80021fa:	f1a0 0004 	sub.w	r0, r0, #4
 80021fe:	bfbc      	itt	lt
 8002200:	580b      	ldrlt	r3, [r1, r0]
 8002202:	18c0      	addlt	r0, r0, r3
 8002204:	4770      	bx	lr
	...

08002208 <_sbrk>:
 8002208:	4b04      	ldr	r3, [pc, #16]	; (800221c <_sbrk+0x14>)
 800220a:	6819      	ldr	r1, [r3, #0]
 800220c:	4602      	mov	r2, r0
 800220e:	b909      	cbnz	r1, 8002214 <_sbrk+0xc>
 8002210:	4903      	ldr	r1, [pc, #12]	; (8002220 <_sbrk+0x18>)
 8002212:	6019      	str	r1, [r3, #0]
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	4402      	add	r2, r0
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	4770      	bx	lr
 800221c:	2000008c 	.word	0x2000008c
 8002220:	200000a4 	.word	0x200000a4

08002224 <_init>:
 8002224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002226:	bf00      	nop
 8002228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800222a:	bc08      	pop	{r3}
 800222c:	469e      	mov	lr, r3
 800222e:	4770      	bx	lr

08002230 <_fini>:
 8002230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002232:	bf00      	nop
 8002234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002236:	bc08      	pop	{r3}
 8002238:	469e      	mov	lr, r3
 800223a:	4770      	bx	lr
