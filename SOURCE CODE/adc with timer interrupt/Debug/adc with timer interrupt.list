
D:\Embedded programmimg principles\adc with timer interrupt\Debug\adc with timer interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002034  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080021bc  080021bc  000121bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080021ec  080021ec  000121ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080021f0  080021f0  000121f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080021f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          000000c4  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000c8  200000c8  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_line   00004ea2  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000bd40  00000000  00000000  00024ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001ad0  00000000  00000000  00030c16  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000818  00000000  00000000  000326e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b40  00000000  00000000  00032f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00006f38  00000000  00000000  00033a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000031f0  00000000  00000000  0003a978  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  0003db68  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000017a0  00000000  00000000  0003dbe8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080021a4 	.word	0x080021a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080021a4 	.word	0x080021a4

080001c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80001c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000200 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80001cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80001ce:	e003      	b.n	80001d8 <LoopCopyDataInit>

080001d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80001d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80001d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80001d6:	3104      	adds	r1, #4

080001d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <LoopForever+0xa>)
	ldr	r3, =_edata
 80001da:	4b0c      	ldr	r3, [pc, #48]	; (800020c <LoopForever+0xe>)
	adds	r2, r0, r1
 80001dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80001de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80001e0:	d3f6      	bcc.n	80001d0 <CopyDataInit>
	ldr	r2, =_sbss
 80001e2:	4a0b      	ldr	r2, [pc, #44]	; (8000210 <LoopForever+0x12>)
	b	LoopFillZerobss
 80001e4:	e002      	b.n	80001ec <LoopFillZerobss>

080001e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80001e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80001e8:	f842 3b04 	str.w	r3, [r2], #4

080001ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <LoopForever+0x16>)
	cmp	r2, r3
 80001ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80001f0:	d3f9      	bcc.n	80001e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80001f2:	f001 ff7d 	bl	80020f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001f6:	f001 ffaf 	bl	8002158 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80001fa:	f001 fe1b 	bl	8001e34 <main>

080001fe <LoopForever>:

LoopForever:
    b LoopForever
 80001fe:	e7fe      	b.n	80001fe <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000200:	2000a000 	.word	0x2000a000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000204:	080021f4 	.word	0x080021f4
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000208:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800020c:	20000004 	.word	0x20000004
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000210:	20000004 	.word	0x20000004
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000214:	200000c8 	.word	0x200000c8

08000218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000218:	e7fe      	b.n	8000218 <ADC1_2_IRQHandler>
	...

0800021c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800021c:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 800021e:	4b08      	ldr	r3, [pc, #32]	; (8000240 <HAL_InitTick+0x24>)
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000220:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 8000222:	6818      	ldr	r0, [r3, #0]
 8000224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000228:	fbb0 f0f3 	udiv	r0, r0, r3
 800022c:	f000 fde8 	bl	8000e00 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000230:	2200      	movs	r2, #0
 8000232:	4621      	mov	r1, r4
 8000234:	f04f 30ff 	mov.w	r0, #4294967295
 8000238:	f000 fda2 	bl	8000d80 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800023c:	2000      	movs	r0, #0
 800023e:	bd10      	pop	{r4, pc}
 8000240:	20000000 	.word	0x20000000

08000244 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000244:	4a07      	ldr	r2, [pc, #28]	; (8000264 <HAL_Init+0x20>)
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000246:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000248:	6813      	ldr	r3, [r2, #0]
 800024a:	f043 0310 	orr.w	r3, r3, #16
 800024e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000250:	2003      	movs	r0, #3
 8000252:	f000 fd83 	bl	8000d5c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000256:	2000      	movs	r0, #0
 8000258:	f7ff ffe0 	bl	800021c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800025c:	f001 febe 	bl	8001fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000260:	2000      	movs	r0, #0
 8000262:	bd08      	pop	{r3, pc}
 8000264:	40022000 	.word	0x40022000

08000268 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000268:	4a02      	ldr	r2, [pc, #8]	; (8000274 <HAL_IncTick+0xc>)
 800026a:	6813      	ldr	r3, [r2, #0]
 800026c:	3301      	adds	r3, #1
 800026e:	6013      	str	r3, [r2, #0]
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000034 	.word	0x20000034

08000278 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000278:	4b01      	ldr	r3, [pc, #4]	; (8000280 <HAL_GetTick+0x8>)
 800027a:	6818      	ldr	r0, [r3, #0]
}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	20000034 	.word	0x20000034

08000284 <ADC_Disable>:
  *         stopped.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000284:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000286:	6803      	ldr	r3, [r0, #0]
  *         stopped.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000288:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800028a:	6898      	ldr	r0, [r3, #8]
 800028c:	f000 0003 	and.w	r0, r0, #3
 8000290:	2801      	cmp	r0, #1
 8000292:	d001      	beq.n	8000298 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000294:	2000      	movs	r0, #0
 8000296:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000298:	681a      	ldr	r2, [r3, #0]
 800029a:	07d2      	lsls	r2, r2, #31
 800029c:	d5fa      	bpl.n	8000294 <ADC_Disable+0x10>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800029e:	689a      	ldr	r2, [r3, #8]
 80002a0:	f002 020d 	and.w	r2, r2, #13
 80002a4:	2a01      	cmp	r2, #1
 80002a6:	d109      	bne.n	80002bc <ADC_Disable+0x38>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80002a8:	689a      	ldr	r2, [r3, #8]
 80002aa:	f042 0202 	orr.w	r2, r2, #2
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	2203      	movs	r2, #3
 80002b2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80002b4:	f7ff ffe0 	bl	8000278 <HAL_GetTick>
 80002b8:	4605      	mov	r5, r0
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80002ba:	e008      	b.n	80002ce <ADC_Disable+0x4a>
      __HAL_ADC_DISABLE(hadc);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002be:	f043 0310 	orr.w	r3, r3, #16
 80002c2:	6463      	str	r3, [r4, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	64a3      	str	r3, [r4, #72]	; 0x48
      
      return HAL_ERROR;
 80002cc:	bd38      	pop	{r3, r4, r5, pc}
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80002ce:	6823      	ldr	r3, [r4, #0]
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	07db      	lsls	r3, r3, #31
 80002d4:	d5de      	bpl.n	8000294 <ADC_Disable+0x10>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80002d6:	f7ff ffcf 	bl	8000278 <HAL_GetTick>
 80002da:	1b40      	subs	r0, r0, r5
 80002dc:	2802      	cmp	r0, #2
 80002de:	d9f6      	bls.n	80002ce <ADC_Disable+0x4a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002e2:	f043 0310 	orr.w	r3, r3, #16
 80002e6:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 80002f0:	2001      	movs	r0, #1
 80002f2:	bd38      	pop	{r3, r4, r5, pc}

080002f4 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80002f4:	6803      	ldr	r3, [r0, #0]
 80002f6:	689a      	ldr	r2, [r3, #8]
 80002f8:	f012 0f0c 	tst.w	r2, #12
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80002fc:	b570      	push	{r4, r5, r6, lr}
 80002fe:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8000300:	d101      	bne.n	8000306 <ADC_ConversionStop+0x12>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000302:	2000      	movs	r0, #0
 8000304:	bd70      	pop	{r4, r5, r6, pc}
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8000306:	68da      	ldr	r2, [r3, #12]
 8000308:	0190      	lsls	r0, r2, #6
 800030a:	d510      	bpl.n	800032e <ADC_ConversionStop+0x3a>
 800030c:	69e2      	ldr	r2, [r4, #28]
 800030e:	2a01      	cmp	r2, #1
 8000310:	d10d      	bne.n	800032e <ADC_ConversionStop+0x3a>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8000312:	69a2      	ldr	r2, [r4, #24]
 8000314:	2a01      	cmp	r2, #1
 8000316:	d10a      	bne.n	800032e <ADC_ConversionStop+0x3a>
 8000318:	4a21      	ldr	r2, [pc, #132]	; (80003a0 <ADC_ConversionStop+0xac>)
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800031a:	6819      	ldr	r1, [r3, #0]
 800031c:	0649      	lsls	r1, r1, #25
 800031e:	d402      	bmi.n	8000326 <ADC_ConversionStop+0x32>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4))
 8000320:	3a01      	subs	r2, #1
 8000322:	d1fa      	bne.n	800031a <ADC_ConversionStop+0x26>
 8000324:	e031      	b.n	800038a <ADC_ConversionStop+0x96>
        }
        Conversion_Timeout_CPU_cycles ++;
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8000326:	2240      	movs	r2, #64	; 0x40
 8000328:	601a      	str	r2, [r3, #0]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800032a:	210c      	movs	r1, #12
 800032c:	e001      	b.n	8000332 <ADC_ConversionStop+0x3e>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 800032e:	2960      	cmp	r1, #96	; 0x60
 8000330:	d00b      	beq.n	800034a <ADC_ConversionStop+0x56>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000332:	689a      	ldr	r2, [r3, #8]
 8000334:	0756      	lsls	r6, r2, #29
 8000336:	d506      	bpl.n	8000346 <ADC_ConversionStop+0x52>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8000338:	689a      	ldr	r2, [r3, #8]
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800033a:	0795      	lsls	r5, r2, #30
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800033c:	bf5e      	ittt	pl
 800033e:	689a      	ldrpl	r2, [r3, #8]
 8000340:	f042 0210 	orrpl.w	r2, r2, #16
 8000344:	609a      	strpl	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8000346:	290c      	cmp	r1, #12
 8000348:	d010      	beq.n	800036c <ADC_ConversionStop+0x78>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800034a:	689a      	ldr	r2, [r3, #8]
 800034c:	0710      	lsls	r0, r2, #28
 800034e:	d506      	bpl.n	800035e <ADC_ConversionStop+0x6a>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8000350:	689a      	ldr	r2, [r3, #8]

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8000352:	0792      	lsls	r2, r2, #30
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8000354:	bf5e      	ittt	pl
 8000356:	689a      	ldrpl	r2, [r3, #8]
 8000358:	f042 0220 	orrpl.w	r2, r2, #32
 800035c:	609a      	strpl	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 800035e:	2960      	cmp	r1, #96	; 0x60
 8000360:	d002      	beq.n	8000368 <ADC_ConversionStop+0x74>
 8000362:	296c      	cmp	r1, #108	; 0x6c
 8000364:	d004      	beq.n	8000370 <ADC_ConversionStop+0x7c>
 8000366:	e001      	b.n	800036c <ADC_ConversionStop+0x78>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
        break;
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8000368:	2508      	movs	r5, #8
 800036a:	e002      	b.n	8000372 <ADC_ConversionStop+0x7e>
        break;
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800036c:	2504      	movs	r5, #4
        break;
 800036e:	e000      	b.n	8000372 <ADC_ConversionStop+0x7e>

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8000370:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8000372:	f7ff ff81 	bl	8000278 <HAL_GetTick>
 8000376:	4606      	mov	r6, r0
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8000378:	6823      	ldr	r3, [r4, #0]
 800037a:	689b      	ldr	r3, [r3, #8]
 800037c:	421d      	tst	r5, r3
 800037e:	d0c0      	beq.n	8000302 <ADC_ConversionStop+0xe>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000380:	f7ff ff7a 	bl	8000278 <HAL_GetTick>
 8000384:	1b80      	subs	r0, r0, r6
 8000386:	280b      	cmp	r0, #11
 8000388:	d9f6      	bls.n	8000378 <ADC_ConversionStop+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800038a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800038c:	f043 0310 	orr.w	r3, r3, #16
 8000390:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000392:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 800039a:	2001      	movs	r0, #1
 800039c:	bd70      	pop	{r4, r5, r6, pc}
 800039e:	bf00      	nop
 80003a0:	00099401 	.word	0x00099401

080003a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80003a4:	b538      	push	{r3, r4, r5, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80003a6:	6803      	ldr	r3, [r0, #0]
 80003a8:	689a      	ldr	r2, [r3, #8]
 80003aa:	f002 0203 	and.w	r2, r2, #3
 80003ae:	2a01      	cmp	r2, #1
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80003b0:	4604      	mov	r4, r0
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80003b2:	d104      	bne.n	80003be <ADC_Enable+0x1a>
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	07d2      	lsls	r2, r2, #31
 80003b8:	d501      	bpl.n	80003be <ADC_Enable+0x1a>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80003ba:	2000      	movs	r0, #0
 80003bc:	bd38      	pop	{r3, r4, r5, pc}
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80003be:	6899      	ldr	r1, [r3, #8]
 80003c0:	4a0e      	ldr	r2, [pc, #56]	; (80003fc <ADC_Enable+0x58>)
 80003c2:	400a      	ands	r2, r1
 80003c4:	b97a      	cbnz	r2, 80003e6 <ADC_Enable+0x42>
      
      return HAL_ERROR;
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80003c6:	689a      	ldr	r2, [r3, #8]
 80003c8:	f042 0201 	orr.w	r2, r2, #1
 80003cc:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80003ce:	f7ff ff53 	bl	8000278 <HAL_GetTick>
 80003d2:	4605      	mov	r5, r0
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80003d4:	6823      	ldr	r3, [r4, #0]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	07db      	lsls	r3, r3, #31
 80003da:	d4ee      	bmi.n	80003ba <ADC_Enable+0x16>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80003dc:	f7ff ff4c 	bl	8000278 <HAL_GetTick>
 80003e0:	1b40      	subs	r0, r0, r5
 80003e2:	2802      	cmp	r0, #2
 80003e4:	d9f6      	bls.n	80003d4 <ADC_Enable+0x30>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80003e8:	f043 0310 	orr.w	r3, r3, #16
 80003ec:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	64a3      	str	r3, [r4, #72]	; 0x48
      
        return HAL_ERROR;
 80003f6:	2001      	movs	r0, #1
 80003f8:	bd38      	pop	{r3, r4, r5, pc}
 80003fa:	bf00      	nop
 80003fc:	8000003f 	.word	0x8000003f

08000400 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000400:	b530      	push	{r4, r5, lr}
 8000402:	b097      	sub	sp, #92	; 0x5c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0;
  __IO uint32_t wait_loop_index = 0;
 8000404:	2200      	movs	r2, #0
 8000406:	9200      	str	r2, [sp, #0]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000408:	4604      	mov	r4, r0
 800040a:	2800      	cmp	r0, #0
 800040c:	d066      	beq.n	80004dc <HAL_ADC_Init+0xdc>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800040e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000410:	06d9      	lsls	r1, r3, #27
 8000412:	d447      	bmi.n	80004a4 <HAL_ADC_Init+0xa4>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000414:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000416:	b10b      	cbz	r3, 800041c <HAL_ADC_Init+0x1c>
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000418:	2200      	movs	r2, #0
 800041a:	e031      	b.n	8000480 <HAL_ADC_Init+0x80>
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800041c:	6483      	str	r3, [r0, #72]	; 0x48
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0;
 800041e:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0;
 8000420:	64c3      	str	r3, [r0, #76]	; 0x4c
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000422:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      
      /* Init the low level hardware */
      HAL_ADC_MspInit(hadc);
 8000426:	f001 fe17 	bl	8002058 <HAL_ADC_MspInit>
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800042a:	6823      	ldr	r3, [r4, #0]
 800042c:	689b      	ldr	r3, [r3, #8]
 800042e:	00db      	lsls	r3, r3, #3
 8000430:	d4f2      	bmi.n	8000418 <HAL_ADC_Init+0x18>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000432:	4620      	mov	r0, r4
 8000434:	f7ff ff26 	bl	8000284 <ADC_Disable>
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000438:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800043a:	06dd      	lsls	r5, r3, #27
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800043c:	4602      	mov	r2, r0
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800043e:	d41f      	bmi.n	8000480 <HAL_ADC_Init+0x80>
 8000440:	b9f0      	cbnz	r0, 8000480 <HAL_ADC_Init+0x80>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000442:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000444:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000448:	f023 0302 	bic.w	r3, r3, #2
 800044c:	f043 0302 	orr.w	r3, r3, #2
 8000450:	6463      	str	r3, [r4, #68]	; 0x44
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000452:	6823      	ldr	r3, [r4, #0]
 8000454:	689a      	ldr	r2, [r3, #8]
 8000456:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800045a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01 */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800045c:	689a      	ldr	r2, [r3, #8]
 800045e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000462:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000464:	4b6d      	ldr	r3, [pc, #436]	; (800061c <HAL_ADC_Init+0x21c>)
 8000466:	4a6e      	ldr	r2, [pc, #440]	; (8000620 <HAL_ADC_Init+0x220>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	fbb3 f2f2 	udiv	r2, r3, r2
 800046e:	230a      	movs	r3, #10
 8000470:	4353      	muls	r3, r2
          while(wait_loop_index != 0)
          {
            wait_loop_index--;
 8000472:	9300      	str	r3, [sp, #0]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
          while(wait_loop_index != 0)
 8000474:	9b00      	ldr	r3, [sp, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d0ce      	beq.n	8000418 <HAL_ADC_Init+0x18>
          {
            wait_loop_index--;
 800047a:	9b00      	ldr	r3, [sp, #0]
 800047c:	3b01      	subs	r3, #1
 800047e:	e7f8      	b.n	8000472 <HAL_ADC_Init+0x72>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000480:	6823      	ldr	r3, [r4, #0]
 8000482:	6899      	ldr	r1, [r3, #8]
 8000484:	00c8      	lsls	r0, r1, #3
 8000486:	d502      	bpl.n	800048e <HAL_ADC_Init+0x8e>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000488:	689b      	ldr	r3, [r3, #8]
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800048a:	0099      	lsls	r1, r3, #2
 800048c:	d50a      	bpl.n	80004a4 <HAL_ADC_Init+0xa4>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800048e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000490:	f023 0312 	bic.w	r3, r3, #18
 8000494:	f043 0310 	orr.w	r3, r3, #16
 8000498:	6463      	str	r3, [r4, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800049a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	64a3      	str	r3, [r4, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 80004a2:	2201      	movs	r2, #1
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80004a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004a6:	06db      	lsls	r3, r3, #27
 80004a8:	d412      	bmi.n	80004d0 <HAL_ADC_Init+0xd0>
 80004aa:	b98a      	cbnz	r2, 80004d0 <HAL_ADC_Init+0xd0>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80004ac:	6823      	ldr	r3, [r4, #0]
 80004ae:	6899      	ldr	r1, [r3, #8]
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
      (tmp_hal_status == HAL_OK)                                &&
 80004b0:	074d      	lsls	r5, r1, #29
 80004b2:	d40d      	bmi.n	80004d0 <HAL_ADC_Init+0xd0>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80004b4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80004b6:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80004ba:	f041 0102 	orr.w	r1, r1, #2
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80004be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80004c2:	6461      	str	r1, [r4, #68]	; 0x44
 80004c4:	4957      	ldr	r1, [pc, #348]	; (8000624 <HAL_ADC_Init+0x224>)
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80004c6:	d00b      	beq.n	80004e0 <HAL_ADC_Init+0xe0>
 80004c8:	428b      	cmp	r3, r1
 80004ca:	f040 8092 	bne.w	80005f2 <HAL_ADC_Init+0x1f2>
 80004ce:	e09c      	b.n	800060a <HAL_ADC_Init+0x20a>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80004d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004d2:	f023 0312 	bic.w	r3, r3, #18
 80004d6:	f043 0310 	orr.w	r3, r3, #16
 80004da:	6463      	str	r3, [r4, #68]	; 0x44
  __IO uint32_t wait_loop_index = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80004dc:	2001      	movs	r0, #1
 80004de:	e09a      	b.n	8000616 <HAL_ADC_Init+0x216>
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80004e0:	4a51      	ldr	r2, [pc, #324]	; (8000628 <HAL_ADC_Init+0x228>)
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80004e2:	9101      	str	r1, [sp, #4]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80004e4:	6899      	ldr	r1, [r3, #8]
 80004e6:	f001 0103 	and.w	r1, r1, #3
 80004ea:	2901      	cmp	r1, #1
 80004ec:	d102      	bne.n	80004f4 <HAL_ADC_Init+0xf4>
 80004ee:	6819      	ldr	r1, [r3, #0]
 80004f0:	07c8      	lsls	r0, r1, #31
 80004f2:	d40a      	bmi.n	800050a <HAL_ADC_Init+0x10a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80004f4:	9901      	ldr	r1, [sp, #4]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80004f6:	2900      	cmp	r1, #0
 80004f8:	d074      	beq.n	80005e4 <HAL_ADC_Init+0x1e4>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80004fa:	6888      	ldr	r0, [r1, #8]
 80004fc:	f000 0003 	and.w	r0, r0, #3
 8000500:	2801      	cmp	r0, #1
 8000502:	d16f      	bne.n	80005e4 <HAL_ADC_Init+0x1e4>
 8000504:	6809      	ldr	r1, [r1, #0]
 8000506:	07c9      	lsls	r1, r1, #31
 8000508:	d56c      	bpl.n	80005e4 <HAL_ADC_Init+0x1e4>
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 800050a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800050c:	68e5      	ldr	r5, [r4, #12]
 800050e:	68a1      	ldr	r1, [r4, #8]
 8000510:	69e0      	ldr	r0, [r4, #28]
 8000512:	2a01      	cmp	r2, #1
 8000514:	ea41 0105 	orr.w	r1, r1, r5
 8000518:	bf0c      	ite	eq
 800051a:	2200      	moveq	r2, #0
 800051c:	f44f 5280 	movne.w	r2, #4096	; 0x1000
 8000520:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 8000524:	430a      	orrs	r2, r1
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000526:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000528:	2901      	cmp	r1, #1
 800052a:	d111      	bne.n	8000550 <HAL_ADC_Init+0x150>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800052c:	b930      	cbnz	r0, 800053c <HAL_ADC_Init+0x13c>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800052e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000530:	3901      	subs	r1, #1
 8000532:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8000536:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800053a:	e009      	b.n	8000550 <HAL_ADC_Init+0x150>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800053c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800053e:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 8000542:	f041 0120 	orr.w	r1, r1, #32
 8000546:	6461      	str	r1, [r4, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000548:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800054a:	f041 0101 	orr.w	r1, r1, #1
 800054e:	64a1      	str	r1, [r4, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000550:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000552:	2901      	cmp	r1, #1
 8000554:	d01a      	beq.n	800058c <HAL_ADC_Init+0x18c>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000556:	4835      	ldr	r0, [pc, #212]	; (800062c <HAL_ADC_Init+0x22c>)
 8000558:	4283      	cmp	r3, r0
 800055a:	d003      	beq.n	8000564 <HAL_ADC_Init+0x164>
 800055c:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8000560:	4283      	cmp	r3, r0
 8000562:	d110      	bne.n	8000586 <HAL_ADC_Init+0x186>
 8000564:	f5b1 7f30 	cmp.w	r1, #704	; 0x2c0
 8000568:	d008      	beq.n	800057c <HAL_ADC_Init+0x17c>
 800056a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800056e:	d008      	beq.n	8000582 <HAL_ADC_Init+0x182>
 8000570:	f5b1 7fe0 	cmp.w	r1, #448	; 0x1c0
 8000574:	bf08      	it	eq
 8000576:	f44f 7180 	moveq.w	r1, #256	; 0x100
 800057a:	e004      	b.n	8000586 <HAL_ADC_Init+0x186>
 800057c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000580:	e001      	b.n	8000586 <HAL_ADC_Init+0x186>
 8000582:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8000586:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000588:	4302      	orrs	r2, r0
 800058a:	430a      	orrs	r2, r1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800058c:	6899      	ldr	r1, [r3, #8]
 800058e:	f011 0f0c 	tst.w	r1, #12
 8000592:	d10b      	bne.n	80005ac <HAL_ADC_Init+0x1ac>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000594:	68d9      	ldr	r1, [r3, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000596:	69a0      	ldr	r0, [r4, #24]
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000598:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800059c:	f021 0102 	bic.w	r1, r1, #2
 80005a0:	60d9      	str	r1, [r3, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80005a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80005a4:	0049      	lsls	r1, r1, #1
 80005a6:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 80005aa:	430a      	orrs	r2, r1
                       ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80005ac:	68d8      	ldr	r0, [r3, #12]
 80005ae:	4920      	ldr	r1, [pc, #128]	; (8000630 <HAL_ADC_Init+0x230>)
 80005b0:	4001      	ands	r1, r0
 80005b2:	430a      	orrs	r2, r1
 80005b4:	60da      	str	r2, [r3, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80005b6:	6922      	ldr	r2, [r4, #16]
 80005b8:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80005ba:	bf08      	it	eq
 80005bc:	6a21      	ldreq	r1, [r4, #32]
 80005be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005c0:	bf03      	ittte	eq
 80005c2:	f101 31ff 	addeq.w	r1, r1, #4294967295
 80005c6:	f022 020f 	biceq.w	r2, r2, #15
 80005ca:	430a      	orreq	r2, r1
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80005cc:	f022 020f 	bicne.w	r2, r2, #15
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80005d0:	2000      	movs	r0, #0
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80005d2:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80005d4:	64a0      	str	r0, [r4, #72]	; 0x48
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80005d8:	f023 0303 	bic.w	r3, r3, #3
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6463      	str	r3, [r4, #68]	; 0x44
 80005e2:	e018      	b.n	8000616 <HAL_ADC_Init+0x216>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80005e4:	6891      	ldr	r1, [r2, #8]
 80005e6:	f421 3040 	bic.w	r0, r1, #196608	; 0x30000
 80005ea:	6861      	ldr	r1, [r4, #4]
 80005ec:	4301      	orrs	r1, r0
 80005ee:	6091      	str	r1, [r2, #8]
 80005f0:	e78b      	b.n	800050a <HAL_ADC_Init+0x10a>
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80005f2:	480e      	ldr	r0, [pc, #56]	; (800062c <HAL_ADC_Init+0x22c>)
 80005f4:	490f      	ldr	r1, [pc, #60]	; (8000634 <HAL_ADC_Init+0x234>)
 80005f6:	4283      	cmp	r3, r0
 80005f8:	d101      	bne.n	80005fe <HAL_ADC_Init+0x1fe>
 80005fa:	9101      	str	r1, [sp, #4]
 80005fc:	e003      	b.n	8000606 <HAL_ADC_Init+0x206>
 80005fe:	428b      	cmp	r3, r1
 8000600:	bf0c      	ite	eq
 8000602:	9001      	streq	r0, [sp, #4]
 8000604:	9201      	strne	r2, [sp, #4]
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000606:	4a0c      	ldr	r2, [pc, #48]	; (8000638 <HAL_ADC_Init+0x238>)
 8000608:	e76c      	b.n	80004e4 <HAL_ADC_Init+0xe4>
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800060a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800060e:	9201      	str	r2, [sp, #4]
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000610:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8000614:	e766      	b.n	80004e4 <HAL_ADC_Init+0xe4>
  }
  
  
  /* Return function status */
  return tmp_hal_status;
}
 8000616:	b017      	add	sp, #92	; 0x5c
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	bf00      	nop
 800061c:	20000000 	.word	0x20000000
 8000620:	000f4240 	.word	0x000f4240
 8000624:	50000100 	.word	0x50000100
 8000628:	50000300 	.word	0x50000300
 800062c:	50000400 	.word	0x50000400
 8000630:	fff0c007 	.word	0xfff0c007
 8000634:	50000500 	.word	0x50000500
 8000638:	50000700 	.word	0x50000700

0800063c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800063c:	b538      	push	{r3, r4, r5, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800063e:	6803      	ldr	r3, [r0, #0]
 8000640:	689b      	ldr	r3, [r3, #8]
 8000642:	f013 0504 	ands.w	r5, r3, #4
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000646:	4604      	mov	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000648:	f040 80a1 	bne.w	800078e <HAL_ADC_Start+0x152>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800064c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000650:	2b01      	cmp	r3, #1
 8000652:	f000 809c 	beq.w	800078e <HAL_ADC_Start+0x152>
 8000656:	2301      	movs	r3, #1
 8000658:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800065c:	f7ff fea2 	bl	80003a4 <ADC_Enable>
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000660:	2800      	cmp	r0, #0
 8000662:	f040 8091 	bne.w	8000788 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000666:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000668:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800066c:	f023 0301 	bic.w	r3, r3, #1
 8000670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000674:	6463      	str	r3, [r4, #68]	; 0x44
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000676:	6823      	ldr	r3, [r4, #0]
 8000678:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800067c:	d002      	beq.n	8000684 <HAL_ADC_Start+0x48>
 800067e:	4a46      	ldr	r2, [pc, #280]	; (8000798 <HAL_ADC_Start+0x15c>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d104      	bne.n	800068e <HAL_ADC_Start+0x52>
 8000684:	4a45      	ldr	r2, [pc, #276]	; (800079c <HAL_ADC_Start+0x160>)
 8000686:	6892      	ldr	r2, [r2, #8]
 8000688:	06d2      	lsls	r2, r2, #27
 800068a:	d00b      	beq.n	80006a4 <HAL_ADC_Start+0x68>
 800068c:	e004      	b.n	8000698 <HAL_ADC_Start+0x5c>
 800068e:	4a44      	ldr	r2, [pc, #272]	; (80007a0 <HAL_ADC_Start+0x164>)
 8000690:	6892      	ldr	r2, [r2, #8]
 8000692:	06d5      	lsls	r5, r2, #27
 8000694:	d006      	beq.n	80006a4 <HAL_ADC_Start+0x68>
 8000696:	e017      	b.n	80006c8 <HAL_ADC_Start+0x8c>
 8000698:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800069c:	d002      	beq.n	80006a4 <HAL_ADC_Start+0x68>
 800069e:	4a41      	ldr	r2, [pc, #260]	; (80007a4 <HAL_ADC_Start+0x168>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d107      	bne.n	80006b4 <HAL_ADC_Start+0x78>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80006a4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80006a6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80006aa:	6462      	str	r2, [r4, #68]	; 0x44
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80006ac:	68da      	ldr	r2, [r3, #12]
 80006ae:	0190      	lsls	r0, r2, #6
 80006b0:	d51c      	bpl.n	80006ec <HAL_ADC_Start+0xb0>
 80006b2:	e015      	b.n	80006e0 <HAL_ADC_Start+0xa4>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80006b4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80006b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80006ba:	6462      	str	r2, [r4, #68]	; 0x44
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80006bc:	4a36      	ldr	r2, [pc, #216]	; (8000798 <HAL_ADC_Start+0x15c>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d109      	bne.n	80006d6 <HAL_ADC_Start+0x9a>
 80006c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006c6:	e007      	b.n	80006d8 <HAL_ADC_Start+0x9c>
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80006c8:	4a36      	ldr	r2, [pc, #216]	; (80007a4 <HAL_ADC_Start+0x168>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d0ea      	beq.n	80006a4 <HAL_ADC_Start+0x68>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80006ce:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80006d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80006d4:	6462      	str	r2, [r4, #68]	; 0x44
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80006d6:	4a33      	ldr	r2, [pc, #204]	; (80007a4 <HAL_ADC_Start+0x168>)
 80006d8:	68d2      	ldr	r2, [r2, #12]
 80006da:	f3c2 6240 	ubfx	r2, r2, #25, #1
 80006de:	b12a      	cbz	r2, 80006ec <HAL_ADC_Start+0xb0>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80006e0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80006e2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80006e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80006ea:	6462      	str	r2, [r4, #68]	; 0x44
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80006ec:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80006ee:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80006f2:	bf1c      	itt	ne
 80006f4:	6ca2      	ldrne	r2, [r4, #72]	; 0x48
 80006f6:	f022 0206 	bicne.w	r2, r2, #6
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80006fa:	64a2      	str	r2, [r4, #72]	; 0x48
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000702:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      __HAL_UNLOCK(hadc);
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000706:	f04f 021c 	mov.w	r2, #28
 800070a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800070c:	d002      	beq.n	8000714 <HAL_ADC_Start+0xd8>
 800070e:	4a22      	ldr	r2, [pc, #136]	; (8000798 <HAL_ADC_Start+0x15c>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d104      	bne.n	800071e <HAL_ADC_Start+0xe2>
 8000714:	4a21      	ldr	r2, [pc, #132]	; (800079c <HAL_ADC_Start+0x160>)
 8000716:	6891      	ldr	r1, [r2, #8]
 8000718:	06c9      	lsls	r1, r1, #27
 800071a:	d105      	bne.n	8000728 <HAL_ADC_Start+0xec>
 800071c:	e02f      	b.n	800077e <HAL_ADC_Start+0x142>
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <HAL_ADC_Start+0x164>)
 8000720:	6892      	ldr	r2, [r2, #8]
 8000722:	06d2      	lsls	r2, r2, #27
 8000724:	d10c      	bne.n	8000740 <HAL_ADC_Start+0x104>
 8000726:	e02a      	b.n	800077e <HAL_ADC_Start+0x142>
 8000728:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800072c:	d002      	beq.n	8000734 <HAL_ADC_Start+0xf8>
 800072e:	491a      	ldr	r1, [pc, #104]	; (8000798 <HAL_ADC_Start+0x15c>)
 8000730:	428b      	cmp	r3, r1
 8000732:	d105      	bne.n	8000740 <HAL_ADC_Start+0x104>
 8000734:	6892      	ldr	r2, [r2, #8]
 8000736:	f002 021f 	and.w	r2, r2, #31
 800073a:	2a05      	cmp	r2, #5
 800073c:	d107      	bne.n	800074e <HAL_ADC_Start+0x112>
 800073e:	e01e      	b.n	800077e <HAL_ADC_Start+0x142>
 8000740:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <HAL_ADC_Start+0x164>)
 8000742:	6892      	ldr	r2, [r2, #8]
 8000744:	f002 021f 	and.w	r2, r2, #31
 8000748:	2a05      	cmp	r2, #5
 800074a:	d10f      	bne.n	800076c <HAL_ADC_Start+0x130>
 800074c:	e017      	b.n	800077e <HAL_ADC_Start+0x142>
 800074e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000752:	d002      	beq.n	800075a <HAL_ADC_Start+0x11e>
 8000754:	4a10      	ldr	r2, [pc, #64]	; (8000798 <HAL_ADC_Start+0x15c>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d108      	bne.n	800076c <HAL_ADC_Start+0x130>
 800075a:	4a10      	ldr	r2, [pc, #64]	; (800079c <HAL_ADC_Start+0x160>)
 800075c:	6892      	ldr	r2, [r2, #8]
 800075e:	f002 021f 	and.w	r2, r2, #31
 8000762:	2a09      	cmp	r2, #9
 8000764:	d00b      	beq.n	800077e <HAL_ADC_Start+0x142>
 8000766:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800076a:	e004      	b.n	8000776 <HAL_ADC_Start+0x13a>
 800076c:	4a0c      	ldr	r2, [pc, #48]	; (80007a0 <HAL_ADC_Start+0x164>)
 800076e:	6892      	ldr	r2, [r2, #8]
 8000770:	f002 021f 	and.w	r2, r2, #31
 8000774:	2a09      	cmp	r2, #9
 8000776:	d002      	beq.n	800077e <HAL_ADC_Start+0x142>
 8000778:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <HAL_ADC_Start+0x168>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d109      	bne.n	8000792 <HAL_ADC_Start+0x156>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800077e:	689a      	ldr	r2, [r3, #8]
 8000780:	f042 0204 	orr.w	r2, r2, #4
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	e004      	b.n	8000792 <HAL_ADC_Start+0x156>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000788:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
 800078c:	bd38      	pop	{r3, r4, r5, pc}
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800078e:	2002      	movs	r0, #2
 8000790:	bd38      	pop	{r3, r4, r5, pc}
 8000792:	2000      	movs	r0, #0
 8000794:	bd38      	pop	{r3, r4, r5, pc}
 8000796:	bf00      	nop
 8000798:	50000100 	.word	0x50000100
 800079c:	50000300 	.word	0x50000300
 80007a0:	50000700 	.word	0x50000700
 80007a4:	50000400 	.word	0x50000400

080007a8 <HAL_ADC_Stop>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007a8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80007ac:	2b01      	cmp	r3, #1
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80007ae:	b510      	push	{r4, lr}
 80007b0:	4604      	mov	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007b2:	d016      	beq.n	80007e2 <HAL_ADC_Stop+0x3a>
 80007b4:	2301      	movs	r3, #1
 80007b6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80007ba:	216c      	movs	r1, #108	; 0x6c
 80007bc:	f7ff fd9a 	bl	80002f4 <ADC_ConversionStop>
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80007c0:	b958      	cbnz	r0, 80007da <HAL_ADC_Stop+0x32>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80007c2:	4620      	mov	r0, r4
 80007c4:	f7ff fd5e 	bl	8000284 <ADC_Disable>
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80007c8:	b938      	cbnz	r0, 80007da <HAL_ADC_Stop+0x32>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80007ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80007d0:	f023 0301 	bic.w	r3, r3, #1
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6463      	str	r3, [r4, #68]	; 0x44
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80007da:	2300      	movs	r3, #0
 80007dc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 80007e0:	bd10      	pop	{r4, pc}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007e2:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 80007e4:	bd10      	pop	{r4, pc}
	...

080007e8 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80007e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80007ec:	6946      	ldr	r6, [r0, #20]
 80007ee:	6803      	ldr	r3, [r0, #0]
 80007f0:	2e08      	cmp	r6, #8
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80007f2:	4604      	mov	r4, r0
 80007f4:	460f      	mov	r7, r1
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80007f6:	d025      	beq.n	8000844 <HAL_ADC_PollForConversion+0x5c>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80007f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007fc:	4a45      	ldr	r2, [pc, #276]	; (8000914 <HAL_ADC_PollForConversion+0x12c>)
 80007fe:	d004      	beq.n	800080a <HAL_ADC_PollForConversion+0x22>
 8000800:	4845      	ldr	r0, [pc, #276]	; (8000918 <HAL_ADC_PollForConversion+0x130>)
 8000802:	4946      	ldr	r1, [pc, #280]	; (800091c <HAL_ADC_PollForConversion+0x134>)
 8000804:	428b      	cmp	r3, r1
 8000806:	bf18      	it	ne
 8000808:	4602      	movne	r2, r0
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800080a:	6891      	ldr	r1, [r2, #8]
 800080c:	f011 011f 	ands.w	r1, r1, #31
 8000810:	d109      	bne.n	8000826 <HAL_ADC_PollForConversion+0x3e>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8000812:	68da      	ldr	r2, [r3, #12]
 8000814:	07d5      	lsls	r5, r2, #31
 8000816:	d514      	bpl.n	8000842 <HAL_ADC_PollForConversion+0x5a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000818:	6c63      	ldr	r3, [r4, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800081a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800081e:	f043 0320 	orr.w	r3, r3, #32
 8000822:	6463      	str	r3, [r4, #68]	; 0x44
 8000824:	e00a      	b.n	800083c <HAL_ADC_PollForConversion+0x54>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8000826:	6892      	ldr	r2, [r2, #8]
 8000828:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 800082c:	d009      	beq.n	8000842 <HAL_ADC_PollForConversion+0x5a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800082e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000830:	f043 0320 	orr.w	r3, r3, #32
 8000834:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000836:	2300      	movs	r3, #0
 8000838:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        
        return HAL_ERROR;
 800083c:	2001      	movs	r0, #1
 800083e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000842:	260c      	movs	r6, #12
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000844:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000848:	d002      	beq.n	8000850 <HAL_ADC_PollForConversion+0x68>
 800084a:	4a34      	ldr	r2, [pc, #208]	; (800091c <HAL_ADC_PollForConversion+0x134>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d104      	bne.n	800085a <HAL_ADC_PollForConversion+0x72>
 8000850:	4a30      	ldr	r2, [pc, #192]	; (8000914 <HAL_ADC_PollForConversion+0x12c>)
 8000852:	6892      	ldr	r2, [r2, #8]
 8000854:	06d0      	lsls	r0, r2, #27
 8000856:	d011      	beq.n	800087c <HAL_ADC_PollForConversion+0x94>
 8000858:	e004      	b.n	8000864 <HAL_ADC_PollForConversion+0x7c>
 800085a:	4a2f      	ldr	r2, [pc, #188]	; (8000918 <HAL_ADC_PollForConversion+0x130>)
 800085c:	6892      	ldr	r2, [r2, #8]
 800085e:	06d1      	lsls	r1, r2, #27
 8000860:	d00c      	beq.n	800087c <HAL_ADC_PollForConversion+0x94>
 8000862:	e052      	b.n	800090a <HAL_ADC_PollForConversion+0x122>
 8000864:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000868:	d008      	beq.n	800087c <HAL_ADC_PollForConversion+0x94>
 800086a:	4a2d      	ldr	r2, [pc, #180]	; (8000920 <HAL_ADC_PollForConversion+0x138>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d005      	beq.n	800087c <HAL_ADC_PollForConversion+0x94>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000870:	492a      	ldr	r1, [pc, #168]	; (800091c <HAL_ADC_PollForConversion+0x134>)
 8000872:	428b      	cmp	r3, r1
 8000874:	bf14      	ite	ne
 8000876:	4613      	movne	r3, r2
 8000878:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
 800087c:	68dd      	ldr	r5, [r3, #12]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800087e:	f7ff fcfb 	bl	8000278 <HAL_GetTick>
 8000882:	4680      	mov	r8, r0
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000884:	6823      	ldr	r3, [r4, #0]
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4216      	tst	r6, r2
 800088a:	d113      	bne.n	80008b4 <HAL_ADC_PollForConversion+0xcc>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800088c:	1c7a      	adds	r2, r7, #1
 800088e:	d0fa      	beq.n	8000886 <HAL_ADC_PollForConversion+0x9e>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8000890:	b94f      	cbnz	r7, 80008a6 <HAL_ADC_PollForConversion+0xbe>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000892:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800089a:	2300      	movs	r3, #0
 800089c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        
        return HAL_TIMEOUT;
 80008a0:	2003      	movs	r0, #3
 80008a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80008a6:	f7ff fce7 	bl	8000278 <HAL_GetTick>
 80008aa:	ebc8 0000 	rsb	r0, r8, r0
 80008ae:	4287      	cmp	r7, r0
 80008b0:	d2e8      	bcs.n	8000884 <HAL_ADC_PollForConversion+0x9c>
 80008b2:	e7ee      	b.n	8000892 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80008b4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80008b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80008ba:	6462      	str	r2, [r4, #68]	; 0x44
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80008bc:	68da      	ldr	r2, [r3, #12]
 80008be:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80008c2:	d11b      	bne.n	80008fc <HAL_ADC_PollForConversion+0x114>
 80008c4:	04a8      	lsls	r0, r5, #18
 80008c6:	d419      	bmi.n	80008fc <HAL_ADC_PollForConversion+0x114>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	0711      	lsls	r1, r2, #28
 80008cc:	d516      	bpl.n	80008fc <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80008ce:	689a      	ldr	r2, [r3, #8]
 80008d0:	f012 0f04 	tst.w	r2, #4
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80008d4:	6c62      	ldr	r2, [r4, #68]	; 0x44
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80008d6:	d10a      	bne.n	80008ee <HAL_ADC_PollForConversion+0x106>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80008d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80008dc:	6462      	str	r2, [r4, #68]	; 0x44
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80008de:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80008e0:	04d2      	lsls	r2, r2, #19
 80008e2:	d40b      	bmi.n	80008fc <HAL_ADC_PollForConversion+0x114>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80008e4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80008e6:	f042 0201 	orr.w	r2, r2, #1
 80008ea:	6462      	str	r2, [r4, #68]	; 0x44
 80008ec:	e006      	b.n	80008fc <HAL_ADC_PollForConversion+0x114>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008ee:	f042 0220 	orr.w	r2, r2, #32
 80008f2:	6462      	str	r2, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008f4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80008f6:	f042 0201 	orr.w	r2, r2, #1
 80008fa:	64a2      	str	r2, [r4, #72]	; 0x48
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80008fc:	f415 4080 	ands.w	r0, r5, #16384	; 0x4000
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8000900:	bf0c      	ite	eq
 8000902:	601e      	streq	r6, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000904:	2000      	movne	r0, #0
 8000906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800090a:	4a05      	ldr	r2, [pc, #20]	; (8000920 <HAL_ADC_PollForConversion+0x138>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d0b5      	beq.n	800087c <HAL_ADC_PollForConversion+0x94>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000910:	4613      	mov	r3, r2
 8000912:	e7b3      	b.n	800087c <HAL_ADC_PollForConversion+0x94>
 8000914:	50000300 	.word	0x50000300
 8000918:	50000700 	.word	0x50000700
 800091c:	50000100 	.word	0x50000100
 8000920:	50000400 	.word	0x50000400

08000924 <HAL_ADC_GetValue>:

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000924:	6803      	ldr	r3, [r0, #0]
 8000926:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8000928:	4770      	bx	lr
	...

0800092c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800092c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800092e:	b097      	sub	sp, #92	; 0x5c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	9300      	str	r3, [sp, #0]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000934:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000938:	2b01      	cmp	r3, #1
 800093a:	f000 80eb 	beq.w	8000b14 <HAL_ADC_ConfigChannel+0x1e8>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800093e:	6803      	ldr	r3, [r0, #0]
 8000940:	689c      	ldr	r4, [r3, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000942:	2201      	movs	r2, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000944:	0767      	lsls	r7, r4, #29
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000946:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800094a:	f100 80d9 	bmi.w	8000b00 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4 */
    if (sConfig->Rank < 5)
 800094e:	684d      	ldr	r5, [r1, #4]
 8000950:	680c      	ldr	r4, [r1, #0]
 8000952:	2d04      	cmp	r5, #4
 8000954:	f04f 0206 	mov.w	r2, #6
 8000958:	d80a      	bhi.n	8000970 <HAL_ADC_ConfigChannel+0x44>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800095a:	436a      	muls	r2, r5
 800095c:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800095e:	251f      	movs	r5, #31
 8000960:	4095      	lsls	r5, r2
 8000962:	ea26 0505 	bic.w	r5, r6, r5
 8000966:	fa04 f202 	lsl.w	r2, r4, r2
 800096a:	432a      	orrs	r2, r5
 800096c:	631a      	str	r2, [r3, #48]	; 0x30
 800096e:	e026      	b.n	80009be <HAL_ADC_ConfigChannel+0x92>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9 */
    else if (sConfig->Rank < 10)
 8000970:	2d09      	cmp	r5, #9
 8000972:	d80b      	bhi.n	800098c <HAL_ADC_ConfigChannel+0x60>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000974:	436a      	muls	r2, r5
 8000976:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8000978:	3a1e      	subs	r2, #30
 800097a:	251f      	movs	r5, #31
 800097c:	4095      	lsls	r5, r2
 800097e:	ea26 0505 	bic.w	r5, r6, r5
 8000982:	fa04 f202 	lsl.w	r2, r4, r2
 8000986:	432a      	orrs	r2, r5
 8000988:	635a      	str	r2, [r3, #52]	; 0x34
 800098a:	e018      	b.n	80009be <HAL_ADC_ConfigChannel+0x92>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14 */
    else if (sConfig->Rank < 15)
 800098c:	2d0e      	cmp	r5, #14
 800098e:	d80b      	bhi.n	80009a8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000990:	436a      	muls	r2, r5
 8000992:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8000994:	3a3c      	subs	r2, #60	; 0x3c
 8000996:	251f      	movs	r5, #31
 8000998:	4095      	lsls	r5, r2
 800099a:	ea26 0505 	bic.w	r5, r6, r5
 800099e:	fa04 f202 	lsl.w	r2, r4, r2
 80009a2:	432a      	orrs	r2, r5
 80009a4:	639a      	str	r2, [r3, #56]	; 0x38
 80009a6:	e00a      	b.n	80009be <HAL_ADC_ConfigChannel+0x92>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16 */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80009a8:	436a      	muls	r2, r5
 80009aa:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 80009ac:	3a5a      	subs	r2, #90	; 0x5a
 80009ae:	251f      	movs	r5, #31
 80009b0:	4095      	lsls	r5, r2
 80009b2:	ea26 0505 	bic.w	r5, r6, r5
 80009b6:	fa04 f202 	lsl.w	r2, r4, r2
 80009ba:	432a      	orrs	r2, r5
 80009bc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80009be:	689a      	ldr	r2, [r3, #8]
 80009c0:	f012 0f0c 	tst.w	r2, #12
 80009c4:	d178      	bne.n	8000ab8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18 */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80009c6:	2c09      	cmp	r4, #9
 80009c8:	ea4f 0244 	mov.w	r2, r4, lsl #1
 80009cc:	688e      	ldr	r6, [r1, #8]
 80009ce:	d90c      	bls.n	80009ea <HAL_ADC_ConfigChannel+0xbe>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80009d0:	1915      	adds	r5, r2, r4
 80009d2:	f1a5 021e 	sub.w	r2, r5, #30
 80009d6:	699f      	ldr	r7, [r3, #24]
 80009d8:	2507      	movs	r5, #7
 80009da:	4095      	lsls	r5, r2
 80009dc:	ea27 0505 	bic.w	r5, r7, r5
 80009e0:	fa06 f202 	lsl.w	r2, r6, r2
 80009e4:	432a      	orrs	r2, r5
 80009e6:	619a      	str	r2, [r3, #24]
 80009e8:	e009      	b.n	80009fe <HAL_ADC_ConfigChannel+0xd2>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9 */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80009ea:	695f      	ldr	r7, [r3, #20]
 80009ec:	4422      	add	r2, r4
 80009ee:	2507      	movs	r5, #7
 80009f0:	4095      	lsls	r5, r2
 80009f2:	ea27 0505 	bic.w	r5, r7, r5
 80009f6:	fa06 f202 	lsl.w	r2, r6, r2
 80009fa:	432a      	orrs	r2, r5
 80009fc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80009fe:	68da      	ldr	r2, [r3, #12]
 8000a00:	694f      	ldr	r7, [r1, #20]
 8000a02:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8000a06:	0052      	lsls	r2, r2, #1
 8000a08:	4097      	lsls	r7, r2
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000a0a:	690a      	ldr	r2, [r1, #16]
 8000a0c:	3a01      	subs	r2, #1
 8000a0e:	ea4f 6e84 	mov.w	lr, r4, lsl #26
 8000a12:	2a03      	cmp	r2, #3
 8000a14:	d82c      	bhi.n	8000a70 <HAL_ADC_ConfigChannel+0x144>
 8000a16:	e8df f002 	tbb	[pc, r2]
 8000a1a:	0d02      	.short	0x0d02
 8000a1c:	2218      	.short	0x2218
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1 */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000a1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a20:	4e81      	ldr	r6, [pc, #516]	; (8000c28 <HAL_ADC_ConfigChannel+0x2fc>)
 8000a22:	4016      	ands	r6, r2
 8000a24:	ea46 060e 	orr.w	r6, r6, lr
 8000a28:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8000a2c:	ea46 0207 	orr.w	r2, r6, r7
 8000a30:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000a32:	e041      	b.n	8000ab8 <HAL_ADC_ConfigChannel+0x18c>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2 */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000a34:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000a36:	4d7c      	ldr	r5, [pc, #496]	; (8000c28 <HAL_ADC_ConfigChannel+0x2fc>)
 8000a38:	4015      	ands	r5, r2
 8000a3a:	ea45 050e 	orr.w	r5, r5, lr
 8000a3e:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8000a42:	ea45 0207 	orr.w	r2, r5, r7
 8000a46:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000a48:	e036      	b.n	8000ab8 <HAL_ADC_ConfigChannel+0x18c>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3 */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000a4a:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8000a4c:	4a76      	ldr	r2, [pc, #472]	; (8000c28 <HAL_ADC_ConfigChannel+0x2fc>)
 8000a4e:	402a      	ands	r2, r5
 8000a50:	ea42 020e 	orr.w	r2, r2, lr
 8000a54:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000a58:	433a      	orrs	r2, r7
 8000a5a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000a5c:	e02c      	b.n	8000ab8 <HAL_ADC_ConfigChannel+0x18c>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4 */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000a5e:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8000a60:	4a71      	ldr	r2, [pc, #452]	; (8000c28 <HAL_ADC_ConfigChannel+0x2fc>)
 8000a62:	402a      	ands	r2, r5
 8000a64:	ea42 020e 	orr.w	r2, r2, lr
 8000a68:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000a6c:	433a      	orrs	r2, r7
 8000a6e:	e022      	b.n	8000ab6 <HAL_ADC_ConfigChannel+0x18a>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000a70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a72:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000a76:	4572      	cmp	r2, lr
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000a78:	bf02      	ittt	eq
 8000a7a:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 8000a7c:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000a80:	661a      	streq	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000a82:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000a84:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000a88:	4596      	cmp	lr, r2
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000a8a:	bf02      	ittt	eq
 8000a8c:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 8000a8e:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000a92:	665a      	streq	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000a94:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000a96:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000a9a:	4596      	cmp	lr, r2
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000a9c:	bf02      	ittt	eq
 8000a9e:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 8000aa0:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000aa4:	669a      	streq	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000aa6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000aa8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000aac:	4596      	cmp	lr, r2
 8000aae:	d103      	bne.n	8000ab8 <HAL_ADC_ConfigChannel+0x18c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000ab0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000ab2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000ab6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ab8:	689a      	ldr	r2, [r3, #8]
 8000aba:	f002 0203 	and.w	r2, r2, #3
 8000abe:	2a01      	cmp	r2, #1
 8000ac0:	d102      	bne.n	8000ac8 <HAL_ADC_ConfigChannel+0x19c>
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	07d6      	lsls	r6, r2, #31
 8000ac6:	d419      	bmi.n	8000afc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000ac8:	68ca      	ldr	r2, [r1, #12]
 8000aca:	2a01      	cmp	r2, #1
 8000acc:	d024      	beq.n	8000b18 <HAL_ADC_ConfigChannel+0x1ec>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000ace:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	40a2      	lsls	r2, r4
 8000ad6:	ea21 0202 	bic.w	r2, r1, r2
 8000ada:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ade:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ae2:	d03d      	beq.n	8000b60 <HAL_ADC_ConfigChannel+0x234>
 8000ae4:	4951      	ldr	r1, [pc, #324]	; (8000c2c <HAL_ADC_ConfigChannel+0x300>)
 8000ae6:	4a52      	ldr	r2, [pc, #328]	; (8000c30 <HAL_ADC_ConfigChannel+0x304>)
 8000ae8:	4d52      	ldr	r5, [pc, #328]	; (8000c34 <HAL_ADC_ConfigChannel+0x308>)
 8000aea:	42ab      	cmp	r3, r5
 8000aec:	bf08      	it	eq
 8000aee:	460a      	moveq	r2, r1
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000af0:	2c10      	cmp	r4, #16
 8000af2:	d137      	bne.n	8000b64 <HAL_ADC_ConfigChannel+0x238>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000af4:	6891      	ldr	r1, [r2, #8]
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000af6:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000afa:	d03f      	beq.n	8000b7c <HAL_ADC_ConfigChannel+0x250>
  * @param  sConfig: Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000afc:	2300      	movs	r3, #0
 8000afe:	e004      	b.n	8000b0a <HAL_ADC_ConfigChannel+0x1de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b00:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000b02:	f043 0320 	orr.w	r3, r3, #32
 8000b06:	6443      	str	r3, [r0, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8000b08:	4613      	mov	r3, r2
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8000b10:	4618      	mov	r0, r3
 8000b12:	e087      	b.n	8000c24 <HAL_ADC_ConfigChannel+0x2f8>
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b14:	2002      	movs	r0, #2
 8000b16:	e085      	b.n	8000c24 <HAL_ADC_ConfigChannel+0x2f8>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000b18:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8000b1c:	40a2      	lsls	r2, r4
 8000b1e:	432a      	orrs	r2, r5
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18 */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000b20:	2c09      	cmp	r4, #9
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000b22:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000b26:	688d      	ldr	r5, [r1, #8]
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18 */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000b28:	d90d      	bls.n	8000b46 <HAL_ADC_ConfigChannel+0x21a>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8000b2a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8000b2e:	f1a1 021b 	sub.w	r2, r1, #27
 8000b32:	699e      	ldr	r6, [r3, #24]
 8000b34:	2107      	movs	r1, #7
 8000b36:	4091      	lsls	r1, r2
 8000b38:	ea26 0101 	bic.w	r1, r6, r1
 8000b3c:	fa05 f202 	lsl.w	r2, r5, r2
 8000b40:	430a      	orrs	r2, r1
 8000b42:	619a      	str	r2, [r3, #24]
 8000b44:	e7cb      	b.n	8000ade <HAL_ADC_ConfigChannel+0x1b2>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1) );
      }
      else /* For channels 1 to 9 */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8000b46:	1c62      	adds	r2, r4, #1
 8000b48:	695e      	ldr	r6, [r3, #20]
 8000b4a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000b4e:	2107      	movs	r1, #7
 8000b50:	4091      	lsls	r1, r2
 8000b52:	ea26 0101 	bic.w	r1, r6, r1
 8000b56:	fa05 f202 	lsl.w	r2, r5, r2
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	615a      	str	r2, [r3, #20]
 8000b5e:	e7be      	b.n	8000ade <HAL_ADC_ConfigChannel+0x1b2>
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b60:	4a32      	ldr	r2, [pc, #200]	; (8000c2c <HAL_ADC_ConfigChannel+0x300>)
 8000b62:	e7c5      	b.n	8000af0 <HAL_ADC_ConfigChannel+0x1c4>
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000b64:	2c11      	cmp	r4, #17
 8000b66:	d103      	bne.n	8000b70 <HAL_ADC_ConfigChannel+0x244>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000b68:	6891      	ldr	r1, [r2, #8]
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000b6a:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8000b6e:	e7c4      	b.n	8000afa <HAL_ADC_ConfigChannel+0x1ce>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000b70:	2c12      	cmp	r4, #18
 8000b72:	d1c3      	bne.n	8000afc <HAL_ADC_ConfigChannel+0x1d0>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000b74:	6891      	ldr	r1, [r2, #8]
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000b76:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8000b7a:	e7be      	b.n	8000afa <HAL_ADC_ConfigChannel+0x1ce>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000b7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b80:	492c      	ldr	r1, [pc, #176]	; (8000c34 <HAL_ADC_ConfigChannel+0x308>)
 8000b82:	d00d      	beq.n	8000ba0 <HAL_ADC_ConfigChannel+0x274>
 8000b84:	428b      	cmp	r3, r1
 8000b86:	d102      	bne.n	8000b8e <HAL_ADC_ConfigChannel+0x262>
 8000b88:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000b8c:	e008      	b.n	8000ba0 <HAL_ADC_ConfigChannel+0x274>
 8000b8e:	492a      	ldr	r1, [pc, #168]	; (8000c38 <HAL_ADC_ConfigChannel+0x30c>)
 8000b90:	4d2a      	ldr	r5, [pc, #168]	; (8000c3c <HAL_ADC_ConfigChannel+0x310>)
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d101      	bne.n	8000b9a <HAL_ADC_ConfigChannel+0x26e>
 8000b96:	9501      	str	r5, [sp, #4]
 8000b98:	e003      	b.n	8000ba2 <HAL_ADC_ConfigChannel+0x276>
 8000b9a:	42ab      	cmp	r3, r5
 8000b9c:	bf18      	it	ne
 8000b9e:	2100      	movne	r1, #0
 8000ba0:	9101      	str	r1, [sp, #4]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000ba2:	6899      	ldr	r1, [r3, #8]
 8000ba4:	f001 0103 	and.w	r1, r1, #3
 8000ba8:	2901      	cmp	r1, #1
 8000baa:	d102      	bne.n	8000bb2 <HAL_ADC_ConfigChannel+0x286>
 8000bac:	6819      	ldr	r1, [r3, #0]
 8000bae:	07cd      	lsls	r5, r1, #31
 8000bb0:	d409      	bmi.n	8000bc6 <HAL_ADC_ConfigChannel+0x29a>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000bb2:	9901      	ldr	r1, [sp, #4]
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000bb4:	b169      	cbz	r1, 8000bd2 <HAL_ADC_ConfigChannel+0x2a6>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000bb6:	688d      	ldr	r5, [r1, #8]
 8000bb8:	f005 0503 	and.w	r5, r5, #3
 8000bbc:	2d01      	cmp	r5, #1
 8000bbe:	d108      	bne.n	8000bd2 <HAL_ADC_ConfigChannel+0x2a6>
 8000bc0:	6809      	ldr	r1, [r1, #0]
 8000bc2:	07c9      	lsls	r1, r1, #31
 8000bc4:	d505      	bpl.n	8000bd2 <HAL_ADC_ConfigChannel+0x2a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bc6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000bc8:	f043 0320 	orr.w	r3, r3, #32
 8000bcc:	6443      	str	r3, [r0, #68]	; 0x44
        
        tmp_hal_status = HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e79b      	b.n	8000b0a <HAL_ADC_ConfigChannel+0x1de>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000bd2:	2c10      	cmp	r4, #16
 8000bd4:	d114      	bne.n	8000c00 <HAL_ADC_ConfigChannel+0x2d4>
 8000bd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bda:	d18f      	bne.n	8000afc <HAL_ADC_ConfigChannel+0x1d0>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000bdc:	6893      	ldr	r3, [r2, #8]
 8000bde:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000be2:	6093      	str	r3, [r2, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <HAL_ADC_ConfigChannel+0x314>)
 8000be6:	4a17      	ldr	r2, [pc, #92]	; (8000c44 <HAL_ADC_ConfigChannel+0x318>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	fbb3 f2f2 	udiv	r2, r3, r2
 8000bee:	230a      	movs	r3, #10
 8000bf0:	4353      	muls	r3, r2
          while(wait_loop_index != 0)
          {
            wait_loop_index--;
 8000bf2:	9300      	str	r3, [sp, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
          while(wait_loop_index != 0)
 8000bf4:	9b00      	ldr	r3, [sp, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d080      	beq.n	8000afc <HAL_ADC_ConfigChannel+0x1d0>
          {
            wait_loop_index--;
 8000bfa:	9b00      	ldr	r3, [sp, #0]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	e7f8      	b.n	8000bf2 <HAL_ADC_ConfigChannel+0x2c6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000c00:	2c11      	cmp	r4, #17
 8000c02:	d107      	bne.n	8000c14 <HAL_ADC_ConfigChannel+0x2e8>
 8000c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c08:	f47f af78 	bne.w	8000afc <HAL_ADC_ConfigChannel+0x1d0>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000c0c:	6893      	ldr	r3, [r2, #8]
 8000c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c12:	e005      	b.n	8000c20 <HAL_ADC_ConfigChannel+0x2f4>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000c14:	2c12      	cmp	r4, #18
 8000c16:	f47f af71 	bne.w	8000afc <HAL_ADC_ConfigChannel+0x1d0>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000c1a:	6893      	ldr	r3, [r2, #8]
 8000c1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c20:	6093      	str	r3, [r2, #8]
 8000c22:	e76b      	b.n	8000afc <HAL_ADC_ConfigChannel+0x1d0>
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 8000c24:	b017      	add	sp, #92	; 0x5c
 8000c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c28:	83fff000 	.word	0x83fff000
 8000c2c:	50000300 	.word	0x50000300
 8000c30:	50000700 	.word	0x50000700
 8000c34:	50000100 	.word	0x50000100
 8000c38:	50000400 	.word	0x50000400
 8000c3c:	50000500 	.word	0x50000500
 8000c40:	20000000 	.word	0x20000000
 8000c44:	000f4240 	.word	0x000f4240

08000c48 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc: ADC handle
  * @param  multimode : Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8000c48:	b5f0      	push	{r4, r5, r6, r7, lr}
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c4a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000c4e:	2b01      	cmp	r3, #1
  * @param  hadc: ADC handle
  * @param  multimode : Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8000c50:	b097      	sub	sp, #92	; 0x5c
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c52:	d053      	beq.n	8000cfc <HAL_ADCEx_MultiModeConfigChannel+0xb4>
  
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c54:	6802      	ldr	r2, [r0, #0]
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c56:	2301      	movs	r3, #1
  
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c58:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c5c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8000c60:	4b39      	ldr	r3, [pc, #228]	; (8000d48 <HAL_ADCEx_MultiModeConfigChannel+0x100>)
  
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c62:	d00d      	beq.n	8000c80 <HAL_ADCEx_MultiModeConfigChannel+0x38>
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d102      	bne.n	8000c6e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8000c68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c6c:	e008      	b.n	8000c80 <HAL_ADCEx_MultiModeConfigChannel+0x38>
 8000c6e:	4b37      	ldr	r3, [pc, #220]	; (8000d4c <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8000c70:	4c37      	ldr	r4, [pc, #220]	; (8000d50 <HAL_ADCEx_MultiModeConfigChannel+0x108>)
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d101      	bne.n	8000c7a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8000c76:	9401      	str	r4, [sp, #4]
 8000c78:	e003      	b.n	8000c82 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8000c7a:	42a2      	cmp	r2, r4
 8000c7c:	bf18      	it	ne
 8000c7e:	2300      	movne	r3, #0
 8000c80:	9301      	str	r3, [sp, #4]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8000c82:	6893      	ldr	r3, [r2, #8]
 8000c84:	075f      	lsls	r7, r3, #29
 8000c86:	d42f      	bmi.n	8000ce8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8000c88:	9c01      	ldr	r4, [sp, #4]
 8000c8a:	68a3      	ldr	r3, [r4, #8]
 8000c8c:	075e      	lsls	r6, r3, #29
 8000c8e:	d42b      	bmi.n	8000ce8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c90:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8000c94:	d006      	beq.n	8000ca4 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8000c96:	4d2f      	ldr	r5, [pc, #188]	; (8000d54 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8000c98:	4b2f      	ldr	r3, [pc, #188]	; (8000d58 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8000c9a:	4e2b      	ldr	r6, [pc, #172]	; (8000d48 <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 8000c9c:	42b2      	cmp	r2, r6
 8000c9e:	bf08      	it	eq
 8000ca0:	462b      	moveq	r3, r5
 8000ca2:	e000      	b.n	8000ca6 <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 8000ca4:	4b2b      	ldr	r3, [pc, #172]	; (8000d54 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000ca6:	680f      	ldr	r7, [r1, #0]
 8000ca8:	b18f      	cbz	r7, 8000cce <HAL_ADCEx_MultiModeConfigChannel+0x86>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000caa:	689d      	ldr	r5, [r3, #8]
 8000cac:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8000cae:	f425 4560 	bic.w	r5, r5, #57344	; 0xe000
 8000cb2:	ea45 3546 	orr.w	r5, r5, r6, lsl #13
 8000cb6:	684e      	ldr	r6, [r1, #4]
 8000cb8:	4335      	orrs	r5, r6
 8000cba:	609d      	str	r5, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000cbc:	6895      	ldr	r5, [r2, #8]
 8000cbe:	f005 0503 	and.w	r5, r5, #3
 8000cc2:	2d01      	cmp	r5, #1
 8000cc4:	d11c      	bne.n	8000d00 <HAL_ADCEx_MultiModeConfigChannel+0xb8>
 8000cc6:	6812      	ldr	r2, [r2, #0]
 8000cc8:	07d5      	lsls	r5, r2, #31
 8000cca:	d519      	bpl.n	8000d00 <HAL_ADCEx_MultiModeConfigChannel+0xb8>
 8000ccc:	e038      	b.n	8000d40 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8000cce:	6899      	ldr	r1, [r3, #8]
 8000cd0:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8000cd4:	6099      	str	r1, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000cd6:	6891      	ldr	r1, [r2, #8]
 8000cd8:	f001 0103 	and.w	r1, r1, #3
 8000cdc:	2901      	cmp	r1, #1
 8000cde:	d121      	bne.n	8000d24 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
 8000ce0:	6812      	ldr	r2, [r2, #0]
 8000ce2:	07d1      	lsls	r1, r2, #31
 8000ce4:	d42c      	bmi.n	8000d40 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8000ce6:	e01d      	b.n	8000d24 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ce8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000cea:	f043 0320 	orr.w	r3, r3, #32
 8000cee:	6443      	str	r3, [r0, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	e023      	b.n	8000d44 <HAL_ADCEx_MultiModeConfigChannel+0xfc>
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cfc:	2002      	movs	r0, #2
 8000cfe:	e021      	b.n	8000d44 <HAL_ADCEx_MultiModeConfigChannel+0xfc>
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000d00:	68a5      	ldr	r5, [r4, #8]
 8000d02:	f005 0503 	and.w	r5, r5, #3
 8000d06:	2d01      	cmp	r5, #1
 8000d08:	d102      	bne.n	8000d10 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
 8000d0a:	6822      	ldr	r2, [r4, #0]
 8000d0c:	07d4      	lsls	r4, r2, #31
 8000d0e:	d417      	bmi.n	8000d40 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000d10:	688a      	ldr	r2, [r1, #8]
 8000d12:	689c      	ldr	r4, [r3, #8]
 8000d14:	ea47 0102 	orr.w	r1, r7, r2
 8000d18:	f424 6271 	bic.w	r2, r4, #3856	; 0xf10
 8000d1c:	f022 020f 	bic.w	r2, r2, #15
 8000d20:	430a      	orrs	r2, r1
 8000d22:	e00c      	b.n	8000d3e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000d24:	68a2      	ldr	r2, [r4, #8]
 8000d26:	f002 0203 	and.w	r2, r2, #3
 8000d2a:	2a01      	cmp	r2, #1
 8000d2c:	d102      	bne.n	8000d34 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8000d2e:	6822      	ldr	r2, [r4, #0]
 8000d30:	07d2      	lsls	r2, r2, #31
 8000d32:	d405      	bmi.n	8000d40 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8000d34:	689a      	ldr	r2, [r3, #8]
 8000d36:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000d3a:	f022 020f 	bic.w	r2, r2, #15
 8000d3e:	609a      	str	r2, [r3, #8]
  * @param  multimode : Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d40:	2300      	movs	r3, #0
 8000d42:	e7d6      	b.n	8000cf2 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
} 
 8000d44:	b017      	add	sp, #92	; 0x5c
 8000d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d48:	50000100 	.word	0x50000100
 8000d4c:	50000400 	.word	0x50000400
 8000d50:	50000500 	.word	0x50000500
 8000d54:	50000300 	.word	0x50000300
 8000d58:	50000700 	.word	0x50000700

08000d5c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d5c:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000d5e:	68d3      	ldr	r3, [r2, #12]
 8000d60:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d64:	041b      	lsls	r3, r3, #16
 8000d66:	0c1b      	lsrs	r3, r3, #16
 8000d68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000d6c:	0200      	lsls	r0, r0, #8
 8000d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d72:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000d76:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000d78:	60d3      	str	r3, [r2, #12]
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d80:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <HAL_NVIC_SetPriority+0x60>)
 8000d82:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d84:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8a:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8e:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d90:	2c04      	cmp	r4, #4
 8000d92:	bf28      	it	cs
 8000d94:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d96:	2d06      	cmp	r5, #6

  return (
 8000d98:	f04f 0501 	mov.w	r5, #1
 8000d9c:	fa05 f404 	lsl.w	r4, r5, r4
 8000da0:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da4:	bf8c      	ite	hi
 8000da6:	3b03      	subhi	r3, #3
 8000da8:	2300      	movls	r3, #0

  return (
 8000daa:	400c      	ands	r4, r1
 8000dac:	409c      	lsls	r4, r3
 8000dae:	fa05 f303 	lsl.w	r3, r5, r3
 8000db2:	3b01      	subs	r3, #1
 8000db4:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000db6:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000db8:	ea42 0204 	orr.w	r2, r2, r4
 8000dbc:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc0:	bfaf      	iteee	ge
 8000dc2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	f000 000f 	andlt.w	r0, r0, #15
 8000dca:	4b06      	ldrlt	r3, [pc, #24]	; (8000de4 <HAL_NVIC_SetPriority+0x64>)
 8000dcc:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	bfa5      	ittet	ge
 8000dd0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000dd4:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd6:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000ddc:	bd30      	pop	{r4, r5, pc}
 8000dde:	bf00      	nop
 8000de0:	e000ed00 	.word	0xe000ed00
 8000de4:	e000ed14 	.word	0xe000ed14

08000de8 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000de8:	0942      	lsrs	r2, r0, #5
 8000dea:	2301      	movs	r3, #1
 8000dec:	f000 001f 	and.w	r0, r0, #31
 8000df0:	fa03 f000 	lsl.w	r0, r3, r0
 8000df4:	4b01      	ldr	r3, [pc, #4]	; (8000dfc <HAL_NVIC_EnableIRQ+0x14>)
 8000df6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e00:	3801      	subs	r0, #1
 8000e02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e06:	d20a      	bcs.n	8000e1e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0c:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	21f0      	movs	r1, #240	; 0xf0
 8000e10:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e14:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e16:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e18:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000e010 	.word	0xe000e010
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e2e:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000e30:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e32:	bf0c      	ite	eq
 8000e34:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000e38:	f022 0204 	bicne.w	r2, r2, #4
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	4770      	bx	lr
 8000e40:	e000e010 	.word	0xe000e010

08000e44 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000e44:	4770      	bx	lr

08000e46 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000e46:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000e48:	f7ff fffc 	bl	8000e44 <HAL_SYSTICK_Callback>
 8000e4c:	bd08      	pop	{r3, pc}
	...

08000e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e54:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8000fdc <HAL_GPIO_Init+0x18c>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000e58:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5a:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8000fe0 <HAL_GPIO_Init+0x190>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e5e:	b085      	sub	sp, #20
 8000e60:	464c      	mov	r4, r9
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000e62:	9301      	str	r3, [sp, #4]
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00;
 8000e64:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000e66:	9a01      	ldr	r2, [sp, #4]
 8000e68:	40da      	lsrs	r2, r3
 8000e6a:	f000 80b1 	beq.w	8000fd0 <HAL_GPIO_Init+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	fa02 fa03 	lsl.w	sl, r2, r3

    if(iocurrent)
 8000e74:	9a01      	ldr	r2, [sp, #4]
 8000e76:	ea12 060a 	ands.w	r6, r2, sl
 8000e7a:	f000 80a7 	beq.w	8000fcc <HAL_GPIO_Init+0x17c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e7e:	684a      	ldr	r2, [r1, #4]
 8000e80:	f022 0e10 	bic.w	lr, r2, #16
 8000e84:	f1be 0f02 	cmp.w	lr, #2
 8000e88:	d114      	bne.n	8000eb4 <HAL_GPIO_Init+0x64>
 8000e8a:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000e8e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e92:	f003 0b07 	and.w	fp, r3, #7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e96:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e9a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000e9e:	250f      	movs	r5, #15
 8000ea0:	fa05 f50b 	lsl.w	r5, r5, fp
 8000ea4:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ea8:	690f      	ldr	r7, [r1, #16]
 8000eaa:	fa07 f70b 	lsl.w	r7, r7, fp
 8000eae:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3] = temp;
 8000eb0:	f8cc 7020 	str.w	r7, [ip, #32]
 8000eb4:	ea4f 0b43 	mov.w	fp, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000eb8:	2703      	movs	r7, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eba:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ebc:	fa07 fc0b 	lsl.w	ip, r7, fp
 8000ec0:	ea6f 0c0c 	mvn.w	ip, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ec4:	4017      	ands	r7, r2
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ec6:	ea05 050c 	and.w	r5, r5, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000eca:	fa07 f70b 	lsl.w	r7, r7, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ece:	f10e 3eff 	add.w	lr, lr, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ed2:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ed4:	f1be 0f01 	cmp.w	lr, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 8000ed8:	6005      	str	r5, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eda:	d810      	bhi.n	8000efe <HAL_GPIO_Init+0xae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000edc:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ede:	68cf      	ldr	r7, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ee0:	ea0c 0505 	and.w	r5, ip, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ee4:	fa07 f70b 	lsl.w	r7, r7, fp
 8000ee8:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8000eea:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eec:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eee:	ea25 0a0a 	bic.w	sl, r5, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ef2:	f3c2 1500 	ubfx	r5, r2, #4, #1
 8000ef6:	409d      	lsls	r5, r3
 8000ef8:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->OTYPER = temp;
 8000efc:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000efe:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f00:	ea0c 0c05 	and.w	ip, ip, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f04:	688d      	ldr	r5, [r1, #8]
 8000f06:	fa05 f50b 	lsl.w	r5, r5, fp
 8000f0a:	ea45 050c 	orr.w	r5, r5, ip
      GPIOx->PUPDR = temp;
 8000f0e:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f10:	00d5      	lsls	r5, r2, #3
 8000f12:	d55b      	bpl.n	8000fcc <HAL_GPIO_Init+0x17c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f14:	f8d8 5018 	ldr.w	r5, [r8, #24]
 8000f18:	f045 0501 	orr.w	r5, r5, #1
 8000f1c:	f8c8 5018 	str.w	r5, [r8, #24]
 8000f20:	f8d8 5018 	ldr.w	r5, [r8, #24]
 8000f24:	f023 0e03 	bic.w	lr, r3, #3
 8000f28:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8000f2c:	f005 0501 	and.w	r5, r5, #1
 8000f30:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8000f34:	9503      	str	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f36:	f003 0c03 	and.w	ip, r3, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	9d03      	ldr	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f3c:	f8de 5008 	ldr.w	r5, [lr, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f40:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000f44:	270f      	movs	r7, #15
 8000f46:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000f4a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f4e:	ea25 0507 	bic.w	r5, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000f52:	d011      	beq.n	8000f78 <HAL_GPIO_Init+0x128>
 8000f54:	4f20      	ldr	r7, [pc, #128]	; (8000fd8 <HAL_GPIO_Init+0x188>)
 8000f56:	42b8      	cmp	r0, r7
 8000f58:	d010      	beq.n	8000f7c <HAL_GPIO_Init+0x12c>
 8000f5a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000f5e:	42b8      	cmp	r0, r7
 8000f60:	d00e      	beq.n	8000f80 <HAL_GPIO_Init+0x130>
 8000f62:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000f66:	42b8      	cmp	r0, r7
 8000f68:	d00c      	beq.n	8000f84 <HAL_GPIO_Init+0x134>
 8000f6a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000f6e:	42b8      	cmp	r0, r7
 8000f70:	bf14      	ite	ne
 8000f72:	2705      	movne	r7, #5
 8000f74:	2704      	moveq	r7, #4
 8000f76:	e006      	b.n	8000f86 <HAL_GPIO_Init+0x136>
 8000f78:	2700      	movs	r7, #0
 8000f7a:	e004      	b.n	8000f86 <HAL_GPIO_Init+0x136>
 8000f7c:	2701      	movs	r7, #1
 8000f7e:	e002      	b.n	8000f86 <HAL_GPIO_Init+0x136>
 8000f80:	2702      	movs	r7, #2
 8000f82:	e000      	b.n	8000f86 <HAL_GPIO_Init+0x136>
 8000f84:	2703      	movs	r7, #3
 8000f86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f8a:	ea4c 0505 	orr.w	r5, ip, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f8e:	f8ce 5008 	str.w	r5, [lr, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f92:	f8d9 5000 	ldr.w	r5, [r9]
        temp &= ~((uint32_t)iocurrent);
 8000f96:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f98:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8000f9c:	bf0c      	ite	eq
 8000f9e:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8000fa0:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000fa2:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8000fa4:	6865      	ldr	r5, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fa6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8000faa:	bf0c      	ite	eq
 8000fac:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8000fae:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000fb0:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fb2:	68a5      	ldr	r5, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fb4:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8000fb8:	bf0c      	ite	eq
 8000fba:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8000fbc:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000fbe:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000fc0:	68e5      	ldr	r5, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fc2:	0292      	lsls	r2, r2, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8000fc4:	bf54      	ite	pl
 8000fc6:	403d      	andpl	r5, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000fc8:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000fca:	60e5      	str	r5, [r4, #12]
      }
    }
    
    position++;
 8000fcc:	3301      	adds	r3, #1
 8000fce:	e74a      	b.n	8000e66 <HAL_GPIO_Init+0x16>
  }
}
 8000fd0:	b005      	add	sp, #20
 8000fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fd6:	bf00      	nop
 8000fd8:	48000400 	.word	0x48000400
 8000fdc:	40010400 	.word	0x40010400
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fe4:	b10a      	cbz	r2, 8000fea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fe6:	6181      	str	r1, [r0, #24]
 8000fe8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fea:	6281      	str	r1, [r0, #40]	; 0x28
 8000fec:	4770      	bx	lr
	...

08000ff0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff0:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff6:	07de      	lsls	r6, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff8:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ffa:	d403      	bmi.n	8001004 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ffc:	682b      	ldr	r3, [r5, #0]
 8000ffe:	079c      	lsls	r4, r3, #30
 8001000:	d471      	bmi.n	80010e6 <HAL_RCC_OscConfig+0xf6>
 8001002:	e0f0      	b.n	80011e6 <HAL_RCC_OscConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001004:	4cb3      	ldr	r4, [pc, #716]	; (80012d4 <HAL_RCC_OscConfig+0x2e4>)
 8001006:	6863      	ldr	r3, [r4, #4]
 8001008:	f003 030c 	and.w	r3, r3, #12
 800100c:	2b04      	cmp	r3, #4
 800100e:	d007      	beq.n	8001020 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001010:	6863      	ldr	r3, [r4, #4]
 8001012:	f003 030c 	and.w	r3, r3, #12
 8001016:	2b08      	cmp	r3, #8
 8001018:	d116      	bne.n	8001048 <HAL_RCC_OscConfig+0x58>
 800101a:	6863      	ldr	r3, [r4, #4]
 800101c:	03d8      	lsls	r0, r3, #15
 800101e:	d513      	bpl.n	8001048 <HAL_RCC_OscConfig+0x58>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001020:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001024:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001028:	6822      	ldr	r2, [r4, #0]
 800102a:	fa93 f3a3 	rbit	r3, r3
 800102e:	fab3 f383 	clz	r3, r3
 8001032:	f003 031f 	and.w	r3, r3, #31
 8001036:	fa22 f303 	lsr.w	r3, r2, r3
 800103a:	07d9      	lsls	r1, r3, #31
 800103c:	d5de      	bpl.n	8000ffc <HAL_RCC_OscConfig+0xc>
 800103e:	686b      	ldr	r3, [r5, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1db      	bne.n	8000ffc <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8001044:	2001      	movs	r0, #1
 8001046:	e233      	b.n	80014b0 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001048:	686b      	ldr	r3, [r5, #4]
 800104a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800104e:	d007      	beq.n	8001060 <HAL_RCC_OscConfig+0x70>
 8001050:	6822      	ldr	r2, [r4, #0]
 8001052:	b14b      	cbz	r3, 8001068 <HAL_RCC_OscConfig+0x78>
 8001054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001058:	d106      	bne.n	8001068 <HAL_RCC_OscConfig+0x78>
 800105a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800105e:	6022      	str	r2, [r4, #0]
 8001060:	6822      	ldr	r2, [r4, #0]
 8001062:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001066:	e005      	b.n	8001074 <HAL_RCC_OscConfig+0x84>
 8001068:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800106c:	6022      	str	r2, [r4, #0]
 800106e:	6822      	ldr	r2, [r4, #0]
 8001070:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001074:	6022      	str	r2, [r4, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001076:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001078:	f022 010f 	bic.w	r1, r2, #15
 800107c:	68aa      	ldr	r2, [r5, #8]
 800107e:	430a      	orrs	r2, r1
 8001080:	62e2      	str	r2, [r4, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001082:	b1c3      	cbz	r3, 80010b6 <HAL_RCC_OscConfig+0xc6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001084:	f7ff f8f8 	bl	8000278 <HAL_GetTick>
 8001088:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800108c:	4607      	mov	r7, r0
 800108e:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001092:	6822      	ldr	r2, [r4, #0]
 8001094:	fa96 f3a6 	rbit	r3, r6
 8001098:	fab3 f383 	clz	r3, r3
 800109c:	f003 031f 	and.w	r3, r3, #31
 80010a0:	fa22 f303 	lsr.w	r3, r2, r3
 80010a4:	07da      	lsls	r2, r3, #31
 80010a6:	d4a9      	bmi.n	8000ffc <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010a8:	f7ff f8e6 	bl	8000278 <HAL_GetTick>
 80010ac:	1bc0      	subs	r0, r0, r7
 80010ae:	2864      	cmp	r0, #100	; 0x64
 80010b0:	d9ed      	bls.n	800108e <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 80010b2:	2003      	movs	r0, #3
 80010b4:	e1fc      	b.n	80014b0 <HAL_RCC_OscConfig+0x4c0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b6:	f7ff f8df 	bl	8000278 <HAL_GetTick>
 80010ba:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80010be:	4607      	mov	r7, r0
 80010c0:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010c4:	6822      	ldr	r2, [r4, #0]
 80010c6:	fa96 f3a6 	rbit	r3, r6
 80010ca:	fab3 f383 	clz	r3, r3
 80010ce:	f003 031f 	and.w	r3, r3, #31
 80010d2:	fa22 f303 	lsr.w	r3, r2, r3
 80010d6:	07db      	lsls	r3, r3, #31
 80010d8:	d590      	bpl.n	8000ffc <HAL_RCC_OscConfig+0xc>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010da:	f7ff f8cd 	bl	8000278 <HAL_GetTick>
 80010de:	1bc0      	subs	r0, r0, r7
 80010e0:	2864      	cmp	r0, #100	; 0x64
 80010e2:	d9ed      	bls.n	80010c0 <HAL_RCC_OscConfig+0xd0>
 80010e4:	e7e5      	b.n	80010b2 <HAL_RCC_OscConfig+0xc2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010e6:	4c7b      	ldr	r4, [pc, #492]	; (80012d4 <HAL_RCC_OscConfig+0x2e4>)
 80010e8:	6863      	ldr	r3, [r4, #4]
 80010ea:	f013 0f0c 	tst.w	r3, #12
 80010ee:	d007      	beq.n	8001100 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010f0:	6863      	ldr	r3, [r4, #4]
 80010f2:	f003 030c 	and.w	r3, r3, #12
 80010f6:	2b08      	cmp	r3, #8
 80010f8:	d121      	bne.n	800113e <HAL_RCC_OscConfig+0x14e>
 80010fa:	6863      	ldr	r3, [r4, #4]
 80010fc:	03d8      	lsls	r0, r3, #15
 80010fe:	d41e      	bmi.n	800113e <HAL_RCC_OscConfig+0x14e>
 8001100:	2302      	movs	r3, #2
 8001102:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001106:	6822      	ldr	r2, [r4, #0]
 8001108:	fa93 f3a3 	rbit	r3, r3
 800110c:	fab3 f383 	clz	r3, r3
 8001110:	f003 031f 	and.w	r3, r3, #31
 8001114:	fa22 f303 	lsr.w	r3, r2, r3
 8001118:	07d9      	lsls	r1, r3, #31
 800111a:	d502      	bpl.n	8001122 <HAL_RCC_OscConfig+0x132>
 800111c:	692b      	ldr	r3, [r5, #16]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d190      	bne.n	8001044 <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001122:	6823      	ldr	r3, [r4, #0]
 8001124:	22f8      	movs	r2, #248	; 0xf8
 8001126:	fa92 f2a2 	rbit	r2, r2
 800112a:	6969      	ldr	r1, [r5, #20]
 800112c:	fab2 f282 	clz	r2, r2
 8001130:	fa01 f202 	lsl.w	r2, r1, r2
 8001134:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001138:	4313      	orrs	r3, r2
 800113a:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800113c:	e053      	b.n	80011e6 <HAL_RCC_OscConfig+0x1f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800113e:	692a      	ldr	r2, [r5, #16]
 8001140:	2301      	movs	r3, #1
 8001142:	b37a      	cbz	r2, 80011a4 <HAL_RCC_OscConfig+0x1b4>
 8001144:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001148:	fab2 f282 	clz	r2, r2
 800114c:	0092      	lsls	r2, r2, #2
 800114e:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 8001152:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 8001156:	2602      	movs	r6, #2
 8001158:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115a:	f7ff f88d 	bl	8000278 <HAL_GetTick>
 800115e:	4607      	mov	r7, r0
 8001160:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001164:	485b      	ldr	r0, [pc, #364]	; (80012d4 <HAL_RCC_OscConfig+0x2e4>)
 8001166:	6822      	ldr	r2, [r4, #0]
 8001168:	fa96 f3a6 	rbit	r3, r6
 800116c:	fab3 f383 	clz	r3, r3
 8001170:	f003 031f 	and.w	r3, r3, #31
 8001174:	fa22 f303 	lsr.w	r3, r2, r3
 8001178:	07da      	lsls	r2, r3, #31
 800117a:	d405      	bmi.n	8001188 <HAL_RCC_OscConfig+0x198>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800117c:	f7ff f87c 	bl	8000278 <HAL_GetTick>
 8001180:	1bc0      	subs	r0, r0, r7
 8001182:	2802      	cmp	r0, #2
 8001184:	d9ec      	bls.n	8001160 <HAL_RCC_OscConfig+0x170>
 8001186:	e794      	b.n	80010b2 <HAL_RCC_OscConfig+0xc2>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001188:	6803      	ldr	r3, [r0, #0]
 800118a:	22f8      	movs	r2, #248	; 0xf8
 800118c:	fa92 f2a2 	rbit	r2, r2
 8001190:	6969      	ldr	r1, [r5, #20]
 8001192:	fab2 f282 	clz	r2, r2
 8001196:	fa01 f202 	lsl.w	r2, r1, r2
 800119a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800119e:	4313      	orrs	r3, r2
 80011a0:	6003      	str	r3, [r0, #0]
 80011a2:	e020      	b.n	80011e6 <HAL_RCC_OscConfig+0x1f6>
 80011a4:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011a8:	fab3 f383 	clz	r3, r3
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80011b2:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80011b6:	2602      	movs	r6, #2
 80011b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ba:	f7ff f85d 	bl	8000278 <HAL_GetTick>
 80011be:	4607      	mov	r7, r0
 80011c0:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c4:	6822      	ldr	r2, [r4, #0]
 80011c6:	fa96 f3a6 	rbit	r3, r6
 80011ca:	fab3 f383 	clz	r3, r3
 80011ce:	f003 031f 	and.w	r3, r3, #31
 80011d2:	fa22 f303 	lsr.w	r3, r2, r3
 80011d6:	07db      	lsls	r3, r3, #31
 80011d8:	d505      	bpl.n	80011e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011da:	f7ff f84d 	bl	8000278 <HAL_GetTick>
 80011de:	1bc0      	subs	r0, r0, r7
 80011e0:	2802      	cmp	r0, #2
 80011e2:	d9ed      	bls.n	80011c0 <HAL_RCC_OscConfig+0x1d0>
 80011e4:	e765      	b.n	80010b2 <HAL_RCC_OscConfig+0xc2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e6:	682b      	ldr	r3, [r5, #0]
 80011e8:	0718      	lsls	r0, r3, #28
 80011ea:	d403      	bmi.n	80011f4 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ec:	682b      	ldr	r3, [r5, #0]
 80011ee:	0759      	lsls	r1, r3, #29
 80011f0:	d447      	bmi.n	8001282 <HAL_RCC_OscConfig+0x292>
 80011f2:	e0da      	b.n	80013aa <HAL_RCC_OscConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011f4:	69aa      	ldr	r2, [r5, #24]
 80011f6:	4c37      	ldr	r4, [pc, #220]	; (80012d4 <HAL_RCC_OscConfig+0x2e4>)
 80011f8:	4937      	ldr	r1, [pc, #220]	; (80012d8 <HAL_RCC_OscConfig+0x2e8>)
 80011fa:	2301      	movs	r3, #1
 80011fc:	b302      	cbz	r2, 8001240 <HAL_RCC_OscConfig+0x250>
 80011fe:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001202:	fab2 f282 	clz	r2, r2
 8001206:	2602      	movs	r6, #2
 8001208:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800120c:	f7ff f834 	bl	8000278 <HAL_GetTick>
 8001210:	4607      	mov	r7, r0
 8001212:	fa96 f3a6 	rbit	r3, r6
 8001216:	fa96 f3a6 	rbit	r3, r6
 800121a:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800121e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001220:	fa96 f3a6 	rbit	r3, r6
 8001224:	fab3 f383 	clz	r3, r3
 8001228:	f003 031f 	and.w	r3, r3, #31
 800122c:	fa22 f303 	lsr.w	r3, r2, r3
 8001230:	07da      	lsls	r2, r3, #31
 8001232:	d4db      	bmi.n	80011ec <HAL_RCC_OscConfig+0x1fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001234:	f7ff f820 	bl	8000278 <HAL_GetTick>
 8001238:	1bc0      	subs	r0, r0, r7
 800123a:	2802      	cmp	r0, #2
 800123c:	d9e9      	bls.n	8001212 <HAL_RCC_OscConfig+0x222>
 800123e:	e738      	b.n	80010b2 <HAL_RCC_OscConfig+0xc2>
 8001240:	fa93 f3a3 	rbit	r3, r3
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001244:	fab3 f383 	clz	r3, r3
 8001248:	2602      	movs	r6, #2
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124e:	f7ff f813 	bl	8000278 <HAL_GetTick>
 8001252:	4607      	mov	r7, r0
 8001254:	fa96 f3a6 	rbit	r3, r6
 8001258:	fa96 f3a6 	rbit	r3, r6
 800125c:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001260:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001262:	fa96 f3a6 	rbit	r3, r6
 8001266:	fab3 f383 	clz	r3, r3
 800126a:	f003 031f 	and.w	r3, r3, #31
 800126e:	fa22 f303 	lsr.w	r3, r2, r3
 8001272:	07db      	lsls	r3, r3, #31
 8001274:	d5ba      	bpl.n	80011ec <HAL_RCC_OscConfig+0x1fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001276:	f7fe ffff 	bl	8000278 <HAL_GetTick>
 800127a:	1bc0      	subs	r0, r0, r7
 800127c:	2802      	cmp	r0, #2
 800127e:	d9e9      	bls.n	8001254 <HAL_RCC_OscConfig+0x264>
 8001280:	e717      	b.n	80010b2 <HAL_RCC_OscConfig+0xc2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001282:	4c14      	ldr	r4, [pc, #80]	; (80012d4 <HAL_RCC_OscConfig+0x2e4>)
 8001284:	69e3      	ldr	r3, [r4, #28]
 8001286:	00de      	lsls	r6, r3, #3
 8001288:	d40a      	bmi.n	80012a0 <HAL_RCC_OscConfig+0x2b0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800128a:	69e3      	ldr	r3, [r4, #28]
 800128c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001290:	61e3      	str	r3, [r4, #28]
 8001292:	69e3      	ldr	r3, [r4, #28]
 8001294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800129c:	2701      	movs	r7, #1
 800129e:	e000      	b.n	80012a2 <HAL_RCC_OscConfig+0x2b2>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 80012a0:	2700      	movs	r7, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a2:	4e0e      	ldr	r6, [pc, #56]	; (80012dc <HAL_RCC_OscConfig+0x2ec>)
 80012a4:	6833      	ldr	r3, [r6, #0]
 80012a6:	05d8      	lsls	r0, r3, #23
 80012a8:	d503      	bpl.n	80012b2 <HAL_RCC_OscConfig+0x2c2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012aa:	68eb      	ldr	r3, [r5, #12]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d117      	bne.n	80012e0 <HAL_RCC_OscConfig+0x2f0>
 80012b0:	e02d      	b.n	800130e <HAL_RCC_OscConfig+0x31e>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012b2:	6833      	ldr	r3, [r6, #0]
 80012b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b8:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ba:	f7fe ffdd 	bl	8000278 <HAL_GetTick>
 80012be:	4680      	mov	r8, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c0:	6833      	ldr	r3, [r6, #0]
 80012c2:	05d9      	lsls	r1, r3, #23
 80012c4:	d4f1      	bmi.n	80012aa <HAL_RCC_OscConfig+0x2ba>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012c6:	f7fe ffd7 	bl	8000278 <HAL_GetTick>
 80012ca:	ebc8 0000 	rsb	r0, r8, r0
 80012ce:	2864      	cmp	r0, #100	; 0x64
 80012d0:	d9f6      	bls.n	80012c0 <HAL_RCC_OscConfig+0x2d0>
 80012d2:	e6ee      	b.n	80010b2 <HAL_RCC_OscConfig+0xc2>
 80012d4:	40021000 	.word	0x40021000
 80012d8:	42420480 	.word	0x42420480
 80012dc:	40007000 	.word	0x40007000
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e0:	b97b      	cbnz	r3, 8001302 <HAL_RCC_OscConfig+0x312>
 80012e2:	6a23      	ldr	r3, [r4, #32]
 80012e4:	f023 0301 	bic.w	r3, r3, #1
 80012e8:	6223      	str	r3, [r4, #32]
 80012ea:	6a23      	ldr	r3, [r4, #32]
 80012ec:	f023 0304 	bic.w	r3, r3, #4
 80012f0:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f2:	f7fe ffc1 	bl	8000278 <HAL_GetTick>
 80012f6:	2602      	movs	r6, #2
 80012f8:	4681      	mov	r9, r0
 80012fa:	46b0      	mov	r8, r6
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012fc:	f241 3a88 	movw	sl, #5000	; 0x1388
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001300:	e039      	b.n	8001376 <HAL_RCC_OscConfig+0x386>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001302:	2b05      	cmp	r3, #5
 8001304:	6a23      	ldr	r3, [r4, #32]
 8001306:	d106      	bne.n	8001316 <HAL_RCC_OscConfig+0x326>
 8001308:	f043 0304 	orr.w	r3, r3, #4
 800130c:	6223      	str	r3, [r4, #32]
 800130e:	6a23      	ldr	r3, [r4, #32]
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	e005      	b.n	8001322 <HAL_RCC_OscConfig+0x332>
 8001316:	f023 0301 	bic.w	r3, r3, #1
 800131a:	6223      	str	r3, [r4, #32]
 800131c:	6a23      	ldr	r3, [r4, #32]
 800131e:	f023 0304 	bic.w	r3, r3, #4
 8001322:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001324:	f7fe ffa8 	bl	8000278 <HAL_GetTick>
 8001328:	2602      	movs	r6, #2
 800132a:	4682      	mov	sl, r0
 800132c:	46b1      	mov	r9, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800132e:	f241 3888 	movw	r8, #5000	; 0x1388
 8001332:	fa96 f3a6 	rbit	r3, r6
 8001336:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800133a:	b10b      	cbz	r3, 8001340 <HAL_RCC_OscConfig+0x350>
 800133c:	6a22      	ldr	r2, [r4, #32]
 800133e:	e002      	b.n	8001346 <HAL_RCC_OscConfig+0x356>
 8001340:	fa96 f3a6 	rbit	r3, r6
 8001344:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001346:	fa99 f3a9 	rbit	r3, r9
 800134a:	fab3 f383 	clz	r3, r3
 800134e:	f003 031f 	and.w	r3, r3, #31
 8001352:	fa22 f303 	lsr.w	r3, r2, r3
 8001356:	07da      	lsls	r2, r3, #31
 8001358:	d41d      	bmi.n	8001396 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800135a:	f7fe ff8d 	bl	8000278 <HAL_GetTick>
 800135e:	ebca 0000 	rsb	r0, sl, r0
 8001362:	4540      	cmp	r0, r8
 8001364:	d9e5      	bls.n	8001332 <HAL_RCC_OscConfig+0x342>
 8001366:	e6a4      	b.n	80010b2 <HAL_RCC_OscConfig+0xc2>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001368:	f7fe ff86 	bl	8000278 <HAL_GetTick>
 800136c:	ebc9 0000 	rsb	r0, r9, r0
 8001370:	4550      	cmp	r0, sl
 8001372:	f63f ae9e 	bhi.w	80010b2 <HAL_RCC_OscConfig+0xc2>
 8001376:	fa96 f3a6 	rbit	r3, r6
 800137a:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800137e:	b183      	cbz	r3, 80013a2 <HAL_RCC_OscConfig+0x3b2>
 8001380:	6a22      	ldr	r2, [r4, #32]
 8001382:	fa98 f3a8 	rbit	r3, r8
 8001386:	fab3 f383 	clz	r3, r3
 800138a:	f003 031f 	and.w	r3, r3, #31
 800138e:	fa22 f303 	lsr.w	r3, r2, r3
 8001392:	07db      	lsls	r3, r3, #31
 8001394:	d4e8      	bmi.n	8001368 <HAL_RCC_OscConfig+0x378>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001396:	b147      	cbz	r7, 80013aa <HAL_RCC_OscConfig+0x3ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001398:	69e3      	ldr	r3, [r4, #28]
 800139a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800139e:	61e3      	str	r3, [r4, #28]
 80013a0:	e003      	b.n	80013aa <HAL_RCC_OscConfig+0x3ba>
 80013a2:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013a8:	e7eb      	b.n	8001382 <HAL_RCC_OscConfig+0x392>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013aa:	69ea      	ldr	r2, [r5, #28]
 80013ac:	b90a      	cbnz	r2, 80013b2 <HAL_RCC_OscConfig+0x3c2>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80013ae:	2000      	movs	r0, #0
 80013b0:	e07e      	b.n	80014b0 <HAL_RCC_OscConfig+0x4c0>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013b2:	4c41      	ldr	r4, [pc, #260]	; (80014b8 <HAL_RCC_OscConfig+0x4c8>)
 80013b4:	6863      	ldr	r3, [r4, #4]
 80013b6:	f003 030c 	and.w	r3, r3, #12
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	f43f ae42 	beq.w	8001044 <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013c0:	2a02      	cmp	r2, #2
 80013c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013c6:	d150      	bne.n	800146a <HAL_RCC_OscConfig+0x47a>
 80013c8:	fa93 f3a3 	rbit	r3, r3
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013cc:	fab3 f383 	clz	r3, r3
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80013d6:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013de:	f7fe ff4b 	bl	8000278 <HAL_GetTick>
 80013e2:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 80013e6:	4607      	mov	r7, r0
 80013e8:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ec:	4932      	ldr	r1, [pc, #200]	; (80014b8 <HAL_RCC_OscConfig+0x4c8>)
 80013ee:	6822      	ldr	r2, [r4, #0]
 80013f0:	fa96 f3a6 	rbit	r3, r6
 80013f4:	fab3 f383 	clz	r3, r3
 80013f8:	f003 031f 	and.w	r3, r3, #31
 80013fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001400:	07d8      	lsls	r0, r3, #31
 8001402:	d505      	bpl.n	8001410 <HAL_RCC_OscConfig+0x420>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001404:	f7fe ff38 	bl	8000278 <HAL_GetTick>
 8001408:	1bc0      	subs	r0, r0, r7
 800140a:	2802      	cmp	r0, #2
 800140c:	d9ec      	bls.n	80013e8 <HAL_RCC_OscConfig+0x3f8>
 800140e:	e650      	b.n	80010b2 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001410:	684b      	ldr	r3, [r1, #4]
 8001412:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8001414:	6a2a      	ldr	r2, [r5, #32]
 8001416:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800141a:	4302      	orrs	r2, r0
 800141c:	4313      	orrs	r3, r2
 800141e:	604b      	str	r3, [r1, #4]
 8001420:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001424:	fa93 f3a3 	rbit	r3, r3
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001428:	fab3 f383 	clz	r3, r3
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001432:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001436:	2201      	movs	r2, #1
 8001438:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143a:	f7fe ff1d 	bl	8000278 <HAL_GetTick>
 800143e:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001442:	4606      	mov	r6, r0
 8001444:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001448:	6822      	ldr	r2, [r4, #0]
 800144a:	fa95 f3a5 	rbit	r3, r5
 800144e:	fab3 f383 	clz	r3, r3
 8001452:	f003 031f 	and.w	r3, r3, #31
 8001456:	fa22 f303 	lsr.w	r3, r2, r3
 800145a:	07da      	lsls	r2, r3, #31
 800145c:	d4a7      	bmi.n	80013ae <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800145e:	f7fe ff0b 	bl	8000278 <HAL_GetTick>
 8001462:	1b80      	subs	r0, r0, r6
 8001464:	2802      	cmp	r0, #2
 8001466:	d9ed      	bls.n	8001444 <HAL_RCC_OscConfig+0x454>
 8001468:	e623      	b.n	80010b2 <HAL_RCC_OscConfig+0xc2>
 800146a:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800146e:	fab3 f383 	clz	r3, r3
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001478:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001480:	f7fe fefa 	bl	8000278 <HAL_GetTick>
 8001484:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001488:	4606      	mov	r6, r0
 800148a:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800148e:	6822      	ldr	r2, [r4, #0]
 8001490:	fa95 f3a5 	rbit	r3, r5
 8001494:	fab3 f383 	clz	r3, r3
 8001498:	f003 031f 	and.w	r3, r3, #31
 800149c:	fa22 f303 	lsr.w	r3, r2, r3
 80014a0:	07db      	lsls	r3, r3, #31
 80014a2:	d584      	bpl.n	80013ae <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a4:	f7fe fee8 	bl	8000278 <HAL_GetTick>
 80014a8:	1b80      	subs	r0, r0, r6
 80014aa:	2802      	cmp	r0, #2
 80014ac:	d9ed      	bls.n	800148a <HAL_RCC_OscConfig+0x49a>
 80014ae:	e600      	b.n	80010b2 <HAL_RCC_OscConfig+0xc2>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80014b0:	b002      	add	sp, #8
 80014b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000

080014bc <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 80014bc:	4913      	ldr	r1, [pc, #76]	; (800150c <HAL_RCC_GetSysClockFreq+0x50>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014be:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 80014c0:	684c      	ldr	r4, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014c2:	f004 030c 	and.w	r3, r4, #12
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d11e      	bne.n	8001508 <HAL_RCC_GetSysClockFreq+0x4c>
 80014ca:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80014ce:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80014d2:	f404 1270 	and.w	r2, r4, #3932160	; 0x3c0000
 80014d6:	fab3 f383 	clz	r3, r3
 80014da:	fa22 f303 	lsr.w	r3, r2, r3
 80014de:	4a0c      	ldr	r2, [pc, #48]	; (8001510 <HAL_RCC_GetSysClockFreq+0x54>)
 80014e0:	5cd3      	ldrb	r3, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80014e2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80014e4:	210f      	movs	r1, #15
 80014e6:	fa91 f1a1 	rbit	r1, r1
 80014ea:	fab1 f181 	clz	r1, r1
 80014ee:	f002 020f 	and.w	r2, r2, #15
 80014f2:	40ca      	lsrs	r2, r1
 80014f4:	4907      	ldr	r1, [pc, #28]	; (8001514 <HAL_RCC_GetSysClockFreq+0x58>)
 80014f6:	5c88      	ldrb	r0, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80014f8:	03e2      	lsls	r2, r4, #15
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 80014fa:	bf52      	itee	pl
 80014fc:	4806      	ldrpl	r0, [pc, #24]	; (8001518 <HAL_RCC_GetSysClockFreq+0x5c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80014fe:	4a07      	ldrmi	r2, [pc, #28]	; (800151c <HAL_RCC_GetSysClockFreq+0x60>)
 8001500:	fbb2 f0f0 	udivmi	r0, r2, r0
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8001504:	4358      	muls	r0, r3
 8001506:	bd10      	pop	{r4, pc}
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001508:	4804      	ldr	r0, [pc, #16]	; (800151c <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800150a:	bd10      	pop	{r4, pc}
 800150c:	40021000 	.word	0x40021000
 8001510:	080021cc 	.word	0x080021cc
 8001514:	080021bc 	.word	0x080021bc
 8001518:	003d0900 	.word	0x003d0900
 800151c:	007a1200 	.word	0x007a1200

08001520 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001520:	4a54      	ldr	r2, [pc, #336]	; (8001674 <HAL_RCC_ClockConfig+0x154>)
 8001522:	6813      	ldr	r3, [r2, #0]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800152a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800152e:	4606      	mov	r6, r0
 8001530:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001532:	d30a      	bcc.n	800154a <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001534:	6831      	ldr	r1, [r6, #0]
 8001536:	078c      	lsls	r4, r1, #30
 8001538:	d514      	bpl.n	8001564 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800153a:	484f      	ldr	r0, [pc, #316]	; (8001678 <HAL_RCC_ClockConfig+0x158>)
 800153c:	6843      	ldr	r3, [r0, #4]
 800153e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001542:	68b3      	ldr	r3, [r6, #8]
 8001544:	4313      	orrs	r3, r2
 8001546:	6043      	str	r3, [r0, #4]
 8001548:	e00c      	b.n	8001564 <HAL_RCC_ClockConfig+0x44>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154a:	6813      	ldr	r3, [r2, #0]
 800154c:	f023 0307 	bic.w	r3, r3, #7
 8001550:	430b      	orrs	r3, r1
 8001552:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001554:	6813      	ldr	r3, [r2, #0]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	4299      	cmp	r1, r3
 800155c:	d0ea      	beq.n	8001534 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 800155e:	2001      	movs	r0, #1
 8001560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001564:	07c8      	lsls	r0, r1, #31
 8001566:	d406      	bmi.n	8001576 <HAL_RCC_ClockConfig+0x56>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001568:	4a42      	ldr	r2, [pc, #264]	; (8001674 <HAL_RCC_ClockConfig+0x154>)
 800156a:	6813      	ldr	r3, [r2, #0]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	429d      	cmp	r5, r3
 8001572:	d34a      	bcc.n	800160a <HAL_RCC_ClockConfig+0xea>
 8001574:	e053      	b.n	800161e <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001576:	6872      	ldr	r2, [r6, #4]
 8001578:	4c3f      	ldr	r4, [pc, #252]	; (8001678 <HAL_RCC_ClockConfig+0x158>)
 800157a:	2a01      	cmp	r2, #1
 800157c:	d102      	bne.n	8001584 <HAL_RCC_ClockConfig+0x64>
 800157e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001582:	e004      	b.n	800158e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001584:	2a02      	cmp	r2, #2
 8001586:	bf0c      	ite	eq
 8001588:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 800158c:	2302      	movne	r3, #2
 800158e:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001592:	6821      	ldr	r1, [r4, #0]
 8001594:	fa93 f3a3 	rbit	r3, r3
 8001598:	fab3 f383 	clz	r3, r3
 800159c:	f003 031f 	and.w	r3, r3, #31
 80015a0:	fa21 f303 	lsr.w	r3, r1, r3
 80015a4:	07d9      	lsls	r1, r3, #31
 80015a6:	d5da      	bpl.n	800155e <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015a8:	6863      	ldr	r3, [r4, #4]
 80015aa:	f023 0303 	bic.w	r3, r3, #3
 80015ae:	431a      	orrs	r2, r3
 80015b0:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015b2:	f7fe fe61 	bl	8000278 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015b6:	6873      	ldr	r3, [r6, #4]
 80015b8:	2b01      	cmp	r3, #1
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015ba:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015bc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015c0:	d10c      	bne.n	80015dc <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015c2:	6863      	ldr	r3, [r4, #4]
 80015c4:	f003 030c 	and.w	r3, r3, #12
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	d0cd      	beq.n	8001568 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015cc:	f7fe fe54 	bl	8000278 <HAL_GetTick>
 80015d0:	1bc0      	subs	r0, r0, r7
 80015d2:	4540      	cmp	r0, r8
 80015d4:	d9f5      	bls.n	80015c2 <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 80015d6:	2003      	movs	r0, #3
 80015d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d10f      	bne.n	8001600 <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015e0:	6863      	ldr	r3, [r4, #4]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d0be      	beq.n	8001568 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ea:	f7fe fe45 	bl	8000278 <HAL_GetTick>
 80015ee:	1bc0      	subs	r0, r0, r7
 80015f0:	4540      	cmp	r0, r8
 80015f2:	d9f5      	bls.n	80015e0 <HAL_RCC_ClockConfig+0xc0>
 80015f4:	e7ef      	b.n	80015d6 <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f6:	f7fe fe3f 	bl	8000278 <HAL_GetTick>
 80015fa:	1bc0      	subs	r0, r0, r7
 80015fc:	4540      	cmp	r0, r8
 80015fe:	d8ea      	bhi.n	80015d6 <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001600:	6863      	ldr	r3, [r4, #4]
 8001602:	f013 0f0c 	tst.w	r3, #12
 8001606:	d1f6      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xd6>
 8001608:	e7ae      	b.n	8001568 <HAL_RCC_ClockConfig+0x48>
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160a:	6813      	ldr	r3, [r2, #0]
 800160c:	f023 0307 	bic.w	r3, r3, #7
 8001610:	432b      	orrs	r3, r5
 8001612:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001614:	6813      	ldr	r3, [r2, #0]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	429d      	cmp	r5, r3
 800161c:	d19f      	bne.n	800155e <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800161e:	6831      	ldr	r1, [r6, #0]
 8001620:	4c15      	ldr	r4, [pc, #84]	; (8001678 <HAL_RCC_ClockConfig+0x158>)
 8001622:	f011 0f04 	tst.w	r1, #4
 8001626:	d005      	beq.n	8001634 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001628:	6863      	ldr	r3, [r4, #4]
 800162a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800162e:	68f3      	ldr	r3, [r6, #12]
 8001630:	4313      	orrs	r3, r2
 8001632:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001634:	070b      	lsls	r3, r1, #28
 8001636:	d506      	bpl.n	8001646 <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001638:	6863      	ldr	r3, [r4, #4]
 800163a:	6932      	ldr	r2, [r6, #16]
 800163c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001640:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001644:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001646:	f7ff ff39 	bl	80014bc <HAL_RCC_GetSysClockFreq>
 800164a:	6863      	ldr	r3, [r4, #4]
 800164c:	22f0      	movs	r2, #240	; 0xf0
 800164e:	fa92 f2a2 	rbit	r2, r2
 8001652:	fab2 f282 	clz	r2, r2
 8001656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800165a:	40d3      	lsrs	r3, r2
 800165c:	4a07      	ldr	r2, [pc, #28]	; (800167c <HAL_RCC_ClockConfig+0x15c>)
 800165e:	5cd3      	ldrb	r3, [r2, r3]
 8001660:	40d8      	lsrs	r0, r3
 8001662:	4b07      	ldr	r3, [pc, #28]	; (8001680 <HAL_RCC_ClockConfig+0x160>)
 8001664:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001666:	2000      	movs	r0, #0
 8001668:	f7fe fdd8 	bl	800021c <HAL_InitTick>
  
  return HAL_OK;
 800166c:	2000      	movs	r0, #0
}
 800166e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001672:	bf00      	nop
 8001674:	40022000 	.word	0x40022000
 8001678:	40021000 	.word	0x40021000
 800167c:	080021dc 	.word	0x080021dc
 8001680:	20000000 	.word	0x20000000

08001684 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001684:	4b01      	ldr	r3, [pc, #4]	; (800168c <HAL_RCC_GetHCLKFreq+0x8>)
 8001686:	6818      	ldr	r0, [r3, #0]
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	20000000 	.word	0x20000000

08001690 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001690:	6803      	ldr	r3, [r0, #0]
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001692:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001696:	03df      	lsls	r7, r3, #15
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001698:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800169a:	d579      	bpl.n	8001790 <HAL_RCCEx_PeriphCLKConfig+0x100>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800169c:	4d7a      	ldr	r5, [pc, #488]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800169e:	69eb      	ldr	r3, [r5, #28]
 80016a0:	00de      	lsls	r6, r3, #3
 80016a2:	d40a      	bmi.n	80016ba <HAL_RCCEx_PeriphCLKConfig+0x2a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a4:	69eb      	ldr	r3, [r5, #28]
 80016a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016aa:	61eb      	str	r3, [r5, #28]
 80016ac:	69eb      	ldr	r3, [r5, #28]
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80016b6:	2701      	movs	r7, #1
 80016b8:	e000      	b.n	80016bc <HAL_RCCEx_PeriphCLKConfig+0x2c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80016ba:	2700      	movs	r7, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016bc:	4e73      	ldr	r6, [pc, #460]	; (800188c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80016be:	6833      	ldr	r3, [r6, #0]
 80016c0:	05d8      	lsls	r0, r3, #23
 80016c2:	d505      	bpl.n	80016d0 <HAL_RCCEx_PeriphCLKConfig+0x40>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80016c4:	6a2b      	ldr	r3, [r5, #32]
 80016c6:	4870      	ldr	r0, [pc, #448]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016c8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80016cc:	d112      	bne.n	80016f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80016ce:	e016      	b.n	80016fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016d0:	6833      	ldr	r3, [r6, #0]
 80016d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d6:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d8:	f7fe fdce 	bl	8000278 <HAL_GetTick>
 80016dc:	4680      	mov	r8, r0
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016de:	6833      	ldr	r3, [r6, #0]
 80016e0:	05d9      	lsls	r1, r3, #23
 80016e2:	d4ef      	bmi.n	80016c4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e4:	f7fe fdc8 	bl	8000278 <HAL_GetTick>
 80016e8:	ebc8 0000 	rsb	r0, r8, r0
 80016ec:	2864      	cmp	r0, #100	; 0x64
 80016ee:	d9f6      	bls.n	80016de <HAL_RCCEx_PeriphCLKConfig+0x4e>
        {
          return HAL_TIMEOUT;
 80016f0:	2003      	movs	r0, #3
 80016f2:	e0c5      	b.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016f4:	6862      	ldr	r2, [r4, #4]
 80016f6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d10d      	bne.n	800171a <HAL_RCCEx_PeriphCLKConfig+0x8a>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80016fe:	6a2b      	ldr	r3, [r5, #32]
 8001700:	4961      	ldr	r1, [pc, #388]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001702:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001706:	6863      	ldr	r3, [r4, #4]
 8001708:	4313      	orrs	r3, r2
 800170a:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800170c:	2f00      	cmp	r7, #0
 800170e:	d03f      	beq.n	8001790 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001710:	69cb      	ldr	r3, [r1, #28]
 8001712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001716:	61cb      	str	r3, [r1, #28]
 8001718:	e03a      	b.n	8001790 <HAL_RCCEx_PeriphCLKConfig+0x100>
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800171a:	6a01      	ldr	r1, [r0, #32]
 800171c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001720:	f421 7e40 	bic.w	lr, r1, #768	; 0x300
 8001724:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001728:	4e59      	ldr	r6, [pc, #356]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800172a:	fab2 f282 	clz	r2, r2
 800172e:	f04f 0c01 	mov.w	ip, #1
 8001732:	f846 c022 	str.w	ip, [r6, r2, lsl #2]
 8001736:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800173a:	fab3 f383 	clz	r3, r3
 800173e:	2200      	movs	r2, #0
 8001740:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001744:	07ca      	lsls	r2, r1, #31
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001746:	f8c0 e020 	str.w	lr, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800174a:	d5d8      	bpl.n	80016fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174c:	f7fe fd94 	bl	8000278 <HAL_GetTick>
 8001750:	2602      	movs	r6, #2
 8001752:	4681      	mov	r9, r0
 8001754:	46b0      	mov	r8, r6
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001756:	f241 3a88 	movw	sl, #5000	; 0x1388
 800175a:	fa96 f3a6 	rbit	r3, r6
 800175e:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001762:	b10b      	cbz	r3, 8001768 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8001764:	6a2a      	ldr	r2, [r5, #32]
 8001766:	e002      	b.n	800176e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8001768:	fa96 f3a6 	rbit	r3, r6
 800176c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800176e:	fa98 f3a8 	rbit	r3, r8
 8001772:	fab3 f383 	clz	r3, r3
 8001776:	f003 031f 	and.w	r3, r3, #31
 800177a:	fa22 f303 	lsr.w	r3, r2, r3
 800177e:	07db      	lsls	r3, r3, #31
 8001780:	d4bd      	bmi.n	80016fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001782:	f7fe fd79 	bl	8000278 <HAL_GetTick>
 8001786:	ebc9 0000 	rsb	r0, r9, r0
 800178a:	4550      	cmp	r0, sl
 800178c:	d9e5      	bls.n	800175a <HAL_RCCEx_PeriphCLKConfig+0xca>
 800178e:	e7af      	b.n	80016f0 <HAL_RCCEx_PeriphCLKConfig+0x60>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001790:	6820      	ldr	r0, [r4, #0]
 8001792:	07c7      	lsls	r7, r0, #31
 8001794:	d506      	bpl.n	80017a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001796:	493c      	ldr	r1, [pc, #240]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001798:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800179a:	f023 0203 	bic.w	r2, r3, #3
 800179e:	68a3      	ldr	r3, [r4, #8]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80017a4:	0786      	lsls	r6, r0, #30
 80017a6:	d506      	bpl.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80017a8:	4937      	ldr	r1, [pc, #220]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017aa:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80017ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017b0:	68e3      	ldr	r3, [r4, #12]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80017b6:	0745      	lsls	r5, r0, #29
 80017b8:	d506      	bpl.n	80017c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80017ba:	4933      	ldr	r1, [pc, #204]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017bc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80017be:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80017c2:	6923      	ldr	r3, [r4, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80017c8:	0681      	lsls	r1, r0, #26
 80017ca:	d506      	bpl.n	80017da <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80017cc:	492e      	ldr	r1, [pc, #184]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017ce:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80017d0:	f023 0210 	bic.w	r2, r3, #16
 80017d4:	69e3      	ldr	r3, [r4, #28]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80017da:	0382      	lsls	r2, r0, #14
 80017dc:	d506      	bpl.n	80017ec <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80017de:	492a      	ldr	r1, [pc, #168]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017e0:	684b      	ldr	r3, [r1, #4]
 80017e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80017e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80017e8:	4313      	orrs	r3, r2
 80017ea:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80017ec:	0643      	lsls	r3, r0, #25
 80017ee:	d506      	bpl.n	80017fe <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80017f0:	4925      	ldr	r1, [pc, #148]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017f2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80017f4:	f023 0220 	bic.w	r2, r3, #32
 80017f8:	6a23      	ldr	r3, [r4, #32]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80017fe:	0707      	lsls	r7, r0, #28
 8001800:	d506      	bpl.n	8001810 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001802:	4921      	ldr	r1, [pc, #132]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001804:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001806:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800180a:	6963      	ldr	r3, [r4, #20]
 800180c:	4313      	orrs	r3, r2
 800180e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001810:	06c6      	lsls	r6, r0, #27
 8001812:	d506      	bpl.n	8001822 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001814:	491c      	ldr	r1, [pc, #112]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001816:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001818:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800181c:	69a3      	ldr	r3, [r4, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001822:	0585      	lsls	r5, r0, #22
 8001824:	d506      	bpl.n	8001834 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001826:	4918      	ldr	r1, [pc, #96]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001828:	684b      	ldr	r3, [r1, #4]
 800182a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800182e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001834:	0601      	lsls	r1, r0, #24
 8001836:	d506      	bpl.n	8001846 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001838:	4913      	ldr	r1, [pc, #76]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800183a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800183c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8001840:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001842:	4313      	orrs	r3, r2
 8001844:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001846:	05c2      	lsls	r2, r0, #23
 8001848:	d506      	bpl.n	8001858 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800184a:	490f      	ldr	r1, [pc, #60]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800184c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800184e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8001852:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001854:	4313      	orrs	r3, r2
 8001856:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001858:	04c3      	lsls	r3, r0, #19
 800185a:	d506      	bpl.n	800186a <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800185c:	490a      	ldr	r1, [pc, #40]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800185e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001860:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001864:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001866:	4313      	orrs	r3, r2
 8001868:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800186a:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 800186e:	d007      	beq.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001870:	4905      	ldr	r1, [pc, #20]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001872:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001874:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001878:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800187a:	4313      	orrs	r3, r2
 800187c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800187e:	2000      	movs	r0, #0
}
 8001880:	b002      	add	sp, #8
 8001882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000
 800188c:	40007000 	.word	0x40007000
 8001890:	42420400 	.word	0x42420400

08001894 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001894:	6803      	ldr	r3, [r0, #0]
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	f042 0201 	orr.w	r2, r2, #1
 800189c:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	f042 0201 	orr.w	r2, r2, #1
 80018a4:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 80018a6:	2000      	movs	r0, #0
 80018a8:	4770      	bx	lr

080018aa <HAL_TIM_OC_DelayElapsedCallback>:
 80018aa:	4770      	bx	lr

080018ac <HAL_TIM_IC_CaptureCallback>:
 80018ac:	4770      	bx	lr

080018ae <HAL_TIM_PWM_PulseFinishedCallback>:
 80018ae:	4770      	bx	lr

080018b0 <HAL_TIM_TriggerCallback>:
 80018b0:	4770      	bx	lr

080018b2 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018b2:	6803      	ldr	r3, [r0, #0]
 80018b4:	691a      	ldr	r2, [r3, #16]
 80018b6:	0791      	lsls	r1, r2, #30
  * @brief  This function handles TIM interrupts requests.
  * @param  htim: TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018b8:	b510      	push	{r4, lr}
 80018ba:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018bc:	d514      	bpl.n	80018e8 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	0792      	lsls	r2, r2, #30
 80018c2:	d511      	bpl.n	80018e8 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018c4:	f06f 0202 	mvn.w	r2, #2
 80018c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80018ca:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018cc:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80018ce:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018d0:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80018d2:	d002      	beq.n	80018da <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80018d4:	f7ff ffea 	bl	80018ac <HAL_TIM_IC_CaptureCallback>
 80018d8:	e004      	b.n	80018e4 <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018da:	f7ff ffe6 	bl	80018aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018de:	4620      	mov	r0, r4
 80018e0:	f7ff ffe5 	bl	80018ae <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018e4:	2300      	movs	r3, #0
 80018e6:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018e8:	6823      	ldr	r3, [r4, #0]
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	0750      	lsls	r0, r2, #29
 80018ee:	d516      	bpl.n	800191e <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	0751      	lsls	r1, r2, #29
 80018f4:	d513      	bpl.n	800191e <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018f6:	f06f 0204 	mvn.w	r2, #4
 80018fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80018fc:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018fe:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001900:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001904:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001906:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001908:	d002      	beq.n	8001910 <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800190a:	f7ff ffcf 	bl	80018ac <HAL_TIM_IC_CaptureCallback>
 800190e:	e004      	b.n	800191a <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001910:	f7ff ffcb 	bl	80018aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001914:	4620      	mov	r0, r4
 8001916:	f7ff ffca 	bl	80018ae <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800191a:	2300      	movs	r3, #0
 800191c:	7623      	strb	r3, [r4, #24]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800191e:	6823      	ldr	r3, [r4, #0]
 8001920:	691a      	ldr	r2, [r3, #16]
 8001922:	0712      	lsls	r2, r2, #28
 8001924:	d515      	bpl.n	8001952 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	0710      	lsls	r0, r2, #28
 800192a:	d512      	bpl.n	8001952 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800192c:	f06f 0208 	mvn.w	r2, #8
 8001930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001932:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001934:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001936:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001938:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800193a:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800193c:	d002      	beq.n	8001944 <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800193e:	f7ff ffb5 	bl	80018ac <HAL_TIM_IC_CaptureCallback>
 8001942:	e004      	b.n	800194e <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001944:	f7ff ffb1 	bl	80018aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001948:	4620      	mov	r0, r4
 800194a:	f7ff ffb0 	bl	80018ae <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800194e:	2300      	movs	r3, #0
 8001950:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001952:	6823      	ldr	r3, [r4, #0]
 8001954:	691a      	ldr	r2, [r3, #16]
 8001956:	06d2      	lsls	r2, r2, #27
 8001958:	d516      	bpl.n	8001988 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	06d0      	lsls	r0, r2, #27
 800195e:	d513      	bpl.n	8001988 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001960:	f06f 0210 	mvn.w	r2, #16
 8001964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001966:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001968:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800196a:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800196e:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001970:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001972:	d002      	beq.n	800197a <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001974:	f7ff ff9a 	bl	80018ac <HAL_TIM_IC_CaptureCallback>
 8001978:	e004      	b.n	8001984 <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800197a:	f7ff ff96 	bl	80018aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800197e:	4620      	mov	r0, r4
 8001980:	f7ff ff95 	bl	80018ae <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001984:	2300      	movs	r3, #0
 8001986:	7623      	strb	r3, [r4, #24]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	691a      	ldr	r2, [r3, #16]
 800198c:	07d1      	lsls	r1, r2, #31
 800198e:	d508      	bpl.n	80019a2 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	07d2      	lsls	r2, r2, #31
 8001994:	d505      	bpl.n	80019a2 <HAL_TIM_IRQHandler+0xf0>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001996:	f06f 0201 	mvn.w	r2, #1
 800199a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800199c:	4620      	mov	r0, r4
 800199e:	f000 f989 	bl	8001cb4 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019a2:	6823      	ldr	r3, [r4, #0]
 80019a4:	691a      	ldr	r2, [r3, #16]
 80019a6:	0610      	lsls	r0, r2, #24
 80019a8:	d508      	bpl.n	80019bc <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	0611      	lsls	r1, r2, #24
 80019ae:	d505      	bpl.n	80019bc <HAL_TIM_IRQHandler+0x10a>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019b4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80019b6:	4620      	mov	r0, r4
 80019b8:	f000 f97b 	bl	8001cb2 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019bc:	6823      	ldr	r3, [r4, #0]
 80019be:	691a      	ldr	r2, [r3, #16]
 80019c0:	0652      	lsls	r2, r2, #25
 80019c2:	d508      	bpl.n	80019d6 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	0650      	lsls	r0, r2, #25
 80019c8:	d505      	bpl.n	80019d6 <HAL_TIM_IRQHandler+0x124>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80019ce:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80019d0:	4620      	mov	r0, r4
 80019d2:	f7ff ff6d 	bl	80018b0 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80019d6:	6823      	ldr	r3, [r4, #0]
 80019d8:	691a      	ldr	r2, [r3, #16]
 80019da:	0691      	lsls	r1, r2, #26
 80019dc:	d50a      	bpl.n	80019f4 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	0692      	lsls	r2, r2, #26
 80019e2:	d507      	bpl.n	80019f4 <HAL_TIM_IRQHandler+0x142>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019e4:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80019e8:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019ea:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 80019ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 80019f0:	f000 b95e 	b.w	8001cb0 <HAL_TIMEx_CommutationCallback>
 80019f4:	bd10      	pop	{r4, pc}
	...

080019f8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019f8:	4a2a      	ldr	r2, [pc, #168]	; (8001aa4 <TIM_Base_SetConfig+0xac>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 80019fa:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019fc:	4290      	cmp	r0, r2
 80019fe:	d00e      	beq.n	8001a1e <TIM_Base_SetConfig+0x26>
 8001a00:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a04:	d00b      	beq.n	8001a1e <TIM_Base_SetConfig+0x26>
 8001a06:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001a0a:	4290      	cmp	r0, r2
 8001a0c:	d007      	beq.n	8001a1e <TIM_Base_SetConfig+0x26>
 8001a0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a12:	4290      	cmp	r0, r2
 8001a14:	d003      	beq.n	8001a1e <TIM_Base_SetConfig+0x26>
 8001a16:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8001a1a:	4290      	cmp	r0, r2
 8001a1c:	d115      	bne.n	8001a4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001a1e:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001a24:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a26:	4a1f      	ldr	r2, [pc, #124]	; (8001aa4 <TIM_Base_SetConfig+0xac>)
 8001a28:	4290      	cmp	r0, r2
 8001a2a:	d019      	beq.n	8001a60 <TIM_Base_SetConfig+0x68>
 8001a2c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a30:	d016      	beq.n	8001a60 <TIM_Base_SetConfig+0x68>
 8001a32:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001a36:	4290      	cmp	r0, r2
 8001a38:	d012      	beq.n	8001a60 <TIM_Base_SetConfig+0x68>
 8001a3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a3e:	4290      	cmp	r0, r2
 8001a40:	d00e      	beq.n	8001a60 <TIM_Base_SetConfig+0x68>
 8001a42:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8001a46:	4290      	cmp	r0, r2
 8001a48:	d00a      	beq.n	8001a60 <TIM_Base_SetConfig+0x68>
 8001a4a:	4a17      	ldr	r2, [pc, #92]	; (8001aa8 <TIM_Base_SetConfig+0xb0>)
 8001a4c:	4290      	cmp	r0, r2
 8001a4e:	d007      	beq.n	8001a60 <TIM_Base_SetConfig+0x68>
 8001a50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a54:	4290      	cmp	r0, r2
 8001a56:	d003      	beq.n	8001a60 <TIM_Base_SetConfig+0x68>
 8001a58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a5c:	4290      	cmp	r0, r2
 8001a5e:	d103      	bne.n	8001a68 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a60:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a66:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8001a68:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a6a:	688b      	ldr	r3, [r1, #8]
 8001a6c:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001a6e:	680b      	ldr	r3, [r1, #0]
 8001a70:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001a72:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <TIM_Base_SetConfig+0xac>)
 8001a74:	4298      	cmp	r0, r3
 8001a76:	d00f      	beq.n	8001a98 <TIM_Base_SetConfig+0xa0>
 8001a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a7c:	4298      	cmp	r0, r3
 8001a7e:	d00b      	beq.n	8001a98 <TIM_Base_SetConfig+0xa0>
 8001a80:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001a84:	4298      	cmp	r0, r3
 8001a86:	d007      	beq.n	8001a98 <TIM_Base_SetConfig+0xa0>
 8001a88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a8c:	4298      	cmp	r0, r3
 8001a8e:	d003      	beq.n	8001a98 <TIM_Base_SetConfig+0xa0>
 8001a90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a94:	4298      	cmp	r0, r3
 8001a96:	d101      	bne.n	8001a9c <TIM_Base_SetConfig+0xa4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a98:	690b      	ldr	r3, [r1, #16]
 8001a9a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	6143      	str	r3, [r0, #20]
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40012c00 	.word	0x40012c00
 8001aa8:	40014000 	.word	0x40014000

08001aac <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim: TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001aac:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001aae:	4604      	mov	r4, r0
 8001ab0:	b1a0      	cbz	r0, 8001adc <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8001ab2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001ab6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001aba:	b91b      	cbnz	r3, 8001ac4 <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001abc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ac0:	f000 faea 	bl	8002098 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001aca:	6820      	ldr	r0, [r4, #0]
 8001acc:	1d21      	adds	r1, r4, #4
 8001ace:	f7ff ff93 	bl	80019f8 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8001ad8:	2000      	movs	r0, #0
 8001ada:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001adc:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8001ade:	bd10      	pop	{r4, pc}

08001ae0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001ae0:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8001ae2:	6884      	ldr	r4, [r0, #8]
 8001ae4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8001ae8:	4321      	orrs	r1, r4
 8001aea:	430a      	orrs	r2, r1

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001aec:	ea42 2303 	orr.w	r3, r2, r3, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001af0:	6083      	str	r3, [r0, #8]
 8001af2:	bd10      	pop	{r4, pc}

08001af4 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0;
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8001af4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001af8:	2b01      	cmp	r3, #1
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8001afa:	b570      	push	{r4, r5, r6, lr}
 8001afc:	4604      	mov	r4, r0
 8001afe:	f04f 0002 	mov.w	r0, #2
  uint32_t tmpsmcr = 0;
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8001b02:	f000 80ab 	beq.w	8001c5c <HAL_TIM_ConfigClockSource+0x168>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001b06:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b0a:	6820      	ldr	r0, [r4, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0;
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b12:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b14:	4b52      	ldr	r3, [pc, #328]	; (8001c60 <HAL_TIM_ConfigClockSource+0x16c>)
 8001b16:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8001b18:	6083      	str	r3, [r0, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8001b1a:	680b      	ldr	r3, [r1, #0]
 8001b1c:	2b40      	cmp	r3, #64	; 0x40
 8001b1e:	d074      	beq.n	8001c0a <HAL_TIM_ConfigClockSource+0x116>
 8001b20:	d818      	bhi.n	8001b54 <HAL_TIM_ConfigClockSource+0x60>
 8001b22:	2b10      	cmp	r3, #16
 8001b24:	f000 8088 	beq.w	8001c38 <HAL_TIM_ConfigClockSource+0x144>
 8001b28:	d808      	bhi.n	8001b3c <HAL_TIM_ConfigClockSource+0x48>
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f040 8090 	bne.w	8001c50 <HAL_TIM_ConfigClockSource+0x15c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001b30:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001b36:	f043 0307 	orr.w	r3, r3, #7
 8001b3a:	e088      	b.n	8001c4e <HAL_TIM_ConfigClockSource+0x15a>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8001b3c:	2b20      	cmp	r3, #32
 8001b3e:	f000 8081 	beq.w	8001c44 <HAL_TIM_ConfigClockSource+0x150>
 8001b42:	2b30      	cmp	r3, #48	; 0x30
 8001b44:	f040 8084 	bne.w	8001c50 <HAL_TIM_ConfigClockSource+0x15c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001b48:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001b4e:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8001b52:	e07c      	b.n	8001c4e <HAL_TIM_ConfigClockSource+0x15a>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8001b54:	2b70      	cmp	r3, #112	; 0x70
 8001b56:	d032      	beq.n	8001bbe <HAL_TIM_ConfigClockSource+0xca>
 8001b58:	d81b      	bhi.n	8001b92 <HAL_TIM_ConfigClockSource+0x9e>
 8001b5a:	2b50      	cmp	r3, #80	; 0x50
 8001b5c:	d03e      	beq.n	8001bdc <HAL_TIM_ConfigClockSource+0xe8>
 8001b5e:	2b60      	cmp	r3, #96	; 0x60
 8001b60:	d176      	bne.n	8001c50 <HAL_TIM_ConfigClockSource+0x15c>
      
       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001b62:	684d      	ldr	r5, [r1, #4]
 8001b64:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b66:	6a01      	ldr	r1, [r0, #32]
 8001b68:	f021 0110 	bic.w	r1, r1, #16
 8001b6c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b6e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001b70:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001b72:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001b76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 8001b7a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12);
 8001b7e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001b82:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001b84:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001b86:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001b8c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001b90:	e05d      	b.n	8001c4e <HAL_TIM_ConfigClockSource+0x15a>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8001b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b96:	d00c      	beq.n	8001bb2 <HAL_TIM_ConfigClockSource+0xbe>
 8001b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b9c:	d158      	bne.n	8001c50 <HAL_TIM_ConfigClockSource+0x15c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance, 
 8001b9e:	68cb      	ldr	r3, [r1, #12]
 8001ba0:	684a      	ldr	r2, [r1, #4]
 8001ba2:	6889      	ldr	r1, [r1, #8]
 8001ba4:	f7ff ff9c 	bl	8001ae0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ba8:	6822      	ldr	r2, [r4, #0]
 8001baa:	6893      	ldr	r3, [r2, #8]
 8001bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb0:	e012      	b.n	8001bd8 <HAL_TIM_ConfigClockSource+0xe4>
  {
  case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));      
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001bb2:	6883      	ldr	r3, [r0, #8]
 8001bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb8:	f023 0307 	bic.w	r3, r3, #7
 8001bbc:	e047      	b.n	8001c4e <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance, 
 8001bbe:	68cb      	ldr	r3, [r1, #12]
 8001bc0:	684a      	ldr	r2, [r1, #4]
 8001bc2:	6889      	ldr	r1, [r1, #8]
 8001bc4:	f7ff ff8c 	bl	8001ae0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity, 
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 8001bc8:	6822      	ldr	r2, [r4, #0]
 8001bca:	6893      	ldr	r3, [r2, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001bd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      TIM_ETR_SetConfig(htim->Instance, 
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001bd8:	6093      	str	r3, [r2, #8]
    }
    break;
 8001bda:	e039      	b.n	8001c50 <HAL_TIM_ConfigClockSource+0x15c>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001bdc:	6a03      	ldr	r3, [r0, #32]
      
      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001bde:	684d      	ldr	r5, [r1, #4]
 8001be0:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001be2:	6a01      	ldr	r1, [r0, #32]
 8001be4:	f021 0101 	bic.w	r1, r1, #1
 8001be8:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001bea:	6982      	ldr	r2, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001bec:	f023 030a 	bic.w	r3, r3, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001bf0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8001bf4:	432b      	orrs	r3, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 8001bf6:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001bfa:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001bfc:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001bfe:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001c04:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8001c08:	e021      	b.n	8001c4e <HAL_TIM_ConfigClockSource+0x15a>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c0a:	6a03      	ldr	r3, [r0, #32]
      
      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001c0c:	684d      	ldr	r5, [r1, #4]
 8001c0e:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c10:	6a01      	ldr	r1, [r0, #32]
 8001c12:	f021 0101 	bic.w	r1, r1, #1
 8001c16:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001c18:	6982      	ldr	r2, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c1a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c1e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8001c22:	432b      	orrs	r3, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 8001c24:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001c28:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001c2a:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001c2c:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001c32:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001c36:	e00a      	b.n	8001c4e <HAL_TIM_ConfigClockSource+0x15a>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001c38:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001c3e:	f043 0317 	orr.w	r3, r3, #23
 8001c42:	e004      	b.n	8001c4e <HAL_TIM_ConfigClockSource+0x15a>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001c44:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001c4a:	f043 0327 	orr.w	r3, r3, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001c4e:	6083      	str	r3, [r0, #8]
    break;
    
  default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c50:	2301      	movs	r3, #1
  
  __HAL_UNLOCK(htim);
 8001c52:	2000      	movs	r0, #0
    break;
    
  default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c54:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001c58:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 8001c5c:	bd70      	pop	{r4, r5, r6, pc}
 8001c5e:	bf00      	nop
 8001c60:	fffe0088 	.word	0xfffe0088

08001c64 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001c64:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001c68:	2b01      	cmp	r3, #1
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001c6a:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001c6c:	d01c      	beq.n	8001ca8 <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001c6e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001c70:	4c0e      	ldr	r4, [pc, #56]	; (8001cac <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  
  /* Check input state */
  __HAL_LOCK(htim);

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001c72:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001c74:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001c76:	42a2      	cmp	r2, r4
 8001c78:	d003      	beq.n	8001c82 <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 8001c7a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8001c7e:	42a2      	cmp	r2, r4
 8001c80:	d103      	bne.n	8001c8a <HAL_TIMEx_MasterConfigSynchronization+0x26>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001c82:	684c      	ldr	r4, [r1, #4]
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001c84:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001c88:	4323      	orrs	r3, r4
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c8a:	680c      	ldr	r4, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c8c:	6889      	ldr	r1, [r1, #8]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c92:	4323      	orrs	r3, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001c94:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001c98:	6053      	str	r3, [r2, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c9a:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8001c9c:	2300      	movs	r3, #0
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001c9e:	6091      	str	r1, [r2, #8]

  __HAL_UNLOCK(htim);
 8001ca0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001ca8:	2002      	movs	r0, #2
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 8001caa:	bd30      	pop	{r4, r5, pc}
 8001cac:	40012c00 	.word	0x40012c00

08001cb0 <HAL_TIMEx_CommutationCallback>:
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_TIM_PeriodElapsedCallback>:
 *
 * RETURNS		: void

 */
void  HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cb4:	b507      	push	{r0, r1, r2, lr}
	volatile int result = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	9301      	str	r3, [sp, #4]
	if(htim ->Instance == TIM3)    // Rather than continuosly recieving analog values, the timer interrupt allows to read the analog data only when 
 8001cba:	6802      	ldr	r2, [r0, #0]
 8001cbc:	4b2a      	ldr	r3, [pc, #168]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d14e      	bne.n	8001d60 <HAL_TIM_PeriodElapsedCallback+0xac>
								   // timer flag is set, thus freeing the processor from polling and also allow us to determine the rate at which 
								   // the analog data should be recieved or checked
	{

		 HAL_ADC_Start(&hadc1);
 8001cc2:	482a      	ldr	r0, [pc, #168]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001cc4:	f7fe fcba 	bl	800063c <HAL_ADC_Start>
		 HAL_ADC_PollForConversion(&hadc1,5000);
 8001cc8:	f241 3188 	movw	r1, #5000	; 0x1388
 8001ccc:	4827      	ldr	r0, [pc, #156]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001cce:	f7fe fd8b 	bl	80007e8 <HAL_ADC_PollForConversion>
	     result = HAL_ADC_GetValue(&hadc1);
 8001cd2:	4826      	ldr	r0, [pc, #152]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001cd4:	f7fe fe26 	bl	8000924 <HAL_ADC_GetValue>
 8001cd8:	9001      	str	r0, [sp, #4]
		 HAL_ADC_Stop(&hadc1);
 8001cda:	4824      	ldr	r0, [pc, #144]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001cdc:	f7fe fd64 	bl	80007a8 <HAL_ADC_Stop>

			 if(result >= 0 && result <= 1000)   			  // Recieved ADC value range is between 0 and 1000
 8001ce0:	9b01      	ldr	r3, [sp, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	db07      	blt.n	8001cf6 <HAL_TIM_PeriodElapsedCallback+0x42>
 8001ce6:	9b01      	ldr	r3, [sp, #4]
 8001ce8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cec:	dc03      	bgt.n	8001cf6 <HAL_TIM_PeriodElapsedCallback+0x42>
			 {
			  	  	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,1);
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cf4:	e031      	b.n	8001d5a <HAL_TIM_PeriodElapsedCallback+0xa6>
				  	 
   			 }

			  else if(result >= 1001 && result <= 2000 )      // Recieved ADC value range is between 1001 and 2000
 8001cf6:	9b01      	ldr	r3, [sp, #4]
 8001cf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cfc:	dd07      	ble.n	8001d0e <HAL_TIM_PeriodElapsedCallback+0x5a>
 8001cfe:	9b01      	ldr	r3, [sp, #4]
 8001d00:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d04:	dc03      	bgt.n	8001d0e <HAL_TIM_PeriodElapsedCallback+0x5a>
			  {
				  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,1);
 8001d06:	2201      	movs	r2, #1
 8001d08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d0c:	e025      	b.n	8001d5a <HAL_TIM_PeriodElapsedCallback+0xa6>
				  	 
			  }
			  else if( result >= 2001 && result <= 3000) 	  // Recieved ADC value range is between 2001 and 3000
 8001d0e:	9b01      	ldr	r3, [sp, #4]
 8001d10:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d14:	dd08      	ble.n	8001d28 <HAL_TIM_PeriodElapsedCallback+0x74>
 8001d16:	9a01      	ldr	r2, [sp, #4]
 8001d18:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	dc03      	bgt.n	8001d28 <HAL_TIM_PeriodElapsedCallback+0x74>
			 	  {
				  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,1);
 8001d20:	2201      	movs	r2, #1
 8001d22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d26:	e018      	b.n	8001d5a <HAL_TIM_PeriodElapsedCallback+0xa6>
				  	
			 	  }
			  else if(result >= 3001 && result <= 4000)		// Recieved ADC value range is between 3001 and 4000
 8001d28:	9a01      	ldr	r2, [sp, #4]
 8001d2a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	dd07      	ble.n	8001d42 <HAL_TIM_PeriodElapsedCallback+0x8e>
 8001d32:	9b01      	ldr	r3, [sp, #4]
 8001d34:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001d38:	dc03      	bgt.n	8001d42 <HAL_TIM_PeriodElapsedCallback+0x8e>
			 	  {
				  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,1);
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d40:	e00b      	b.n	8001d5a <HAL_TIM_PeriodElapsedCallback+0xa6>
				   
			 	  }
			  else if(result >= 4001 && result <= 5000 )	// Recieved ADC value range is between 4001 and 5000
 8001d42:	9b01      	ldr	r3, [sp, #4]
 8001d44:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001d48:	dd0a      	ble.n	8001d60 <HAL_TIM_PeriodElapsedCallback+0xac>
 8001d4a:	9a01      	ldr	r2, [sp, #4]
 8001d4c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d50:	429a      	cmp	r2, r3
 8001d52:	dc05      	bgt.n	8001d60 <HAL_TIM_PeriodElapsedCallback+0xac>
			 	  {
				  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_14,1);
 8001d54:	2201      	movs	r2, #1
 8001d56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d5a:	4805      	ldr	r0, [pc, #20]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001d5c:	f7ff f942 	bl	8000fe4 <HAL_GPIO_WritePin>
				  	 	  
			 	  }
	}
}
 8001d60:	b003      	add	sp, #12
 8001d62:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d66:	bf00      	nop
 8001d68:	40000400 	.word	0x40000400
 8001d6c:	20000074 	.word	0x20000074
 8001d70:	48001000 	.word	0x48001000

08001d74 <initEport>:


void initEport( )
{

		__GPIOE_CLK_ENABLE( );
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <initEport+0x34>)

       */


void initEport( )
{
 8001d76:	b507      	push	{r0, r1, r2, lr}

		__GPIOE_CLK_ENABLE( );
 8001d78:	695a      	ldr	r2, [r3, #20]

		GPIO_InitStruct.Pin = ( GPIO_PIN_15 | GPIO_PIN_14 | GPIO_PIN_13 | GPIO_PIN_12
 8001d7a:	490c      	ldr	r1, [pc, #48]	; (8001dac <initEport+0x38>)
				| GPIO_PIN_11 | GPIO_PIN_10 | GPIO_PIN_9 | GPIO_PIN_8 );
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
		GPIO_InitStruct.Pull = GPIO_PULLUP;
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;

		HAL_GPIO_Init( GPIOE, &GPIO_InitStruct );
 8001d7c:	480c      	ldr	r0, [pc, #48]	; (8001db0 <initEport+0x3c>)


void initEport( )
{

		__GPIOE_CLK_ENABLE( );
 8001d7e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001d82:	615a      	str	r2, [r3, #20]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d8a:	9301      	str	r3, [sp, #4]
 8001d8c:	9b01      	ldr	r3, [sp, #4]

		GPIO_InitStruct.Pin = ( GPIO_PIN_15 | GPIO_PIN_14 | GPIO_PIN_13 | GPIO_PIN_12
 8001d8e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001d92:	600b      	str	r3, [r1, #0]
				| GPIO_PIN_11 | GPIO_PIN_10 | GPIO_PIN_9 | GPIO_PIN_8 );
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d94:	2301      	movs	r3, #1
 8001d96:	604b      	str	r3, [r1, #4]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d98:	608b      	str	r3, [r1, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	60cb      	str	r3, [r1, #12]

		HAL_GPIO_Init( GPIOE, &GPIO_InitStruct );
 8001d9e:	f7ff f857 	bl	8000e50 <HAL_GPIO_Init>

}
 8001da2:	b003      	add	sp, #12
 8001da4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001da8:	40021000 	.word	0x40021000
 8001dac:	20000020 	.word	0x20000020
 8001db0:	48001000 	.word	0x48001000

08001db4 <SystemClock_Config>:
/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001db4:	b530      	push	{r4, r5, lr}
 8001db6:	b09f      	sub	sp, #124	; 0x7c

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001db8:	2310      	movs	r3, #16
 8001dba:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dbc:	2300      	movs	r3, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dbe:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dc0:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dc2:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dc4:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001dc6:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dca:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dcc:	9509      	str	r5, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dce:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001dd0:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dd2:	f7ff f90d 	bl	8000ff0 <HAL_RCC_OscConfig>
 8001dd6:	b100      	cbz	r0, 8001dda <SystemClock_Config+0x26>
 8001dd8:	e7fe      	b.n	8001dd8 <SystemClock_Config+0x24>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dda:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ddc:	e88d 0018 	stmia.w	sp, {r3, r4}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de0:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001de6:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001de8:	4629      	mov	r1, r5
 8001dea:	4668      	mov	r0, sp
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dec:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001dee:	f7ff fb97 	bl	8001520 <HAL_RCC_ClockConfig>
 8001df2:	b100      	cbz	r0, 8001df6 <SystemClock_Config+0x42>
 8001df4:	e7fe      	b.n	8001df4 <SystemClock_Config+0x40>
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	930f      	str	r3, [sp, #60]	; 0x3c
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dfa:	a80f      	add	r0, sp, #60	; 0x3c
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e00:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e02:	f7ff fc45 	bl	8001690 <HAL_RCCEx_PeriphCLKConfig>
 8001e06:	4604      	mov	r4, r0
 8001e08:	b100      	cbz	r0, 8001e0c <SystemClock_Config+0x58>
 8001e0a:	e7fe      	b.n	8001e0a <SystemClock_Config+0x56>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001e0c:	f7ff fc3a 	bl	8001684 <HAL_RCC_GetHCLKFreq>
 8001e10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e14:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e18:	f7fe fff2 	bl	8000e00 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001e1c:	2004      	movs	r0, #4
 8001e1e:	f7ff f805 	bl	8000e2c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001e22:	4622      	mov	r2, r4
 8001e24:	4621      	mov	r1, r4
 8001e26:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2a:	f7fe ffa9 	bl	8000d80 <HAL_NVIC_SetPriority>
}
 8001e2e:	b01f      	add	sp, #124	; 0x7c
 8001e30:	bd30      	pop	{r4, r5, pc}
	...

08001e34 <main>:
 *
 * RETURNS		: integer

 */
int main(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08e      	sub	sp, #56	; 0x38

  
  HAL_Init();
 8001e38:	f7fe fa04 	bl	8000244 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001e3c:	f7ff ffba 	bl	8001db4 <SystemClock_Config>
  initEport();
 8001e40:	f7ff ff98 	bl	8001d74 <initEport>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e44:	4b5e      	ldr	r3, [pc, #376]	; (8001fc0 <main+0x18c>)
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin 
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e46:	485f      	ldr	r0, [pc, #380]	; (8001fc4 <main+0x190>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e48:	695a      	ldr	r2, [r3, #20]
 8001e4a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001e4e:	615a      	str	r2, [r3, #20]
 8001e50:	695a      	ldr	r2, [r3, #20]
 8001e52:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001e56:	9200      	str	r2, [sp, #0]
 8001e58:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5a:	695a      	ldr	r2, [r3, #20]
 8001e5c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001e60:	615a      	str	r2, [r3, #20]
 8001e62:	695a      	ldr	r2, [r3, #20]
 8001e64:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001e68:	9201      	str	r2, [sp, #4]
 8001e6a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e6c:	695a      	ldr	r2, [r3, #20]
 8001e6e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001e72:	615a      	str	r2, [r3, #20]
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001e7a:	9202      	str	r2, [sp, #8]
 8001e7c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	695a      	ldr	r2, [r3, #20]
 8001e80:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001e84:	615a      	str	r2, [r3, #20]
 8001e86:	695a      	ldr	r2, [r3, #20]
 8001e88:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001e8c:	9203      	str	r2, [sp, #12]
 8001e8e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e90:	695a      	ldr	r2, [r3, #20]
 8001e92:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001e96:	615a      	str	r2, [r3, #20]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e9e:	9304      	str	r3, [sp, #16]
 8001ea0:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin 
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin 
 8001ea2:	2337      	movs	r3, #55	; 0x37
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin 
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin 
 8001ea6:	9308      	str	r3, [sp, #32]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ea8:	a908      	add	r1, sp, #32

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin 
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin 
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001eaa:	4b47      	ldr	r3, [pc, #284]	; (8001fc8 <main+0x194>)
 8001eac:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin 
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin 
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 8001eae:	f64f 7508 	movw	r5, #65288	; 0xff08
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb2:	2601      	movs	r6, #1
  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin 
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin 
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eb6:	f7fe ffcb 	bl	8000e50 <HAL_GPIO_Init>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eba:	a908      	add	r1, sp, #32
 8001ebc:	4841      	ldr	r0, [pc, #260]	; (8001fc4 <main+0x190>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin 
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin 
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 8001ebe:	9508      	str	r5, [sp, #32]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec0:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec4:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ec6:	f7fe ffc3 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001eca:	23e0      	movs	r3, #224	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ecc:	2702      	movs	r7, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001ece:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed0:	a908      	add	r1, sp, #32
  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ed2:	2305      	movs	r3, #5
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eda:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee0:	f7fe ffb6 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001ee4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ee8:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eea:	2303      	movs	r3, #3
 8001eec:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eee:	a908      	add	r1, sp, #32
  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001ef0:	230e      	movs	r3, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef6:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001ef8:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efc:	f7fe ffa8 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001f00:	23c0      	movs	r3, #192	; 0xc0
 8001f02:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f04:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f06:	2312      	movs	r3, #18
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f08:	4830      	ldr	r0, [pc, #192]	; (8001fcc <main+0x198>)
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f0a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f0c:	2704      	movs	r7, #4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f0e:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f10:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f12:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f14:	f7fe ff9c 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 8001f18:	4622      	mov	r2, r4
 8001f1a:	4629      	mov	r1, r5
 8001f1c:	4829      	ldr	r0, [pc, #164]	; (8001fc4 <main+0x190>)
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 8001f1e:	4d2c      	ldr	r5, [pc, #176]	; (8001fd0 <main+0x19c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 8001f20:	f7ff f860 	bl	8000fe4 <HAL_GPIO_WritePin>

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 48000;
 8001f24:	4a2b      	ldr	r2, [pc, #172]	; (8001fd4 <main+0x1a0>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f26:	60ac      	str	r4, [r5, #8]

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 48000;
 8001f28:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8001f2c:	e885 000c 	stmia.w	r5, {r2, r3}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 10000;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f30:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 48000;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 10000;
 8001f32:	f242 7310 	movw	r3, #10000	; 0x2710
 8001f36:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f38:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f3a:	f7ff fdb7 	bl	8001aac <HAL_TIM_Base_Init>
 8001f3e:	b100      	cbz	r0, 8001f42 <main+0x10e>
 8001f40:	e7fe      	b.n	8001f40 <main+0x10c>
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f46:	a908      	add	r1, sp, #32
 8001f48:	4628      	mov	r0, r5
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f4a:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f4c:	f7ff fdd2 	bl	8001af4 <HAL_TIM_ConfigClockSource>
 8001f50:	b100      	cbz	r0, 8001f54 <main+0x120>
 8001f52:	e7fe      	b.n	8001f52 <main+0x11e>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f54:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f56:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f58:	a905      	add	r1, sp, #20
 8001f5a:	4628      	mov	r0, r5
 8001f5c:	f7ff fe82 	bl	8001c64 <HAL_TIMEx_MasterConfigSynchronization>
 8001f60:	b100      	cbz	r0, 8001f64 <main+0x130>
 8001f62:	e7fe      	b.n	8001f62 <main+0x12e>
  ADC_MultiModeTypeDef multimode;
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8001f64:	4c1c      	ldr	r4, [pc, #112]	; (8001fd8 <main+0x1a4>)
 8001f66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001f6a:	6060      	str	r0, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f6c:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f6e:	6120      	str	r0, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f70:	6260      	str	r0, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f72:	6320      	str	r0, [r4, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f74:	60e0      	str	r0, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f76:	6360      	str	r0, [r4, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f78:	61a0      	str	r0, [r4, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001f7a:	63a0      	str	r0, [r4, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f7c:	4620      	mov	r0, r4
  ADC_MultiModeTypeDef multimode;
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8001f7e:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f80:	61e6      	str	r6, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f82:	62e6      	str	r6, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8001f84:	6226      	str	r6, [r4, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f86:	6167      	str	r7, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f88:	f7fe fa3a 	bl	8000400 <HAL_ADC_Init>
 8001f8c:	b100      	cbz	r0, 8001f90 <main+0x15c>
 8001f8e:	e7fe      	b.n	8001f8e <main+0x15a>
    Error_Handler();
  }

    /**Configure the ADC multi-mode 
    */
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 8001f90:	9006      	str	r0, [sp, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8001f92:	9007      	str	r0, [sp, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001f94:	a905      	add	r1, sp, #20
 8001f96:	4620      	mov	r0, r4
 8001f98:	f7fe fe56 	bl	8000c48 <HAL_ADCEx_MultiModeConfigChannel>
 8001f9c:	b100      	cbz	r0, 8001fa0 <main+0x16c>
 8001f9e:	e7fe      	b.n	8001f9e <main+0x16a>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = 1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001fa0:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001fa2:	900a      	str	r0, [sp, #40]	; 0x28
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001fa4:	900c      	str	r0, [sp, #48]	; 0x30
  sConfig.Offset = 0;
 8001fa6:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fa8:	a908      	add	r1, sp, #32
 8001faa:	4620      	mov	r0, r4
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 8001fac:	9608      	str	r6, [sp, #32]
  sConfig.Rank = 1;
 8001fae:	9609      	str	r6, [sp, #36]	; 0x24
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fb0:	f7fe fcbc 	bl	800092c <HAL_ADC_ConfigChannel>
 8001fb4:	b100      	cbz	r0, 8001fb8 <main+0x184>
 8001fb6:	e7fe      	b.n	8001fb6 <main+0x182>
  initEport();
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM3_Init();
  MX_ADC1_Init();
  HAL_TIM_Base_Start_IT(&htim3);
 8001fb8:	4628      	mov	r0, r5
 8001fba:	f7ff fc6b 	bl	8001894 <HAL_TIM_Base_Start_IT>
 8001fbe:	e7fe      	b.n	8001fbe <main+0x18a>
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	48001000 	.word	0x48001000
 8001fc8:	10120000 	.word	0x10120000
 8001fcc:	48000400 	.word	0x48000400
 8001fd0:	20000038 	.word	0x20000038
 8001fd4:	40000400 	.word	0x40000400
 8001fd8:	20000074 	.word	0x20000074

08001fdc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <HAL_MspInit+0x78>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fde:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe0:	699a      	ldr	r2, [r3, #24]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	619a      	str	r2, [r3, #24]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ff0:	2007      	movs	r0, #7
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff2:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ff4:	f7fe feb2 	bl	8000d5c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	f06f 000b 	mvn.w	r0, #11
 8002000:	f7fe febe 	bl	8000d80 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002004:	2200      	movs	r2, #0
 8002006:	4611      	mov	r1, r2
 8002008:	f06f 000a 	mvn.w	r0, #10
 800200c:	f7fe feb8 	bl	8000d80 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002010:	2200      	movs	r2, #0
 8002012:	4611      	mov	r1, r2
 8002014:	f06f 0009 	mvn.w	r0, #9
 8002018:	f7fe feb2 	bl	8000d80 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800201c:	2200      	movs	r2, #0
 800201e:	4611      	mov	r1, r2
 8002020:	f06f 0004 	mvn.w	r0, #4
 8002024:	f7fe feac 	bl	8000d80 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002028:	2200      	movs	r2, #0
 800202a:	4611      	mov	r1, r2
 800202c:	f06f 0003 	mvn.w	r0, #3
 8002030:	f7fe fea6 	bl	8000d80 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002034:	2200      	movs	r2, #0
 8002036:	4611      	mov	r1, r2
 8002038:	f06f 0001 	mvn.w	r0, #1
 800203c:	f7fe fea0 	bl	8000d80 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002040:	2200      	movs	r2, #0
 8002042:	4611      	mov	r1, r2
 8002044:	f04f 30ff 	mov.w	r0, #4294967295
 8002048:	f7fe fe9a 	bl	8000d80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800204c:	b003      	add	sp, #12
 800204e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000

08002058 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002058:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800205a:	6803      	ldr	r3, [r0, #0]
 800205c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002060:	d117      	bne.n	8002092 <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002062:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8002066:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206a:	a901      	add	r1, sp, #4
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800206c:	695a      	ldr	r2, [r3, #20]
 800206e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002072:	615a      	str	r2, [r3, #20]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	9b00      	ldr	r3, [sp, #0]
  
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800207e:	2301      	movs	r3, #1
 8002080:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002082:	2303      	movs	r3, #3
 8002084:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208e:	f7fe fedf 	bl	8000e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002092:	b007      	add	sp, #28
 8002094:	f85d fb04 	ldr.w	pc, [sp], #4

08002098 <HAL_TIM_Base_MspInit>:
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002098:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM3)
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <HAL_TIM_Base_MspInit+0x38>)
 800209c:	6802      	ldr	r2, [r0, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d112      	bne.n	80020c8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020a2:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020a6:	201d      	movs	r0, #29
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020a8:	69da      	ldr	r2, [r3, #28]
 80020aa:	f042 0202 	orr.w	r2, r2, #2
 80020ae:	61da      	str	r2, [r3, #28]
 80020b0:	69db      	ldr	r3, [r3, #28]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020b2:	2200      	movs	r2, #0
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	9301      	str	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020ba:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020bc:	9b01      	ldr	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020be:	f7fe fe5f 	bl	8000d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020c2:	201d      	movs	r0, #29
 80020c4:	f7fe fe90 	bl	8000de8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80020c8:	b003      	add	sp, #12
 80020ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80020ce:	bf00      	nop
 80020d0:	40000400 	.word	0x40000400

080020d4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80020d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020d6:	f7fe f8c7 	bl	8000268 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 80020de:	f7fe beb2 	b.w	8000e46 <HAL_SYSTICK_IRQHandler>
	...

080020e4 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020e4:	4801      	ldr	r0, [pc, #4]	; (80020ec <TIM3_IRQHandler+0x8>)
 80020e6:	f7ff bbe4 	b.w	80018b2 <HAL_TIM_IRQHandler>
 80020ea:	bf00      	nop
 80020ec:	20000038 	.word	0x20000038

080020f0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020f0:	4915      	ldr	r1, [pc, #84]	; (8002148 <SystemInit+0x58>)
 80020f2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80020f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80020fe:	4b13      	ldr	r3, [pc, #76]	; (800214c <SystemInit+0x5c>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	f042 0201 	orr.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002108:	6858      	ldr	r0, [r3, #4]
 800210a:	4a11      	ldr	r2, [pc, #68]	; (8002150 <SystemInit+0x60>)
 800210c:	4002      	ands	r2, r0
 800210e:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002116:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800211a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002122:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800212a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800212c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800212e:	f022 020f 	bic.w	r2, r2, #15
 8002132:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002134:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002136:	4a07      	ldr	r2, [pc, #28]	; (8002154 <SystemInit+0x64>)
 8002138:	4002      	ands	r2, r0
 800213a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002140:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002144:	608b      	str	r3, [r1, #8]
 8002146:	4770      	bx	lr
 8002148:	e000ed00 	.word	0xe000ed00
 800214c:	40021000 	.word	0x40021000
 8002150:	f87fc00c 	.word	0xf87fc00c
 8002154:	ff00fccc 	.word	0xff00fccc

08002158 <__libc_init_array>:
 8002158:	b570      	push	{r4, r5, r6, lr}
 800215a:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <__libc_init_array+0x3c>)
 800215c:	4c0e      	ldr	r4, [pc, #56]	; (8002198 <__libc_init_array+0x40>)
 800215e:	1ae4      	subs	r4, r4, r3
 8002160:	10a4      	asrs	r4, r4, #2
 8002162:	2500      	movs	r5, #0
 8002164:	461e      	mov	r6, r3
 8002166:	42a5      	cmp	r5, r4
 8002168:	d004      	beq.n	8002174 <__libc_init_array+0x1c>
 800216a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800216e:	4798      	blx	r3
 8002170:	3501      	adds	r5, #1
 8002172:	e7f8      	b.n	8002166 <__libc_init_array+0xe>
 8002174:	f000 f816 	bl	80021a4 <_init>
 8002178:	4c08      	ldr	r4, [pc, #32]	; (800219c <__libc_init_array+0x44>)
 800217a:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <__libc_init_array+0x48>)
 800217c:	1ae4      	subs	r4, r4, r3
 800217e:	10a4      	asrs	r4, r4, #2
 8002180:	2500      	movs	r5, #0
 8002182:	461e      	mov	r6, r3
 8002184:	42a5      	cmp	r5, r4
 8002186:	d004      	beq.n	8002192 <__libc_init_array+0x3a>
 8002188:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800218c:	4798      	blx	r3
 800218e:	3501      	adds	r5, #1
 8002190:	e7f8      	b.n	8002184 <__libc_init_array+0x2c>
 8002192:	bd70      	pop	{r4, r5, r6, pc}
 8002194:	080021ec 	.word	0x080021ec
 8002198:	080021ec 	.word	0x080021ec
 800219c:	080021f0 	.word	0x080021f0
 80021a0:	080021ec 	.word	0x080021ec

080021a4 <_init>:
 80021a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021a6:	bf00      	nop
 80021a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021aa:	bc08      	pop	{r3}
 80021ac:	469e      	mov	lr, r3
 80021ae:	4770      	bx	lr

080021b0 <_fini>:
 80021b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021b2:	bf00      	nop
 80021b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021b6:	bc08      	pop	{r3}
 80021b8:	469e      	mov	lr, r3
 80021ba:	4770      	bx	lr
