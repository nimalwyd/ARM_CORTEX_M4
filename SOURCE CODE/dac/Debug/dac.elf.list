
dac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ddc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000ea90  08000f64  08000f64  00010f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800f9f4  0800f9f4  0001f9f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800f9f8  0800f9f8  0001f9f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  0800f9fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          0000004c  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000050  20000050  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_line   0000234d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00005afc  00000000  00000000  00022381  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000137c  00000000  00000000  00027e7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000418  00000000  00000000  00029200  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000630  00000000  00000000  00029618  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00001978  00000000  00000000  00029c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000018f3  00000000  00000000  0002b5c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  0002ceb3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000928  00000000  00000000  0002cf34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000f4c 	.word	0x08000f4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000f4c 	.word	0x08000f4c

080001c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80001c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000200 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80001cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80001ce:	e003      	b.n	80001d8 <LoopCopyDataInit>

080001d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80001d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80001d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80001d6:	3104      	adds	r1, #4

080001d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <LoopForever+0xa>)
	ldr	r3, =_edata
 80001da:	4b0c      	ldr	r3, [pc, #48]	; (800020c <LoopForever+0xe>)
	adds	r2, r0, r1
 80001dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80001de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80001e0:	d3f6      	bcc.n	80001d0 <CopyDataInit>
	ldr	r2, =_sbss
 80001e2:	4a0b      	ldr	r2, [pc, #44]	; (8000210 <LoopForever+0x12>)
	b	LoopFillZerobss
 80001e4:	e002      	b.n	80001ec <LoopFillZerobss>

080001e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80001e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80001e8:	f842 3b04 	str.w	r3, [r2], #4

080001ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <LoopForever+0x16>)
	cmp	r2, r3
 80001ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80001f0:	d3f9      	bcc.n	80001e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80001f2:	f000 fe51 	bl	8000e98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001f6:	f000 fe83 	bl	8000f00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80001fa:	f000 fd9b 	bl	8000d34 <main>

080001fe <LoopForever>:

LoopForever:
    b LoopForever
 80001fe:	e7fe      	b.n	80001fe <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000200:	2000a000 	.word	0x2000a000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000204:	0800f9fc 	.word	0x0800f9fc
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000208:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800020c:	20000004 	.word	0x20000004
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000210:	20000004 	.word	0x20000004
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000214:	20000050 	.word	0x20000050

08000218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000218:	e7fe      	b.n	8000218 <ADC1_2_IRQHandler>
	...

0800021c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800021c:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 800021e:	4b08      	ldr	r3, [pc, #32]	; (8000240 <HAL_InitTick+0x24>)
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000220:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 8000222:	6818      	ldr	r0, [r3, #0]
 8000224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000228:	fbb0 f0f3 	udiv	r0, r0, r3
 800022c:	f000 f87e 	bl	800032c <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000230:	2200      	movs	r2, #0
 8000232:	4621      	mov	r1, r4
 8000234:	f04f 30ff 	mov.w	r0, #4294967295
 8000238:	f000 f844 	bl	80002c4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800023c:	2000      	movs	r0, #0
 800023e:	bd10      	pop	{r4, pc}
 8000240:	20000000 	.word	0x20000000

08000244 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000244:	4a07      	ldr	r2, [pc, #28]	; (8000264 <HAL_Init+0x20>)
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000246:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000248:	6813      	ldr	r3, [r2, #0]
 800024a:	f043 0310 	orr.w	r3, r3, #16
 800024e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000250:	2003      	movs	r0, #3
 8000252:	f000 f825 	bl	80002a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000256:	2000      	movs	r0, #0
 8000258:	f7ff ffe0 	bl	800021c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800025c:	f000 fdb4 	bl	8000dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000260:	2000      	movs	r0, #0
 8000262:	bd08      	pop	{r3, pc}
 8000264:	40022000 	.word	0x40022000

08000268 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000268:	4a02      	ldr	r2, [pc, #8]	; (8000274 <HAL_IncTick+0xc>)
 800026a:	6813      	ldr	r3, [r2, #0]
 800026c:	3301      	adds	r3, #1
 800026e:	6013      	str	r3, [r2, #0]
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000038 	.word	0x20000038

08000278 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000278:	4b01      	ldr	r3, [pc, #4]	; (8000280 <HAL_GetTick+0x8>)
 800027a:	6818      	ldr	r0, [r3, #0]
}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	20000038 	.word	0x20000038

08000284 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000284:	b513      	push	{r0, r1, r4, lr}
 8000286:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000288:	f7ff fff6 	bl	8000278 <HAL_GetTick>
 800028c:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800028e:	f7ff fff3 	bl	8000278 <HAL_GetTick>
 8000292:	9b01      	ldr	r3, [sp, #4]
 8000294:	1b00      	subs	r0, r0, r4
 8000296:	4298      	cmp	r0, r3
 8000298:	d3f9      	bcc.n	800028e <HAL_Delay+0xa>
  {
  }
}
 800029a:	b002      	add	sp, #8
 800029c:	bd10      	pop	{r4, pc}
	...

080002a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002a0:	4a07      	ldr	r2, [pc, #28]	; (80002c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80002a2:	68d3      	ldr	r3, [r2, #12]
 80002a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80002a8:	041b      	lsls	r3, r3, #16
 80002aa:	0c1b      	lsrs	r3, r3, #16
 80002ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80002b0:	0200      	lsls	r0, r0, #8
 80002b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80002ba:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80002bc:	60d3      	str	r3, [r2, #12]
 80002be:	4770      	bx	lr
 80002c0:	e000ed00 	.word	0xe000ed00

080002c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002c4:	4b17      	ldr	r3, [pc, #92]	; (8000324 <HAL_NVIC_SetPriority+0x60>)
 80002c6:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002c8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002cc:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002ce:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002d2:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002d4:	2c04      	cmp	r4, #4
 80002d6:	bf28      	it	cs
 80002d8:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002da:	2d06      	cmp	r5, #6

  return (
 80002dc:	f04f 0501 	mov.w	r5, #1
 80002e0:	fa05 f404 	lsl.w	r4, r5, r4
 80002e4:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002e8:	bf8c      	ite	hi
 80002ea:	3b03      	subhi	r3, #3
 80002ec:	2300      	movls	r3, #0

  return (
 80002ee:	400c      	ands	r4, r1
 80002f0:	409c      	lsls	r4, r3
 80002f2:	fa05 f303 	lsl.w	r3, r5, r3
 80002f6:	3b01      	subs	r3, #1
 80002f8:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002fa:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80002fc:	ea42 0204 	orr.w	r2, r2, r4
 8000300:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000304:	bfaf      	iteee	ge
 8000306:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030a:	f000 000f 	andlt.w	r0, r0, #15
 800030e:	4b06      	ldrlt	r3, [pc, #24]	; (8000328 <HAL_NVIC_SetPriority+0x64>)
 8000310:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000312:	bfa5      	ittet	ge
 8000314:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000318:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	bf00      	nop
 8000324:	e000ed00 	.word	0xe000ed00
 8000328:	e000ed14 	.word	0xe000ed14

0800032c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800032c:	3801      	subs	r0, #1
 800032e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000332:	d20a      	bcs.n	800034a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000336:	4a07      	ldr	r2, [pc, #28]	; (8000354 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000338:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033a:	21f0      	movs	r1, #240	; 0xf0
 800033c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000340:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000342:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000344:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000346:	601a      	str	r2, [r3, #0]
 8000348:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 800034a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	e000e010 	.word	0xe000e010
 8000354:	e000ed00 	.word	0xe000ed00

08000358 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000358:	4b04      	ldr	r3, [pc, #16]	; (800036c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800035a:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800035c:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800035e:	bf0c      	ite	eq
 8000360:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000364:	f022 0204 	bicne.w	r2, r2, #4
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	4770      	bx	lr
 800036c:	e000e010 	.word	0xe000e010

08000370 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000370:	4770      	bx	lr

08000372 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000372:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000374:	f7ff fffc 	bl	8000370 <HAL_SYSTICK_Callback>
 8000378:	bd08      	pop	{r3, pc}

0800037a <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800037a:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 800037c:	4604      	mov	r4, r0
 800037e:	b168      	cbz	r0, 800039c <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000380:	7903      	ldrb	r3, [r0, #4]
 8000382:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000386:	b913      	cbnz	r3, 800038e <HAL_DAC_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000388:	7142      	strb	r2, [r0, #5]

    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800038a:	f000 fd5b 	bl	8000e44 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800038e:	2302      	movs	r3, #2
 8000390:	7123      	strb	r3, [r4, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000392:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000394:	2301      	movs	r3, #1
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000396:	6120      	str	r0, [r4, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000398:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 800039a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
  {
     return HAL_ERROR;
 800039c:	2001      	movs	r0, #1
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
}
 800039e:	bd10      	pop	{r4, pc}

080003a0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80003a0:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmp = 0;
 80003a2:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 80003a4:	6800      	ldr	r0, [r0, #0]
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
  __IO uint32_t tmp = 0;
 80003a6:	9401      	str	r4, [sp, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 80003a8:	9001      	str	r0, [sp, #4]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1 & 2 - DAC 2 has one channel 1 */

  if(Channel == DAC_CHANNEL_1)
 80003aa:	b911      	cbnz	r1, 80003b2 <HAL_DAC_SetValue+0x12>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80003ac:	9901      	ldr	r1, [sp, #4]
 80003ae:	3108      	adds	r1, #8
 80003b0:	e001      	b.n	80003b6 <HAL_DAC_SetValue+0x16>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80003b2:	9901      	ldr	r1, [sp, #4]
 80003b4:	3114      	adds	r1, #20
 80003b6:	440a      	add	r2, r1
 80003b8:	9201      	str	r2, [sp, #4]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80003ba:	9a01      	ldr	r2, [sp, #4]
  
  /* Return function status */
  return HAL_OK;
}
 80003bc:	2000      	movs	r0, #0
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80003be:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
}
 80003c0:	b002      	add	sp, #8
 80003c2:	bd10      	pop	{r4, pc}

080003c4 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80003c4:	7943      	ldrb	r3, [r0, #5]
 80003c6:	2b01      	cmp	r3, #1
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80003c8:	b510      	push	{r4, lr}
 80003ca:	f04f 0302 	mov.w	r3, #2
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80003ce:	d01e      	beq.n	800040e <HAL_DAC_Start+0x4a>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80003d0:	7103      	strb	r3, [r0, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80003d2:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80003d4:	2201      	movs	r2, #1
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80003d6:	681c      	ldr	r4, [r3, #0]
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80003d8:	7142      	strb	r2, [r0, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80003da:	408a      	lsls	r2, r1
 80003dc:	4322      	orrs	r2, r4
 80003de:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 80003e0:	681a      	ldr	r2, [r3, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
  
  if(Channel == DAC_CHANNEL_1)
 80003e2:	b939      	cbnz	r1, 80003f4 <HAL_DAC_Start+0x30>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 80003e4:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 80003e8:	2a3c      	cmp	r2, #60	; 0x3c
 80003ea:	d10c      	bne.n	8000406 <HAL_DAC_Start+0x42>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80003ec:	685a      	ldr	r2, [r3, #4]
 80003ee:	f042 0201 	orr.w	r2, r2, #1
 80003f2:	e007      	b.n	8000404 <HAL_DAC_Start+0x40>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 80003f4:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 80003f8:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 80003fc:	d103      	bne.n	8000406 <HAL_DAC_Start+0x42>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80003fe:	685a      	ldr	r2, [r3, #4]
 8000400:	f042 0202 	orr.w	r2, r2, #2
 8000404:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000406:	2301      	movs	r3, #1
 8000408:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800040a:	2300      	movs	r3, #0
 800040c:	7143      	strb	r3, [r0, #5]
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800040e:	4618      	mov	r0, r3
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
    
  /* Return function status */
  return HAL_OK;
}
 8000410:	bd10      	pop	{r4, pc}

08000412 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8000412:	7943      	ldrb	r3, [r0, #5]
 8000414:	2b01      	cmp	r3, #1
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8000416:	b570      	push	{r4, r5, r6, lr}
 8000418:	f04f 0302 	mov.w	r3, #2
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 800041c:	d018      	beq.n	8000450 <HAL_DAC_ConfigChannel+0x3e>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800041e:	6806      	ldr	r6, [r0, #0]
 
  /* Process locked */
  __HAL_LOCK(hdac);
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000420:	7103      	strb	r3, [r0, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000422:	6835      	ldr	r5, [r6, #0]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8000424:	f640 73fe 	movw	r3, #4094	; 0xffe
 8000428:	4093      	lsls	r3, r2
 800042a:	ea25 0403 	bic.w	r4, r5, r3
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800042e:	e891 0028 	ldmia.w	r1, {r3, r5}
 8000432:	432b      	orrs	r3, r5
 8000434:	4093      	lsls	r3, r2
 8000436:	4323      	orrs	r3, r4
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000438:	6033      	str	r3, [r6, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800043a:	6833      	ldr	r3, [r6, #0]
 800043c:	21c0      	movs	r1, #192	; 0xc0
 800043e:	fa01 f202 	lsl.w	r2, r1, r2
 8000442:	ea23 0202 	bic.w	r2, r3, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000446:	2301      	movs	r3, #1
  tmpreg1 |= tmpreg2 << Channel;
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000448:	6032      	str	r2, [r6, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800044a:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800044c:	2300      	movs	r3, #0
 800044e:	7143      	strb	r3, [r0, #5]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8000450:	4618      	mov	r0, r3
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
  
  /* Return function status */
  return HAL_OK;
}
 8000452:	bd70      	pop	{r4, r5, r6, pc}

08000454 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000458:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80005e0 <HAL_GPIO_Init+0x18c>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800045c:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800045e:	f8df 8184 	ldr.w	r8, [pc, #388]	; 80005e4 <HAL_GPIO_Init+0x190>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000462:	b085      	sub	sp, #20
 8000464:	464c      	mov	r4, r9
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000466:	9301      	str	r3, [sp, #4]
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00;
 8000468:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800046a:	9a01      	ldr	r2, [sp, #4]
 800046c:	40da      	lsrs	r2, r3
 800046e:	f000 80b1 	beq.w	80005d4 <HAL_GPIO_Init+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000472:	2201      	movs	r2, #1
 8000474:	fa02 fa03 	lsl.w	sl, r2, r3

    if(iocurrent)
 8000478:	9a01      	ldr	r2, [sp, #4]
 800047a:	ea12 060a 	ands.w	r6, r2, sl
 800047e:	f000 80a7 	beq.w	80005d0 <HAL_GPIO_Init+0x17c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000482:	684a      	ldr	r2, [r1, #4]
 8000484:	f022 0e10 	bic.w	lr, r2, #16
 8000488:	f1be 0f02 	cmp.w	lr, #2
 800048c:	d114      	bne.n	80004b8 <HAL_GPIO_Init+0x64>
 800048e:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000492:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000496:	f003 0b07 	and.w	fp, r3, #7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800049a:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800049e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80004a2:	250f      	movs	r5, #15
 80004a4:	fa05 f50b 	lsl.w	r5, r5, fp
 80004a8:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80004ac:	690f      	ldr	r7, [r1, #16]
 80004ae:	fa07 f70b 	lsl.w	r7, r7, fp
 80004b2:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3] = temp;
 80004b4:	f8cc 7020 	str.w	r7, [ip, #32]
 80004b8:	ea4f 0b43 	mov.w	fp, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80004bc:	2703      	movs	r7, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80004be:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80004c0:	fa07 fc0b 	lsl.w	ip, r7, fp
 80004c4:	ea6f 0c0c 	mvn.w	ip, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80004c8:	4017      	ands	r7, r2
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80004ca:	ea05 050c 	and.w	r5, r5, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80004ce:	fa07 f70b 	lsl.w	r7, r7, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004d2:	f10e 3eff 	add.w	lr, lr, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80004d6:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004d8:	f1be 0f01 	cmp.w	lr, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 80004dc:	6005      	str	r5, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004de:	d810      	bhi.n	8000502 <HAL_GPIO_Init+0xae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80004e0:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
 80004e2:	68cf      	ldr	r7, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80004e4:	ea0c 0505 	and.w	r5, ip, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 80004e8:	fa07 f70b 	lsl.w	r7, r7, fp
 80004ec:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 80004ee:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80004f0:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80004f2:	ea25 0a0a 	bic.w	sl, r5, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80004f6:	f3c2 1500 	ubfx	r5, r2, #4, #1
 80004fa:	409d      	lsls	r5, r3
 80004fc:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->OTYPER = temp;
 8000500:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000502:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000504:	ea0c 0c05 	and.w	ip, ip, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000508:	688d      	ldr	r5, [r1, #8]
 800050a:	fa05 f50b 	lsl.w	r5, r5, fp
 800050e:	ea45 050c 	orr.w	r5, r5, ip
      GPIOx->PUPDR = temp;
 8000512:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000514:	00d5      	lsls	r5, r2, #3
 8000516:	d55b      	bpl.n	80005d0 <HAL_GPIO_Init+0x17c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000518:	f8d8 5018 	ldr.w	r5, [r8, #24]
 800051c:	f045 0501 	orr.w	r5, r5, #1
 8000520:	f8c8 5018 	str.w	r5, [r8, #24]
 8000524:	f8d8 5018 	ldr.w	r5, [r8, #24]
 8000528:	f023 0e03 	bic.w	lr, r3, #3
 800052c:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8000530:	f005 0501 	and.w	r5, r5, #1
 8000534:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8000538:	9503      	str	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800053a:	f003 0c03 	and.w	ip, r3, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800053e:	9d03      	ldr	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000540:	f8de 5008 	ldr.w	r5, [lr, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000544:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000548:	270f      	movs	r7, #15
 800054a:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800054e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000552:	ea25 0507 	bic.w	r5, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000556:	d011      	beq.n	800057c <HAL_GPIO_Init+0x128>
 8000558:	4f20      	ldr	r7, [pc, #128]	; (80005dc <HAL_GPIO_Init+0x188>)
 800055a:	42b8      	cmp	r0, r7
 800055c:	d010      	beq.n	8000580 <HAL_GPIO_Init+0x12c>
 800055e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000562:	42b8      	cmp	r0, r7
 8000564:	d00e      	beq.n	8000584 <HAL_GPIO_Init+0x130>
 8000566:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800056a:	42b8      	cmp	r0, r7
 800056c:	d00c      	beq.n	8000588 <HAL_GPIO_Init+0x134>
 800056e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000572:	42b8      	cmp	r0, r7
 8000574:	bf14      	ite	ne
 8000576:	2705      	movne	r7, #5
 8000578:	2704      	moveq	r7, #4
 800057a:	e006      	b.n	800058a <HAL_GPIO_Init+0x136>
 800057c:	2700      	movs	r7, #0
 800057e:	e004      	b.n	800058a <HAL_GPIO_Init+0x136>
 8000580:	2701      	movs	r7, #1
 8000582:	e002      	b.n	800058a <HAL_GPIO_Init+0x136>
 8000584:	2702      	movs	r7, #2
 8000586:	e000      	b.n	800058a <HAL_GPIO_Init+0x136>
 8000588:	2703      	movs	r7, #3
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	ea4c 0505 	orr.w	r5, ip, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 8000592:	f8ce 5008 	str.w	r5, [lr, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000596:	f8d9 5000 	ldr.w	r5, [r9]
        temp &= ~((uint32_t)iocurrent);
 800059a:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800059c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 80005a0:	bf0c      	ite	eq
 80005a2:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 80005a4:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80005a6:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 80005a8:	6865      	ldr	r5, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80005aa:	f412 3f00 	tst.w	r2, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 80005ae:	bf0c      	ite	eq
 80005b0:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 80005b2:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80005b4:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80005b6:	68a5      	ldr	r5, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80005b8:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 80005bc:	bf0c      	ite	eq
 80005be:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 80005c0:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80005c2:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80005c4:	68e5      	ldr	r5, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80005c6:	0292      	lsls	r2, r2, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 80005c8:	bf54      	ite	pl
 80005ca:	403d      	andpl	r5, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 80005cc:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80005ce:	60e5      	str	r5, [r4, #12]
      }
    }
    
    position++;
 80005d0:	3301      	adds	r3, #1
 80005d2:	e74a      	b.n	800046a <HAL_GPIO_Init+0x16>
  }
}
 80005d4:	b005      	add	sp, #20
 80005d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005da:	bf00      	nop
 80005dc:	48000400 	.word	0x48000400
 80005e0:	40010400 	.word	0x40010400
 80005e4:	40021000 	.word	0x40021000

080005e8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005e8:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80005ea:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005ee:	07de      	lsls	r6, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80005f0:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005f2:	d403      	bmi.n	80005fc <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80005f4:	682b      	ldr	r3, [r5, #0]
 80005f6:	079c      	lsls	r4, r3, #30
 80005f8:	d471      	bmi.n	80006de <HAL_RCC_OscConfig+0xf6>
 80005fa:	e0f0      	b.n	80007de <HAL_RCC_OscConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80005fc:	4cb3      	ldr	r4, [pc, #716]	; (80008cc <HAL_RCC_OscConfig+0x2e4>)
 80005fe:	6863      	ldr	r3, [r4, #4]
 8000600:	f003 030c 	and.w	r3, r3, #12
 8000604:	2b04      	cmp	r3, #4
 8000606:	d007      	beq.n	8000618 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000608:	6863      	ldr	r3, [r4, #4]
 800060a:	f003 030c 	and.w	r3, r3, #12
 800060e:	2b08      	cmp	r3, #8
 8000610:	d116      	bne.n	8000640 <HAL_RCC_OscConfig+0x58>
 8000612:	6863      	ldr	r3, [r4, #4]
 8000614:	03d8      	lsls	r0, r3, #15
 8000616:	d513      	bpl.n	8000640 <HAL_RCC_OscConfig+0x58>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000618:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800061c:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000620:	6822      	ldr	r2, [r4, #0]
 8000622:	fa93 f3a3 	rbit	r3, r3
 8000626:	fab3 f383 	clz	r3, r3
 800062a:	f003 031f 	and.w	r3, r3, #31
 800062e:	fa22 f303 	lsr.w	r3, r2, r3
 8000632:	07d9      	lsls	r1, r3, #31
 8000634:	d5de      	bpl.n	80005f4 <HAL_RCC_OscConfig+0xc>
 8000636:	686b      	ldr	r3, [r5, #4]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d1db      	bne.n	80005f4 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 800063c:	2001      	movs	r0, #1
 800063e:	e233      	b.n	8000aa8 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000640:	686b      	ldr	r3, [r5, #4]
 8000642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000646:	d007      	beq.n	8000658 <HAL_RCC_OscConfig+0x70>
 8000648:	6822      	ldr	r2, [r4, #0]
 800064a:	b14b      	cbz	r3, 8000660 <HAL_RCC_OscConfig+0x78>
 800064c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000650:	d106      	bne.n	8000660 <HAL_RCC_OscConfig+0x78>
 8000652:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000656:	6022      	str	r2, [r4, #0]
 8000658:	6822      	ldr	r2, [r4, #0]
 800065a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800065e:	e005      	b.n	800066c <HAL_RCC_OscConfig+0x84>
 8000660:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000664:	6022      	str	r2, [r4, #0]
 8000666:	6822      	ldr	r2, [r4, #0]
 8000668:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800066c:	6022      	str	r2, [r4, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800066e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000670:	f022 010f 	bic.w	r1, r2, #15
 8000674:	68aa      	ldr	r2, [r5, #8]
 8000676:	430a      	orrs	r2, r1
 8000678:	62e2      	str	r2, [r4, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800067a:	b1c3      	cbz	r3, 80006ae <HAL_RCC_OscConfig+0xc6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800067c:	f7ff fdfc 	bl	8000278 <HAL_GetTick>
 8000680:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000684:	4607      	mov	r7, r0
 8000686:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800068a:	6822      	ldr	r2, [r4, #0]
 800068c:	fa96 f3a6 	rbit	r3, r6
 8000690:	fab3 f383 	clz	r3, r3
 8000694:	f003 031f 	and.w	r3, r3, #31
 8000698:	fa22 f303 	lsr.w	r3, r2, r3
 800069c:	07da      	lsls	r2, r3, #31
 800069e:	d4a9      	bmi.n	80005f4 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006a0:	f7ff fdea 	bl	8000278 <HAL_GetTick>
 80006a4:	1bc0      	subs	r0, r0, r7
 80006a6:	2864      	cmp	r0, #100	; 0x64
 80006a8:	d9ed      	bls.n	8000686 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 80006aa:	2003      	movs	r0, #3
 80006ac:	e1fc      	b.n	8000aa8 <HAL_RCC_OscConfig+0x4c0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80006ae:	f7ff fde3 	bl	8000278 <HAL_GetTick>
 80006b2:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80006b6:	4607      	mov	r7, r0
 80006b8:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006bc:	6822      	ldr	r2, [r4, #0]
 80006be:	fa96 f3a6 	rbit	r3, r6
 80006c2:	fab3 f383 	clz	r3, r3
 80006c6:	f003 031f 	and.w	r3, r3, #31
 80006ca:	fa22 f303 	lsr.w	r3, r2, r3
 80006ce:	07db      	lsls	r3, r3, #31
 80006d0:	d590      	bpl.n	80005f4 <HAL_RCC_OscConfig+0xc>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006d2:	f7ff fdd1 	bl	8000278 <HAL_GetTick>
 80006d6:	1bc0      	subs	r0, r0, r7
 80006d8:	2864      	cmp	r0, #100	; 0x64
 80006da:	d9ed      	bls.n	80006b8 <HAL_RCC_OscConfig+0xd0>
 80006dc:	e7e5      	b.n	80006aa <HAL_RCC_OscConfig+0xc2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80006de:	4c7b      	ldr	r4, [pc, #492]	; (80008cc <HAL_RCC_OscConfig+0x2e4>)
 80006e0:	6863      	ldr	r3, [r4, #4]
 80006e2:	f013 0f0c 	tst.w	r3, #12
 80006e6:	d007      	beq.n	80006f8 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80006e8:	6863      	ldr	r3, [r4, #4]
 80006ea:	f003 030c 	and.w	r3, r3, #12
 80006ee:	2b08      	cmp	r3, #8
 80006f0:	d121      	bne.n	8000736 <HAL_RCC_OscConfig+0x14e>
 80006f2:	6863      	ldr	r3, [r4, #4]
 80006f4:	03d8      	lsls	r0, r3, #15
 80006f6:	d41e      	bmi.n	8000736 <HAL_RCC_OscConfig+0x14e>
 80006f8:	2302      	movs	r3, #2
 80006fa:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006fe:	6822      	ldr	r2, [r4, #0]
 8000700:	fa93 f3a3 	rbit	r3, r3
 8000704:	fab3 f383 	clz	r3, r3
 8000708:	f003 031f 	and.w	r3, r3, #31
 800070c:	fa22 f303 	lsr.w	r3, r2, r3
 8000710:	07d9      	lsls	r1, r3, #31
 8000712:	d502      	bpl.n	800071a <HAL_RCC_OscConfig+0x132>
 8000714:	692b      	ldr	r3, [r5, #16]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d190      	bne.n	800063c <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800071a:	6823      	ldr	r3, [r4, #0]
 800071c:	22f8      	movs	r2, #248	; 0xf8
 800071e:	fa92 f2a2 	rbit	r2, r2
 8000722:	6969      	ldr	r1, [r5, #20]
 8000724:	fab2 f282 	clz	r2, r2
 8000728:	fa01 f202 	lsl.w	r2, r1, r2
 800072c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000730:	4313      	orrs	r3, r2
 8000732:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000734:	e053      	b.n	80007de <HAL_RCC_OscConfig+0x1f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000736:	692a      	ldr	r2, [r5, #16]
 8000738:	2301      	movs	r3, #1
 800073a:	b37a      	cbz	r2, 800079c <HAL_RCC_OscConfig+0x1b4>
 800073c:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000740:	fab2 f282 	clz	r2, r2
 8000744:	0092      	lsls	r2, r2, #2
 8000746:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 800074a:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 800074e:	2602      	movs	r6, #2
 8000750:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000752:	f7ff fd91 	bl	8000278 <HAL_GetTick>
 8000756:	4607      	mov	r7, r0
 8000758:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800075c:	485b      	ldr	r0, [pc, #364]	; (80008cc <HAL_RCC_OscConfig+0x2e4>)
 800075e:	6822      	ldr	r2, [r4, #0]
 8000760:	fa96 f3a6 	rbit	r3, r6
 8000764:	fab3 f383 	clz	r3, r3
 8000768:	f003 031f 	and.w	r3, r3, #31
 800076c:	fa22 f303 	lsr.w	r3, r2, r3
 8000770:	07da      	lsls	r2, r3, #31
 8000772:	d405      	bmi.n	8000780 <HAL_RCC_OscConfig+0x198>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000774:	f7ff fd80 	bl	8000278 <HAL_GetTick>
 8000778:	1bc0      	subs	r0, r0, r7
 800077a:	2802      	cmp	r0, #2
 800077c:	d9ec      	bls.n	8000758 <HAL_RCC_OscConfig+0x170>
 800077e:	e794      	b.n	80006aa <HAL_RCC_OscConfig+0xc2>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000780:	6803      	ldr	r3, [r0, #0]
 8000782:	22f8      	movs	r2, #248	; 0xf8
 8000784:	fa92 f2a2 	rbit	r2, r2
 8000788:	6969      	ldr	r1, [r5, #20]
 800078a:	fab2 f282 	clz	r2, r2
 800078e:	fa01 f202 	lsl.w	r2, r1, r2
 8000792:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000796:	4313      	orrs	r3, r2
 8000798:	6003      	str	r3, [r0, #0]
 800079a:	e020      	b.n	80007de <HAL_RCC_OscConfig+0x1f6>
 800079c:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80007a0:	fab3 f383 	clz	r3, r3
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80007aa:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80007ae:	2602      	movs	r6, #2
 80007b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007b2:	f7ff fd61 	bl	8000278 <HAL_GetTick>
 80007b6:	4607      	mov	r7, r0
 80007b8:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007bc:	6822      	ldr	r2, [r4, #0]
 80007be:	fa96 f3a6 	rbit	r3, r6
 80007c2:	fab3 f383 	clz	r3, r3
 80007c6:	f003 031f 	and.w	r3, r3, #31
 80007ca:	fa22 f303 	lsr.w	r3, r2, r3
 80007ce:	07db      	lsls	r3, r3, #31
 80007d0:	d505      	bpl.n	80007de <HAL_RCC_OscConfig+0x1f6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007d2:	f7ff fd51 	bl	8000278 <HAL_GetTick>
 80007d6:	1bc0      	subs	r0, r0, r7
 80007d8:	2802      	cmp	r0, #2
 80007da:	d9ed      	bls.n	80007b8 <HAL_RCC_OscConfig+0x1d0>
 80007dc:	e765      	b.n	80006aa <HAL_RCC_OscConfig+0xc2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80007de:	682b      	ldr	r3, [r5, #0]
 80007e0:	0718      	lsls	r0, r3, #28
 80007e2:	d403      	bmi.n	80007ec <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80007e4:	682b      	ldr	r3, [r5, #0]
 80007e6:	0759      	lsls	r1, r3, #29
 80007e8:	d447      	bmi.n	800087a <HAL_RCC_OscConfig+0x292>
 80007ea:	e0da      	b.n	80009a2 <HAL_RCC_OscConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80007ec:	69aa      	ldr	r2, [r5, #24]
 80007ee:	4c37      	ldr	r4, [pc, #220]	; (80008cc <HAL_RCC_OscConfig+0x2e4>)
 80007f0:	4937      	ldr	r1, [pc, #220]	; (80008d0 <HAL_RCC_OscConfig+0x2e8>)
 80007f2:	2301      	movs	r3, #1
 80007f4:	b302      	cbz	r2, 8000838 <HAL_RCC_OscConfig+0x250>
 80007f6:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80007fa:	fab2 f282 	clz	r2, r2
 80007fe:	2602      	movs	r6, #2
 8000800:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000804:	f7ff fd38 	bl	8000278 <HAL_GetTick>
 8000808:	4607      	mov	r7, r0
 800080a:	fa96 f3a6 	rbit	r3, r6
 800080e:	fa96 f3a6 	rbit	r3, r6
 8000812:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000816:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000818:	fa96 f3a6 	rbit	r3, r6
 800081c:	fab3 f383 	clz	r3, r3
 8000820:	f003 031f 	and.w	r3, r3, #31
 8000824:	fa22 f303 	lsr.w	r3, r2, r3
 8000828:	07da      	lsls	r2, r3, #31
 800082a:	d4db      	bmi.n	80007e4 <HAL_RCC_OscConfig+0x1fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800082c:	f7ff fd24 	bl	8000278 <HAL_GetTick>
 8000830:	1bc0      	subs	r0, r0, r7
 8000832:	2802      	cmp	r0, #2
 8000834:	d9e9      	bls.n	800080a <HAL_RCC_OscConfig+0x222>
 8000836:	e738      	b.n	80006aa <HAL_RCC_OscConfig+0xc2>
 8000838:	fa93 f3a3 	rbit	r3, r3
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800083c:	fab3 f383 	clz	r3, r3
 8000840:	2602      	movs	r6, #2
 8000842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000846:	f7ff fd17 	bl	8000278 <HAL_GetTick>
 800084a:	4607      	mov	r7, r0
 800084c:	fa96 f3a6 	rbit	r3, r6
 8000850:	fa96 f3a6 	rbit	r3, r6
 8000854:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000858:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800085a:	fa96 f3a6 	rbit	r3, r6
 800085e:	fab3 f383 	clz	r3, r3
 8000862:	f003 031f 	and.w	r3, r3, #31
 8000866:	fa22 f303 	lsr.w	r3, r2, r3
 800086a:	07db      	lsls	r3, r3, #31
 800086c:	d5ba      	bpl.n	80007e4 <HAL_RCC_OscConfig+0x1fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800086e:	f7ff fd03 	bl	8000278 <HAL_GetTick>
 8000872:	1bc0      	subs	r0, r0, r7
 8000874:	2802      	cmp	r0, #2
 8000876:	d9e9      	bls.n	800084c <HAL_RCC_OscConfig+0x264>
 8000878:	e717      	b.n	80006aa <HAL_RCC_OscConfig+0xc2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800087a:	4c14      	ldr	r4, [pc, #80]	; (80008cc <HAL_RCC_OscConfig+0x2e4>)
 800087c:	69e3      	ldr	r3, [r4, #28]
 800087e:	00de      	lsls	r6, r3, #3
 8000880:	d40a      	bmi.n	8000898 <HAL_RCC_OscConfig+0x2b0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	69e3      	ldr	r3, [r4, #28]
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000888:	61e3      	str	r3, [r4, #28]
 800088a:	69e3      	ldr	r3, [r4, #28]
 800088c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000894:	2701      	movs	r7, #1
 8000896:	e000      	b.n	800089a <HAL_RCC_OscConfig+0x2b2>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 8000898:	2700      	movs	r7, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800089a:	4e0e      	ldr	r6, [pc, #56]	; (80008d4 <HAL_RCC_OscConfig+0x2ec>)
 800089c:	6833      	ldr	r3, [r6, #0]
 800089e:	05d8      	lsls	r0, r3, #23
 80008a0:	d503      	bpl.n	80008aa <HAL_RCC_OscConfig+0x2c2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008a2:	68eb      	ldr	r3, [r5, #12]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d117      	bne.n	80008d8 <HAL_RCC_OscConfig+0x2f0>
 80008a8:	e02d      	b.n	8000906 <HAL_RCC_OscConfig+0x31e>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80008aa:	6833      	ldr	r3, [r6, #0]
 80008ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b0:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80008b2:	f7ff fce1 	bl	8000278 <HAL_GetTick>
 80008b6:	4680      	mov	r8, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008b8:	6833      	ldr	r3, [r6, #0]
 80008ba:	05d9      	lsls	r1, r3, #23
 80008bc:	d4f1      	bmi.n	80008a2 <HAL_RCC_OscConfig+0x2ba>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80008be:	f7ff fcdb 	bl	8000278 <HAL_GetTick>
 80008c2:	ebc8 0000 	rsb	r0, r8, r0
 80008c6:	2864      	cmp	r0, #100	; 0x64
 80008c8:	d9f6      	bls.n	80008b8 <HAL_RCC_OscConfig+0x2d0>
 80008ca:	e6ee      	b.n	80006aa <HAL_RCC_OscConfig+0xc2>
 80008cc:	40021000 	.word	0x40021000
 80008d0:	42420480 	.word	0x42420480
 80008d4:	40007000 	.word	0x40007000
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008d8:	b97b      	cbnz	r3, 80008fa <HAL_RCC_OscConfig+0x312>
 80008da:	6a23      	ldr	r3, [r4, #32]
 80008dc:	f023 0301 	bic.w	r3, r3, #1
 80008e0:	6223      	str	r3, [r4, #32]
 80008e2:	6a23      	ldr	r3, [r4, #32]
 80008e4:	f023 0304 	bic.w	r3, r3, #4
 80008e8:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80008ea:	f7ff fcc5 	bl	8000278 <HAL_GetTick>
 80008ee:	2602      	movs	r6, #2
 80008f0:	4681      	mov	r9, r0
 80008f2:	46b0      	mov	r8, r6
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008f4:	f241 3a88 	movw	sl, #5000	; 0x1388
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008f8:	e039      	b.n	800096e <HAL_RCC_OscConfig+0x386>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008fa:	2b05      	cmp	r3, #5
 80008fc:	6a23      	ldr	r3, [r4, #32]
 80008fe:	d106      	bne.n	800090e <HAL_RCC_OscConfig+0x326>
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6223      	str	r3, [r4, #32]
 8000906:	6a23      	ldr	r3, [r4, #32]
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	e005      	b.n	800091a <HAL_RCC_OscConfig+0x332>
 800090e:	f023 0301 	bic.w	r3, r3, #1
 8000912:	6223      	str	r3, [r4, #32]
 8000914:	6a23      	ldr	r3, [r4, #32]
 8000916:	f023 0304 	bic.w	r3, r3, #4
 800091a:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800091c:	f7ff fcac 	bl	8000278 <HAL_GetTick>
 8000920:	2602      	movs	r6, #2
 8000922:	4682      	mov	sl, r0
 8000924:	46b1      	mov	r9, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000926:	f241 3888 	movw	r8, #5000	; 0x1388
 800092a:	fa96 f3a6 	rbit	r3, r6
 800092e:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000932:	b10b      	cbz	r3, 8000938 <HAL_RCC_OscConfig+0x350>
 8000934:	6a22      	ldr	r2, [r4, #32]
 8000936:	e002      	b.n	800093e <HAL_RCC_OscConfig+0x356>
 8000938:	fa96 f3a6 	rbit	r3, r6
 800093c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800093e:	fa99 f3a9 	rbit	r3, r9
 8000942:	fab3 f383 	clz	r3, r3
 8000946:	f003 031f 	and.w	r3, r3, #31
 800094a:	fa22 f303 	lsr.w	r3, r2, r3
 800094e:	07da      	lsls	r2, r3, #31
 8000950:	d41d      	bmi.n	800098e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000952:	f7ff fc91 	bl	8000278 <HAL_GetTick>
 8000956:	ebca 0000 	rsb	r0, sl, r0
 800095a:	4540      	cmp	r0, r8
 800095c:	d9e5      	bls.n	800092a <HAL_RCC_OscConfig+0x342>
 800095e:	e6a4      	b.n	80006aa <HAL_RCC_OscConfig+0xc2>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000960:	f7ff fc8a 	bl	8000278 <HAL_GetTick>
 8000964:	ebc9 0000 	rsb	r0, r9, r0
 8000968:	4550      	cmp	r0, sl
 800096a:	f63f ae9e 	bhi.w	80006aa <HAL_RCC_OscConfig+0xc2>
 800096e:	fa96 f3a6 	rbit	r3, r6
 8000972:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000976:	b183      	cbz	r3, 800099a <HAL_RCC_OscConfig+0x3b2>
 8000978:	6a22      	ldr	r2, [r4, #32]
 800097a:	fa98 f3a8 	rbit	r3, r8
 800097e:	fab3 f383 	clz	r3, r3
 8000982:	f003 031f 	and.w	r3, r3, #31
 8000986:	fa22 f303 	lsr.w	r3, r2, r3
 800098a:	07db      	lsls	r3, r3, #31
 800098c:	d4e8      	bmi.n	8000960 <HAL_RCC_OscConfig+0x378>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800098e:	b147      	cbz	r7, 80009a2 <HAL_RCC_OscConfig+0x3ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000990:	69e3      	ldr	r3, [r4, #28]
 8000992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000996:	61e3      	str	r3, [r4, #28]
 8000998:	e003      	b.n	80009a2 <HAL_RCC_OscConfig+0x3ba>
 800099a:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800099e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80009a0:	e7eb      	b.n	800097a <HAL_RCC_OscConfig+0x392>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009a2:	69ea      	ldr	r2, [r5, #28]
 80009a4:	b90a      	cbnz	r2, 80009aa <HAL_RCC_OscConfig+0x3c2>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80009a6:	2000      	movs	r0, #0
 80009a8:	e07e      	b.n	8000aa8 <HAL_RCC_OscConfig+0x4c0>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009aa:	4c41      	ldr	r4, [pc, #260]	; (8000ab0 <HAL_RCC_OscConfig+0x4c8>)
 80009ac:	6863      	ldr	r3, [r4, #4]
 80009ae:	f003 030c 	and.w	r3, r3, #12
 80009b2:	2b08      	cmp	r3, #8
 80009b4:	f43f ae42 	beq.w	800063c <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009b8:	2a02      	cmp	r2, #2
 80009ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009be:	d150      	bne.n	8000a62 <HAL_RCC_OscConfig+0x47a>
 80009c0:	fa93 f3a3 	rbit	r3, r3
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80009c4:	fab3 f383 	clz	r3, r3
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80009ce:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009d6:	f7ff fc4f 	bl	8000278 <HAL_GetTick>
 80009da:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 80009de:	4607      	mov	r7, r0
 80009e0:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009e4:	4932      	ldr	r1, [pc, #200]	; (8000ab0 <HAL_RCC_OscConfig+0x4c8>)
 80009e6:	6822      	ldr	r2, [r4, #0]
 80009e8:	fa96 f3a6 	rbit	r3, r6
 80009ec:	fab3 f383 	clz	r3, r3
 80009f0:	f003 031f 	and.w	r3, r3, #31
 80009f4:	fa22 f303 	lsr.w	r3, r2, r3
 80009f8:	07d8      	lsls	r0, r3, #31
 80009fa:	d505      	bpl.n	8000a08 <HAL_RCC_OscConfig+0x420>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009fc:	f7ff fc3c 	bl	8000278 <HAL_GetTick>
 8000a00:	1bc0      	subs	r0, r0, r7
 8000a02:	2802      	cmp	r0, #2
 8000a04:	d9ec      	bls.n	80009e0 <HAL_RCC_OscConfig+0x3f8>
 8000a06:	e650      	b.n	80006aa <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a08:	684b      	ldr	r3, [r1, #4]
 8000a0a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8000a0c:	6a2a      	ldr	r2, [r5, #32]
 8000a0e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000a12:	4302      	orrs	r2, r0
 8000a14:	4313      	orrs	r3, r2
 8000a16:	604b      	str	r3, [r1, #4]
 8000a18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a1c:	fa93 f3a3 	rbit	r3, r3
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000a20:	fab3 f383 	clz	r3, r3
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000a2a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000a2e:	2201      	movs	r2, #1
 8000a30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a32:	f7ff fc21 	bl	8000278 <HAL_GetTick>
 8000a36:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000a3a:	4606      	mov	r6, r0
 8000a3c:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a40:	6822      	ldr	r2, [r4, #0]
 8000a42:	fa95 f3a5 	rbit	r3, r5
 8000a46:	fab3 f383 	clz	r3, r3
 8000a4a:	f003 031f 	and.w	r3, r3, #31
 8000a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000a52:	07da      	lsls	r2, r3, #31
 8000a54:	d4a7      	bmi.n	80009a6 <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a56:	f7ff fc0f 	bl	8000278 <HAL_GetTick>
 8000a5a:	1b80      	subs	r0, r0, r6
 8000a5c:	2802      	cmp	r0, #2
 8000a5e:	d9ed      	bls.n	8000a3c <HAL_RCC_OscConfig+0x454>
 8000a60:	e623      	b.n	80006aa <HAL_RCC_OscConfig+0xc2>
 8000a62:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a66:	fab3 f383 	clz	r3, r3
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000a70:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a78:	f7ff fbfe 	bl	8000278 <HAL_GetTick>
 8000a7c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000a80:	4606      	mov	r6, r0
 8000a82:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a86:	6822      	ldr	r2, [r4, #0]
 8000a88:	fa95 f3a5 	rbit	r3, r5
 8000a8c:	fab3 f383 	clz	r3, r3
 8000a90:	f003 031f 	and.w	r3, r3, #31
 8000a94:	fa22 f303 	lsr.w	r3, r2, r3
 8000a98:	07db      	lsls	r3, r3, #31
 8000a9a:	d584      	bpl.n	80009a6 <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a9c:	f7ff fbec 	bl	8000278 <HAL_GetTick>
 8000aa0:	1b80      	subs	r0, r0, r6
 8000aa2:	2802      	cmp	r0, #2
 8000aa4:	d9ed      	bls.n	8000a82 <HAL_RCC_OscConfig+0x49a>
 8000aa6:	e600      	b.n	80006aa <HAL_RCC_OscConfig+0xc2>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000aa8:	b002      	add	sp, #8
 8000aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8000ab4:	4913      	ldr	r1, [pc, #76]	; (8000b04 <HAL_RCC_GetSysClockFreq+0x50>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ab6:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8000ab8:	684c      	ldr	r4, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000aba:	f004 030c 	and.w	r3, r4, #12
 8000abe:	2b08      	cmp	r3, #8
 8000ac0:	d11e      	bne.n	8000b00 <HAL_RCC_GetSysClockFreq+0x4c>
 8000ac2:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000ac6:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000aca:	f404 1270 	and.w	r2, r4, #3932160	; 0x3c0000
 8000ace:	fab3 f383 	clz	r3, r3
 8000ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ad6:	4a0c      	ldr	r2, [pc, #48]	; (8000b08 <HAL_RCC_GetSysClockFreq+0x54>)
 8000ad8:	5cd3      	ldrb	r3, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000ada:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8000adc:	210f      	movs	r1, #15
 8000ade:	fa91 f1a1 	rbit	r1, r1
 8000ae2:	fab1 f181 	clz	r1, r1
 8000ae6:	f002 020f 	and.w	r2, r2, #15
 8000aea:	40ca      	lsrs	r2, r1
 8000aec:	4907      	ldr	r1, [pc, #28]	; (8000b0c <HAL_RCC_GetSysClockFreq+0x58>)
 8000aee:	5c88      	ldrb	r0, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000af0:	03e2      	lsls	r2, r4, #15
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8000af2:	bf52      	itee	pl
 8000af4:	4806      	ldrpl	r0, [pc, #24]	; (8000b10 <HAL_RCC_GetSysClockFreq+0x5c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000af6:	4a07      	ldrmi	r2, [pc, #28]	; (8000b14 <HAL_RCC_GetSysClockFreq+0x60>)
 8000af8:	fbb2 f0f0 	udivmi	r0, r2, r0
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8000afc:	4358      	muls	r0, r3
 8000afe:	bd10      	pop	{r4, pc}
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000b00:	4804      	ldr	r0, [pc, #16]	; (8000b14 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b02:	bd10      	pop	{r4, pc}
 8000b04:	40021000 	.word	0x40021000
 8000b08:	08000f74 	.word	0x08000f74
 8000b0c:	08000f64 	.word	0x08000f64
 8000b10:	003d0900 	.word	0x003d0900
 8000b14:	007a1200 	.word	0x007a1200

08000b18 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b18:	4a54      	ldr	r2, [pc, #336]	; (8000c6c <HAL_RCC_ClockConfig+0x154>)
 8000b1a:	6813      	ldr	r3, [r2, #0]
 8000b1c:	f003 0307 	and.w	r3, r3, #7
 8000b20:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b26:	4606      	mov	r6, r0
 8000b28:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b2a:	d30a      	bcc.n	8000b42 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b2c:	6831      	ldr	r1, [r6, #0]
 8000b2e:	078c      	lsls	r4, r1, #30
 8000b30:	d514      	bpl.n	8000b5c <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b32:	484f      	ldr	r0, [pc, #316]	; (8000c70 <HAL_RCC_ClockConfig+0x158>)
 8000b34:	6843      	ldr	r3, [r0, #4]
 8000b36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b3a:	68b3      	ldr	r3, [r6, #8]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	6043      	str	r3, [r0, #4]
 8000b40:	e00c      	b.n	8000b5c <HAL_RCC_ClockConfig+0x44>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b42:	6813      	ldr	r3, [r2, #0]
 8000b44:	f023 0307 	bic.w	r3, r3, #7
 8000b48:	430b      	orrs	r3, r1
 8000b4a:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b4c:	6813      	ldr	r3, [r2, #0]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	4299      	cmp	r1, r3
 8000b54:	d0ea      	beq.n	8000b2c <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8000b56:	2001      	movs	r0, #1
 8000b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b5c:	07c8      	lsls	r0, r1, #31
 8000b5e:	d406      	bmi.n	8000b6e <HAL_RCC_ClockConfig+0x56>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b60:	4a42      	ldr	r2, [pc, #264]	; (8000c6c <HAL_RCC_ClockConfig+0x154>)
 8000b62:	6813      	ldr	r3, [r2, #0]
 8000b64:	f003 0307 	and.w	r3, r3, #7
 8000b68:	429d      	cmp	r5, r3
 8000b6a:	d34a      	bcc.n	8000c02 <HAL_RCC_ClockConfig+0xea>
 8000b6c:	e053      	b.n	8000c16 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b6e:	6872      	ldr	r2, [r6, #4]
 8000b70:	4c3f      	ldr	r4, [pc, #252]	; (8000c70 <HAL_RCC_ClockConfig+0x158>)
 8000b72:	2a01      	cmp	r2, #1
 8000b74:	d102      	bne.n	8000b7c <HAL_RCC_ClockConfig+0x64>
 8000b76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b7a:	e004      	b.n	8000b86 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b7c:	2a02      	cmp	r2, #2
 8000b7e:	bf0c      	ite	eq
 8000b80:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000b84:	2302      	movne	r3, #2
 8000b86:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b8a:	6821      	ldr	r1, [r4, #0]
 8000b8c:	fa93 f3a3 	rbit	r3, r3
 8000b90:	fab3 f383 	clz	r3, r3
 8000b94:	f003 031f 	and.w	r3, r3, #31
 8000b98:	fa21 f303 	lsr.w	r3, r1, r3
 8000b9c:	07d9      	lsls	r1, r3, #31
 8000b9e:	d5da      	bpl.n	8000b56 <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ba0:	6863      	ldr	r3, [r4, #4]
 8000ba2:	f023 0303 	bic.w	r3, r3, #3
 8000ba6:	431a      	orrs	r2, r3
 8000ba8:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000baa:	f7ff fb65 	bl	8000278 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bae:	6873      	ldr	r3, [r6, #4]
 8000bb0:	2b01      	cmp	r3, #1
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000bb2:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bb4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bb8:	d10c      	bne.n	8000bd4 <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bba:	6863      	ldr	r3, [r4, #4]
 8000bbc:	f003 030c 	and.w	r3, r3, #12
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d0cd      	beq.n	8000b60 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bc4:	f7ff fb58 	bl	8000278 <HAL_GetTick>
 8000bc8:	1bc0      	subs	r0, r0, r7
 8000bca:	4540      	cmp	r0, r8
 8000bcc:	d9f5      	bls.n	8000bba <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 8000bce:	2003      	movs	r0, #3
 8000bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d10f      	bne.n	8000bf8 <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bd8:	6863      	ldr	r3, [r4, #4]
 8000bda:	f003 030c 	and.w	r3, r3, #12
 8000bde:	2b08      	cmp	r3, #8
 8000be0:	d0be      	beq.n	8000b60 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000be2:	f7ff fb49 	bl	8000278 <HAL_GetTick>
 8000be6:	1bc0      	subs	r0, r0, r7
 8000be8:	4540      	cmp	r0, r8
 8000bea:	d9f5      	bls.n	8000bd8 <HAL_RCC_ClockConfig+0xc0>
 8000bec:	e7ef      	b.n	8000bce <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bee:	f7ff fb43 	bl	8000278 <HAL_GetTick>
 8000bf2:	1bc0      	subs	r0, r0, r7
 8000bf4:	4540      	cmp	r0, r8
 8000bf6:	d8ea      	bhi.n	8000bce <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bf8:	6863      	ldr	r3, [r4, #4]
 8000bfa:	f013 0f0c 	tst.w	r3, #12
 8000bfe:	d1f6      	bne.n	8000bee <HAL_RCC_ClockConfig+0xd6>
 8000c00:	e7ae      	b.n	8000b60 <HAL_RCC_ClockConfig+0x48>
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c02:	6813      	ldr	r3, [r2, #0]
 8000c04:	f023 0307 	bic.w	r3, r3, #7
 8000c08:	432b      	orrs	r3, r5
 8000c0a:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c0c:	6813      	ldr	r3, [r2, #0]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	429d      	cmp	r5, r3
 8000c14:	d19f      	bne.n	8000b56 <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c16:	6831      	ldr	r1, [r6, #0]
 8000c18:	4c15      	ldr	r4, [pc, #84]	; (8000c70 <HAL_RCC_ClockConfig+0x158>)
 8000c1a:	f011 0f04 	tst.w	r1, #4
 8000c1e:	d005      	beq.n	8000c2c <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c20:	6863      	ldr	r3, [r4, #4]
 8000c22:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000c26:	68f3      	ldr	r3, [r6, #12]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c2c:	070b      	lsls	r3, r1, #28
 8000c2e:	d506      	bpl.n	8000c3e <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000c30:	6863      	ldr	r3, [r4, #4]
 8000c32:	6932      	ldr	r2, [r6, #16]
 8000c34:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000c38:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c3c:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000c3e:	f7ff ff39 	bl	8000ab4 <HAL_RCC_GetSysClockFreq>
 8000c42:	6863      	ldr	r3, [r4, #4]
 8000c44:	22f0      	movs	r2, #240	; 0xf0
 8000c46:	fa92 f2a2 	rbit	r2, r2
 8000c4a:	fab2 f282 	clz	r2, r2
 8000c4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c52:	40d3      	lsrs	r3, r2
 8000c54:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <HAL_RCC_ClockConfig+0x15c>)
 8000c56:	5cd3      	ldrb	r3, [r2, r3]
 8000c58:	40d8      	lsrs	r0, r3
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <HAL_RCC_ClockConfig+0x160>)
 8000c5c:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f7ff fadc 	bl	800021c <HAL_InitTick>
  
  return HAL_OK;
 8000c64:	2000      	movs	r0, #0
}
 8000c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40022000 	.word	0x40022000
 8000c70:	40021000 	.word	0x40021000
 8000c74:	0800f9e4 	.word	0x0800f9e4
 8000c78:	20000000 	.word	0x20000000

08000c7c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000c7c:	4b01      	ldr	r3, [pc, #4]	; (8000c84 <HAL_RCC_GetHCLKFreq+0x8>)
 8000c7e:	6818      	ldr	r0, [r3, #0]
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000000 	.word	0x20000000

08000c88 <initEport>:

/** System Clock Configuration
 */
void initEport() {

__GPIOE_CLK_ENABLE( )
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <initEport+0x34>)

}

/** System Clock Configuration
 */
void initEport() {
 8000c8a:	b507      	push	{r0, r1, r2, lr}

__GPIOE_CLK_ENABLE( )
 8000c8c:	695a      	ldr	r2, [r3, #20]
;

GPIO_InitStruct.Pin = ( GPIO_PIN_15 | GPIO_PIN_14 | GPIO_PIN_13 | GPIO_PIN_12
 8000c8e:	490c      	ldr	r1, [pc, #48]	; (8000cc0 <initEport+0x38>)
		| GPIO_PIN_11 | GPIO_PIN_10 | GPIO_PIN_9 | GPIO_PIN_8);
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
GPIO_InitStruct.Pull = GPIO_PULLUP;
GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;

HAL_GPIO_Init( GPIOE, &GPIO_InitStruct);
 8000c90:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <initEport+0x3c>)

/** System Clock Configuration
 */
void initEport() {

__GPIOE_CLK_ENABLE( )
 8000c92:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000c96:	615a      	str	r2, [r3, #20]
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c9e:	9301      	str	r3, [sp, #4]
 8000ca0:	9b01      	ldr	r3, [sp, #4]
;

GPIO_InitStruct.Pin = ( GPIO_PIN_15 | GPIO_PIN_14 | GPIO_PIN_13 | GPIO_PIN_12
 8000ca2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000ca6:	600b      	str	r3, [r1, #0]
		| GPIO_PIN_11 | GPIO_PIN_10 | GPIO_PIN_9 | GPIO_PIN_8);
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	604b      	str	r3, [r1, #4]
GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cac:	608b      	str	r3, [r1, #8]
GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	60cb      	str	r3, [r1, #12]

HAL_GPIO_Init( GPIOE, &GPIO_InitStruct);
 8000cb2:	f7ff fbcf 	bl	8000454 <HAL_GPIO_Init>

}
 8000cb6:	b003      	add	sp, #12
 8000cb8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	20000024 	.word	0x20000024
 8000cc4:	48001000 	.word	0x48001000

08000cc8 <SystemClock_Config>:
void SystemClock_Config(void) {
 8000cc8:	b530      	push	{r4, r5, lr}
 8000cca:	b091      	sub	sp, #68	; 0x44

/**Initializes the CPU, AHB and APB busses clocks
 */
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
RCC_OscInitStruct.HSIState = RCC_HSI_ON;
RCC_OscInitStruct.HSICalibrationValue = 16;
 8000ccc:	2310      	movs	r3, #16
 8000cce:	930b      	str	r3, [sp, #44]	; 0x2c
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd0:	2300      	movs	r3, #0
RCC_OscInitTypeDef RCC_OscInitStruct;
RCC_ClkInitTypeDef RCC_ClkInitStruct;

/**Initializes the CPU, AHB and APB busses clocks
 */
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd2:	2402      	movs	r4, #2
RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cd4:	2501      	movs	r5, #1
RCC_OscInitStruct.HSICalibrationValue = 16;
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd6:	930e      	str	r3, [sp, #56]	; 0x38
RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000cd8:	a806      	add	r0, sp, #24
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
RCC_OscInitStruct.HSIState = RCC_HSI_ON;
RCC_OscInitStruct.HSICalibrationValue = 16;
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000cda:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
RCC_OscInitTypeDef RCC_OscInitStruct;
RCC_ClkInitTypeDef RCC_ClkInitStruct;

/**Initializes the CPU, AHB and APB busses clocks
 */
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cde:	9406      	str	r4, [sp, #24]
RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce0:	950a      	str	r5, [sp, #40]	; 0x28
RCC_OscInitStruct.HSICalibrationValue = 16;
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce2:	940d      	str	r4, [sp, #52]	; 0x34
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000ce4:	930f      	str	r3, [sp, #60]	; 0x3c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ce6:	f7ff fc7f 	bl	80005e8 <HAL_RCC_OscConfig>
 8000cea:	b100      	cbz	r0, 8000cee <SystemClock_Config+0x26>
 8000cec:	e7fe      	b.n	8000cec <SystemClock_Config+0x24>
	Error_Handler();
}

/**Initializes the CPU, AHB and APB busses clocks
 */
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000cee:	230f      	movs	r3, #15
 8000cf0:	9301      	str	r3, [sp, #4]
		| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf2:	9003      	str	r0, [sp, #12]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf8:	9005      	str	r0, [sp, #20]

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	a801      	add	r0, sp, #4

/**Initializes the CPU, AHB and APB busses clocks
 */
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
		| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfe:	9402      	str	r4, [sp, #8]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d00:	9304      	str	r3, [sp, #16]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000d02:	f7ff ff09 	bl	8000b18 <HAL_RCC_ClockConfig>
 8000d06:	4604      	mov	r4, r0
 8000d08:	b100      	cbz	r0, 8000d0c <SystemClock_Config+0x44>
 8000d0a:	e7fe      	b.n	8000d0a <SystemClock_Config+0x42>
	Error_Handler();
}

/**Configure the Systick interrupt time
 */
HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() /100000);
 8000d0c:	f7ff ffb6 	bl	8000c7c <HAL_RCC_GetHCLKFreq>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <SystemClock_Config+0x68>)
 8000d12:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d16:	f7ff fb09 	bl	800032c <HAL_SYSTICK_Config>

/**Configure the Systick
 */
HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000d1a:	2004      	movs	r0, #4
 8000d1c:	f7ff fb1c 	bl	8000358 <HAL_SYSTICK_CLKSourceConfig>

/* SysTick_IRQn interrupt configuration */
HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000d20:	4622      	mov	r2, r4
 8000d22:	4621      	mov	r1, r4
 8000d24:	f04f 30ff 	mov.w	r0, #4294967295
 8000d28:	f7ff facc 	bl	80002c4 <HAL_NVIC_SetPriority>
}
 8000d2c:	b011      	add	sp, #68	; 0x44
 8000d2e:	bd30      	pop	{r4, r5, pc}
 8000d30:	000186a0 	.word	0x000186a0

08000d34 <main>:

/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void) {
 8000d34:	b51f      	push	{r0, r1, r2, r3, r4, lr}

/* MCU Configuration----------------------------------------------------------*/

/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000d36:	f7ff fa85 	bl	8000244 <HAL_Init>

/* Configure the system clock */
SystemClock_Config();
 8000d3a:	f7ff ffc5 	bl	8000cc8 <SystemClock_Config>
/** Pinout Configuration
 */
static void MX_GPIO_Init(void) {

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOA_CLK_ENABLE()
 8000d3e:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <main+0x80>)

DAC_ChannelConfTypeDef sConfig;

/**DAC Initialization
 */
hdac.Instance = DAC;
 8000d40:	4c1d      	ldr	r4, [pc, #116]	; (8000db8 <main+0x84>)
/** Pinout Configuration
 */
static void MX_GPIO_Init(void) {

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOA_CLK_ENABLE()
 8000d42:	695a      	ldr	r2, [r3, #20]
 8000d44:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000d48:	615a      	str	r2, [r3, #20]
 8000d4a:	695b      	ldr	r3, [r3, #20]
 8000d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	9b00      	ldr	r3, [sp, #0]

DAC_ChannelConfTypeDef sConfig;

/**DAC Initialization
 */
hdac.Instance = DAC;
 8000d54:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <main+0x88>)
 8000d56:	6023      	str	r3, [r4, #0]
if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8000d58:	4620      	mov	r0, r4
 8000d5a:	f7ff fb0e 	bl	800037a <HAL_DAC_Init>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	b100      	cbz	r0, 8000d64 <main+0x30>
 8000d62:	e7fe      	b.n	8000d62 <main+0x2e>
	Error_Handler();
}

/**DAC channel OUT1 config
 */
sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d64:	9001      	str	r0, [sp, #4]
sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d66:	9002      	str	r0, [sp, #8]
if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8000d68:	a901      	add	r1, sp, #4
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	f7ff fb51 	bl	8000412 <HAL_DAC_ConfigChannel>
 8000d70:	4605      	mov	r5, r0
 8000d72:	b100      	cbz	r0, 8000d76 <main+0x42>
 8000d74:	e7fe      	b.n	8000d74 <main+0x40>
SystemClock_Config();

/* Initialize all configured peripherals */
MX_GPIO_Init();
MX_DAC_Init();
initEport();
 8000d76:	f7ff ff87 	bl	8000c88 <initEport>
/* USER CODE BEGIN 2 */
HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	4629      	mov	r1, r5
/* USER CODE BEGIN WHILE */
while (1)
{

	/* USER CODE END WHILE */
	if(j== sizeof(val))
 8000d7e:	4e10      	ldr	r6, [pc, #64]	; (8000dc0 <main+0x8c>)
/* Initialize all configured peripherals */
MX_GPIO_Init();
MX_DAC_Init();
initEport();
/* USER CODE BEGIN 2 */
HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 8000d80:	f7ff fb20 	bl	80003c4 <HAL_DAC_Start>
 8000d84:	4634      	mov	r4, r6
/* USER CODE BEGIN WHILE */
while (1)
{

	/* USER CODE END WHILE */
	if(j== sizeof(val))
 8000d86:	6832      	ldr	r2, [r6, #0]
	{
		j=0;
	}
	HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_8B_R,val[j]);
 8000d88:	480b      	ldr	r0, [pc, #44]	; (8000db8 <main+0x84>)
/* USER CODE BEGIN WHILE */
while (1)
{

	/* USER CODE END WHILE */
	if(j== sizeof(val))
 8000d8a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000d8e:	429a      	cmp	r2, r3
	{
		j=0;
 8000d90:	bf08      	it	eq
 8000d92:	6035      	streq	r5, [r6, #0]
	}
	HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_8B_R,val[j]);
 8000d94:	6822      	ldr	r2, [r4, #0]
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <main+0x90>)
 8000d98:	2100      	movs	r1, #0
 8000d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d9e:	2208      	movs	r2, #8
 8000da0:	f7ff fafe 	bl	80003a0 <HAL_DAC_SetValue>
	 HAL_Delay(2);
 8000da4:	2002      	movs	r0, #2
 8000da6:	f7ff fa6d 	bl	8000284 <HAL_Delay>
	 j++;
 8000daa:	6823      	ldr	r3, [r4, #0]
 8000dac:	3301      	adds	r3, #1
 8000dae:	6023      	str	r3, [r4, #0]

	}
 8000db0:	e7e9      	b.n	8000d86 <main+0x52>
 8000db2:	bf00      	nop
 8000db4:	40021000 	.word	0x40021000
 8000db8:	2000003c 	.word	0x2000003c
 8000dbc:	40007400 	.word	0x40007400
 8000dc0:	20000020 	.word	0x20000020
 8000dc4:	08000f84 	.word	0x08000f84

08000dc8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <HAL_MspInit+0x78>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dca:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dcc:	699a      	ldr	r2, [r3, #24]
 8000dce:	f042 0201 	orr.w	r2, r2, #1
 8000dd2:	619a      	str	r2, [r3, #24]
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ddc:	2007      	movs	r0, #7
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000de0:	f7ff fa5e 	bl	80002a0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000de4:	2200      	movs	r2, #0
 8000de6:	4611      	mov	r1, r2
 8000de8:	f06f 000b 	mvn.w	r0, #11
 8000dec:	f7ff fa6a 	bl	80002c4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	4611      	mov	r1, r2
 8000df4:	f06f 000a 	mvn.w	r0, #10
 8000df8:	f7ff fa64 	bl	80002c4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	4611      	mov	r1, r2
 8000e00:	f06f 0009 	mvn.w	r0, #9
 8000e04:	f7ff fa5e 	bl	80002c4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	f06f 0004 	mvn.w	r0, #4
 8000e10:	f7ff fa58 	bl	80002c4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	4611      	mov	r1, r2
 8000e18:	f06f 0003 	mvn.w	r0, #3
 8000e1c:	f7ff fa52 	bl	80002c4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	4611      	mov	r1, r2
 8000e24:	f06f 0001 	mvn.w	r0, #1
 8000e28:	f7ff fa4c 	bl	80002c4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	4611      	mov	r1, r2
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f7ff fa46 	bl	80002c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e38:	b003      	add	sp, #12
 8000e3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e3e:	bf00      	nop
 8000e40:	40021000 	.word	0x40021000

08000e44 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdac->Instance==DAC)
 8000e46:	6802      	ldr	r2, [r0, #0]
 8000e48:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <HAL_DAC_MspInit+0x3c>)
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d115      	bne.n	8000e7a <HAL_DAC_MspInit+0x36>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000e4e:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	a901      	add	r1, sp, #4
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000e54:	69da      	ldr	r2, [r3, #28]
 8000e56:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000e5a:	61da      	str	r2, [r3, #28]
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	9b00      	ldr	r3, [sp, #0]
  
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e66:	2310      	movs	r3, #16
 8000e68:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f7ff faed 	bl	8000454 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000e7a:	b007      	add	sp, #28
 8000e7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e80:	40007400 	.word	0x40007400

08000e84 <SVC_Handler>:
 8000e84:	4770      	bx	lr

08000e86 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000e86:	4770      	bx	lr

08000e88 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000e88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e8a:	f7ff f9ed 	bl	8000268 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8000e92:	f7ff ba6e 	b.w	8000372 <HAL_SYSTICK_IRQHandler>
	...

08000e98 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e98:	4915      	ldr	r1, [pc, #84]	; (8000ef0 <SystemInit+0x58>)
 8000e9a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000e9e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <SystemInit+0x5c>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	f042 0201 	orr.w	r2, r2, #1
 8000eae:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000eb0:	6858      	ldr	r0, [r3, #4]
 8000eb2:	4a11      	ldr	r2, [pc, #68]	; (8000ef8 <SystemInit+0x60>)
 8000eb4:	4002      	ands	r2, r0
 8000eb6:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000ebe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ec2:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000eca:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000ed2:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8000ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ed6:	f022 020f 	bic.w	r2, r2, #15
 8000eda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8000edc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000ede:	4a07      	ldr	r2, [pc, #28]	; (8000efc <SystemInit+0x64>)
 8000ee0:	4002      	ands	r2, r0
 8000ee2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ee8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000eec:	608b      	str	r3, [r1, #8]
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	f87fc00c 	.word	0xf87fc00c
 8000efc:	ff00fccc 	.word	0xff00fccc

08000f00 <__libc_init_array>:
 8000f00:	b570      	push	{r4, r5, r6, lr}
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <__libc_init_array+0x3c>)
 8000f04:	4c0e      	ldr	r4, [pc, #56]	; (8000f40 <__libc_init_array+0x40>)
 8000f06:	1ae4      	subs	r4, r4, r3
 8000f08:	10a4      	asrs	r4, r4, #2
 8000f0a:	2500      	movs	r5, #0
 8000f0c:	461e      	mov	r6, r3
 8000f0e:	42a5      	cmp	r5, r4
 8000f10:	d004      	beq.n	8000f1c <__libc_init_array+0x1c>
 8000f12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f16:	4798      	blx	r3
 8000f18:	3501      	adds	r5, #1
 8000f1a:	e7f8      	b.n	8000f0e <__libc_init_array+0xe>
 8000f1c:	f000 f816 	bl	8000f4c <_init>
 8000f20:	4c08      	ldr	r4, [pc, #32]	; (8000f44 <__libc_init_array+0x44>)
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <__libc_init_array+0x48>)
 8000f24:	1ae4      	subs	r4, r4, r3
 8000f26:	10a4      	asrs	r4, r4, #2
 8000f28:	2500      	movs	r5, #0
 8000f2a:	461e      	mov	r6, r3
 8000f2c:	42a5      	cmp	r5, r4
 8000f2e:	d004      	beq.n	8000f3a <__libc_init_array+0x3a>
 8000f30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f34:	4798      	blx	r3
 8000f36:	3501      	adds	r5, #1
 8000f38:	e7f8      	b.n	8000f2c <__libc_init_array+0x2c>
 8000f3a:	bd70      	pop	{r4, r5, r6, pc}
 8000f3c:	0800f9f4 	.word	0x0800f9f4
 8000f40:	0800f9f4 	.word	0x0800f9f4
 8000f44:	0800f9f8 	.word	0x0800f9f8
 8000f48:	0800f9f4 	.word	0x0800f9f4

08000f4c <_init>:
 8000f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f4e:	bf00      	nop
 8000f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f52:	bc08      	pop	{r3}
 8000f54:	469e      	mov	lr, r3
 8000f56:	4770      	bx	lr

08000f58 <_fini>:
 8000f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5a:	bf00      	nop
 8000f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f5e:	bc08      	pop	{r3}
 8000f60:	469e      	mov	lr, r3
 8000f62:	4770      	bx	lr
