
D:\Embedded programmimg principles\interrupt\Debug\interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001480  08001480  00011480  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080014b0  080014b0  000114b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080014b4  080014b4  000114b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  080014b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
  7 .bss          00000074  20000008  20000008  00020008  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000007c  2000007c  00020008  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 10 .debug_line   0000360d  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00009305  00000000  00000000  00023645  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001565  00000000  00000000  0002c94a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000688  00000000  00000000  0002deb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000009a8  00000000  00000000  0002e538  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004dd2  00000000  00000000  0002eee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002658  00000000  00000000  00033cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  0003630a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000127c  00000000  00000000  00036388  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001468 	.word	0x08001468

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08001468 	.word	0x08001468

080001c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80001c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000200 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80001cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80001ce:	e003      	b.n	80001d8 <LoopCopyDataInit>

080001d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80001d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80001d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80001d6:	3104      	adds	r1, #4

080001d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <LoopForever+0xa>)
	ldr	r3, =_edata
 80001da:	4b0c      	ldr	r3, [pc, #48]	; (800020c <LoopForever+0xe>)
	adds	r2, r0, r1
 80001dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80001de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80001e0:	d3f6      	bcc.n	80001d0 <CopyDataInit>
	ldr	r2, =_sbss
 80001e2:	4a0b      	ldr	r2, [pc, #44]	; (8000210 <LoopForever+0x12>)
	b	LoopFillZerobss
 80001e4:	e002      	b.n	80001ec <LoopFillZerobss>

080001e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80001e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80001e8:	f842 3b04 	str.w	r3, [r2], #4

080001ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <LoopForever+0x16>)
	cmp	r2, r3
 80001ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80001f0:	d3f9      	bcc.n	80001e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80001f2:	f001 f8df 	bl	80013b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001f6:	f001 f911 	bl	800141c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80001fa:	f000 ff89 	bl	8001110 <main>

080001fe <LoopForever>:

LoopForever:
    b LoopForever
 80001fe:	e7fe      	b.n	80001fe <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000200:	2000a000 	.word	0x2000a000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000204:	080014b8 	.word	0x080014b8
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000208:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800020c:	20000008 	.word	0x20000008
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000210:	20000008 	.word	0x20000008
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000214:	2000007c 	.word	0x2000007c

08000218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000218:	e7fe      	b.n	8000218 <ADC1_2_IRQHandler>
	...

0800021c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800021c:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 800021e:	4b08      	ldr	r3, [pc, #32]	; (8000240 <HAL_InitTick+0x24>)
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000220:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 8000222:	6818      	ldr	r0, [r3, #0]
 8000224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000228:	fbb0 f0f3 	udiv	r0, r0, r3
 800022c:	f000 f87c 	bl	8000328 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000230:	2200      	movs	r2, #0
 8000232:	4621      	mov	r1, r4
 8000234:	f04f 30ff 	mov.w	r0, #4294967295
 8000238:	f000 f836 	bl	80002a8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800023c:	2000      	movs	r0, #0
 800023e:	bd10      	pop	{r4, pc}
 8000240:	20000004 	.word	0x20000004

08000244 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000244:	4a07      	ldr	r2, [pc, #28]	; (8000264 <HAL_Init+0x20>)
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000246:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000248:	6813      	ldr	r3, [r2, #0]
 800024a:	f043 0310 	orr.w	r3, r3, #16
 800024e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000250:	2003      	movs	r0, #3
 8000252:	f000 f817 	bl	8000284 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000256:	2000      	movs	r0, #0
 8000258:	f7ff ffe0 	bl	800021c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800025c:	f001 f840 	bl	80012e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000260:	2000      	movs	r0, #0
 8000262:	bd08      	pop	{r3, pc}
 8000264:	40022000 	.word	0x40022000

08000268 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000268:	4a02      	ldr	r2, [pc, #8]	; (8000274 <HAL_IncTick+0xc>)
 800026a:	6813      	ldr	r3, [r2, #0]
 800026c:	3301      	adds	r3, #1
 800026e:	6013      	str	r3, [r2, #0]
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	2000003c 	.word	0x2000003c

08000278 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000278:	4b01      	ldr	r3, [pc, #4]	; (8000280 <HAL_GetTick+0x8>)
 800027a:	6818      	ldr	r0, [r3, #0]
}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	2000003c 	.word	0x2000003c

08000284 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000284:	4a07      	ldr	r2, [pc, #28]	; (80002a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000286:	68d3      	ldr	r3, [r2, #12]
 8000288:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800028c:	041b      	lsls	r3, r3, #16
 800028e:	0c1b      	lsrs	r3, r3, #16
 8000290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000294:	0200      	lsls	r0, r0, #8
 8000296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800029a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800029e:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80002a0:	60d3      	str	r3, [r2, #12]
 80002a2:	4770      	bx	lr
 80002a4:	e000ed00 	.word	0xe000ed00

080002a8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a8:	4b17      	ldr	r3, [pc, #92]	; (8000308 <HAL_NVIC_SetPriority+0x60>)
 80002aa:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002ac:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002b0:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002b2:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002b6:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002b8:	2c04      	cmp	r4, #4
 80002ba:	bf28      	it	cs
 80002bc:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002be:	2d06      	cmp	r5, #6

  return (
 80002c0:	f04f 0501 	mov.w	r5, #1
 80002c4:	fa05 f404 	lsl.w	r4, r5, r4
 80002c8:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002cc:	bf8c      	ite	hi
 80002ce:	3b03      	subhi	r3, #3
 80002d0:	2300      	movls	r3, #0

  return (
 80002d2:	400c      	ands	r4, r1
 80002d4:	409c      	lsls	r4, r3
 80002d6:	fa05 f303 	lsl.w	r3, r5, r3
 80002da:	3b01      	subs	r3, #1
 80002dc:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002de:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80002e0:	ea42 0204 	orr.w	r2, r2, r4
 80002e4:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e8:	bfaf      	iteee	ge
 80002ea:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ee:	f000 000f 	andlt.w	r0, r0, #15
 80002f2:	4b06      	ldrlt	r3, [pc, #24]	; (800030c <HAL_NVIC_SetPriority+0x64>)
 80002f4:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f6:	bfa5      	ittet	ge
 80002f8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002fc:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fe:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000300:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000304:	bd30      	pop	{r4, r5, pc}
 8000306:	bf00      	nop
 8000308:	e000ed00 	.word	0xe000ed00
 800030c:	e000ed14 	.word	0xe000ed14

08000310 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000310:	0942      	lsrs	r2, r0, #5
 8000312:	2301      	movs	r3, #1
 8000314:	f000 001f 	and.w	r0, r0, #31
 8000318:	fa03 f000 	lsl.w	r0, r3, r0
 800031c:	4b01      	ldr	r3, [pc, #4]	; (8000324 <HAL_NVIC_EnableIRQ+0x14>)
 800031e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000322:	4770      	bx	lr
 8000324:	e000e100 	.word	0xe000e100

08000328 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000328:	3801      	subs	r0, #1
 800032a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800032e:	d20a      	bcs.n	8000346 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000332:	4a07      	ldr	r2, [pc, #28]	; (8000350 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000334:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000336:	21f0      	movs	r1, #240	; 0xf0
 8000338:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800033c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800033e:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000340:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000342:	601a      	str	r2, [r3, #0]
 8000344:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000346:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	e000e010 	.word	0xe000e010
 8000350:	e000ed00 	.word	0xe000ed00

08000354 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000354:	4b04      	ldr	r3, [pc, #16]	; (8000368 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000356:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000358:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800035a:	bf0c      	ite	eq
 800035c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000360:	f022 0204 	bicne.w	r2, r2, #4
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	4770      	bx	lr
 8000368:	e000e010 	.word	0xe000e010

0800036c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800036c:	4770      	bx	lr

0800036e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800036e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000370:	f7ff fffc 	bl	800036c <HAL_SYSTICK_Callback>
 8000374:	bd08      	pop	{r3, pc}
	...

08000378 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800037c:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8000504 <HAL_GPIO_Init+0x18c>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000380:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000382:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8000508 <HAL_GPIO_Init+0x190>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000386:	b085      	sub	sp, #20
 8000388:	464c      	mov	r4, r9
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800038a:	9301      	str	r3, [sp, #4]
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00;
 800038c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800038e:	9a01      	ldr	r2, [sp, #4]
 8000390:	40da      	lsrs	r2, r3
 8000392:	f000 80b1 	beq.w	80004f8 <HAL_GPIO_Init+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000396:	2201      	movs	r2, #1
 8000398:	fa02 fa03 	lsl.w	sl, r2, r3

    if(iocurrent)
 800039c:	9a01      	ldr	r2, [sp, #4]
 800039e:	ea12 060a 	ands.w	r6, r2, sl
 80003a2:	f000 80a7 	beq.w	80004f4 <HAL_GPIO_Init+0x17c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80003a6:	684a      	ldr	r2, [r1, #4]
 80003a8:	f022 0e10 	bic.w	lr, r2, #16
 80003ac:	f1be 0f02 	cmp.w	lr, #2
 80003b0:	d114      	bne.n	80003dc <HAL_GPIO_Init+0x64>
 80003b2:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80003b6:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80003ba:	f003 0b07 	and.w	fp, r3, #7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80003be:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80003c2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80003c6:	250f      	movs	r5, #15
 80003c8:	fa05 f50b 	lsl.w	r5, r5, fp
 80003cc:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80003d0:	690f      	ldr	r7, [r1, #16]
 80003d2:	fa07 f70b 	lsl.w	r7, r7, fp
 80003d6:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3] = temp;
 80003d8:	f8cc 7020 	str.w	r7, [ip, #32]
 80003dc:	ea4f 0b43 	mov.w	fp, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80003e0:	2703      	movs	r7, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80003e2:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80003e4:	fa07 fc0b 	lsl.w	ip, r7, fp
 80003e8:	ea6f 0c0c 	mvn.w	ip, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80003ec:	4017      	ands	r7, r2
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80003ee:	ea05 050c 	and.w	r5, r5, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80003f2:	fa07 f70b 	lsl.w	r7, r7, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003f6:	f10e 3eff 	add.w	lr, lr, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80003fa:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003fc:	f1be 0f01 	cmp.w	lr, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 8000400:	6005      	str	r5, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000402:	d810      	bhi.n	8000426 <HAL_GPIO_Init+0xae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000404:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
 8000406:	68cf      	ldr	r7, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000408:	ea0c 0505 	and.w	r5, ip, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 800040c:	fa07 f70b 	lsl.w	r7, r7, fp
 8000410:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8000412:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000414:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000416:	ea25 0a0a 	bic.w	sl, r5, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800041a:	f3c2 1500 	ubfx	r5, r2, #4, #1
 800041e:	409d      	lsls	r5, r3
 8000420:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->OTYPER = temp;
 8000424:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000426:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000428:	ea0c 0c05 	and.w	ip, ip, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800042c:	688d      	ldr	r5, [r1, #8]
 800042e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000432:	ea45 050c 	orr.w	r5, r5, ip
      GPIOx->PUPDR = temp;
 8000436:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000438:	00d5      	lsls	r5, r2, #3
 800043a:	d55b      	bpl.n	80004f4 <HAL_GPIO_Init+0x17c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800043c:	f8d8 5018 	ldr.w	r5, [r8, #24]
 8000440:	f045 0501 	orr.w	r5, r5, #1
 8000444:	f8c8 5018 	str.w	r5, [r8, #24]
 8000448:	f8d8 5018 	ldr.w	r5, [r8, #24]
 800044c:	f023 0e03 	bic.w	lr, r3, #3
 8000450:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8000454:	f005 0501 	and.w	r5, r5, #1
 8000458:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 800045c:	9503      	str	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800045e:	f003 0c03 	and.w	ip, r3, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000462:	9d03      	ldr	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000464:	f8de 5008 	ldr.w	r5, [lr, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000468:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800046c:	270f      	movs	r7, #15
 800046e:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000472:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000476:	ea25 0507 	bic.w	r5, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800047a:	d011      	beq.n	80004a0 <HAL_GPIO_Init+0x128>
 800047c:	4f20      	ldr	r7, [pc, #128]	; (8000500 <HAL_GPIO_Init+0x188>)
 800047e:	42b8      	cmp	r0, r7
 8000480:	d010      	beq.n	80004a4 <HAL_GPIO_Init+0x12c>
 8000482:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000486:	42b8      	cmp	r0, r7
 8000488:	d00e      	beq.n	80004a8 <HAL_GPIO_Init+0x130>
 800048a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800048e:	42b8      	cmp	r0, r7
 8000490:	d00c      	beq.n	80004ac <HAL_GPIO_Init+0x134>
 8000492:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000496:	42b8      	cmp	r0, r7
 8000498:	bf14      	ite	ne
 800049a:	2705      	movne	r7, #5
 800049c:	2704      	moveq	r7, #4
 800049e:	e006      	b.n	80004ae <HAL_GPIO_Init+0x136>
 80004a0:	2700      	movs	r7, #0
 80004a2:	e004      	b.n	80004ae <HAL_GPIO_Init+0x136>
 80004a4:	2701      	movs	r7, #1
 80004a6:	e002      	b.n	80004ae <HAL_GPIO_Init+0x136>
 80004a8:	2702      	movs	r7, #2
 80004aa:	e000      	b.n	80004ae <HAL_GPIO_Init+0x136>
 80004ac:	2703      	movs	r7, #3
 80004ae:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b2:	ea4c 0505 	orr.w	r5, ip, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 80004b6:	f8ce 5008 	str.w	r5, [lr, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80004ba:	f8d9 5000 	ldr.w	r5, [r9]
        temp &= ~((uint32_t)iocurrent);
 80004be:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004c0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 80004c4:	bf0c      	ite	eq
 80004c6:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 80004c8:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80004ca:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 80004cc:	6865      	ldr	r5, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004ce:	f412 3f00 	tst.w	r2, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 80004d2:	bf0c      	ite	eq
 80004d4:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 80004d6:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80004d8:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80004da:	68a5      	ldr	r5, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004dc:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 80004e0:	bf0c      	ite	eq
 80004e2:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 80004e4:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80004e6:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80004e8:	68e5      	ldr	r5, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004ea:	0292      	lsls	r2, r2, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 80004ec:	bf54      	ite	pl
 80004ee:	403d      	andpl	r5, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 80004f0:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80004f2:	60e5      	str	r5, [r4, #12]
      }
    }
    
    position++;
 80004f4:	3301      	adds	r3, #1
 80004f6:	e74a      	b.n	800038e <HAL_GPIO_Init+0x16>
  }
}
 80004f8:	b005      	add	sp, #20
 80004fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80004fe:	bf00      	nop
 8000500:	48000400 	.word	0x48000400
 8000504:	40010400 	.word	0x40010400
 8000508:	40021000 	.word	0x40021000

0800050c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800050c:	6903      	ldr	r3, [r0, #16]
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800050e:	4219      	tst	r1, r3
}
 8000510:	bf14      	ite	ne
 8000512:	2001      	movne	r0, #1
 8000514:	2000      	moveq	r0, #0
 8000516:	4770      	bx	lr

08000518 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000518:	b10a      	cbz	r2, 800051e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800051a:	6181      	str	r1, [r0, #24]
 800051c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800051e:	6281      	str	r1, [r0, #40]	; 0x28
 8000520:	4770      	bx	lr

08000522 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000522:	6943      	ldr	r3, [r0, #20]
 8000524:	4059      	eors	r1, r3
 8000526:	6141      	str	r1, [r0, #20]
 8000528:	4770      	bx	lr
	...

0800052c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800052c:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800052e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000532:	07de      	lsls	r6, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000534:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000536:	d403      	bmi.n	8000540 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000538:	682b      	ldr	r3, [r5, #0]
 800053a:	079c      	lsls	r4, r3, #30
 800053c:	d471      	bmi.n	8000622 <HAL_RCC_OscConfig+0xf6>
 800053e:	e0f0      	b.n	8000722 <HAL_RCC_OscConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000540:	4cb3      	ldr	r4, [pc, #716]	; (8000810 <HAL_RCC_OscConfig+0x2e4>)
 8000542:	6863      	ldr	r3, [r4, #4]
 8000544:	f003 030c 	and.w	r3, r3, #12
 8000548:	2b04      	cmp	r3, #4
 800054a:	d007      	beq.n	800055c <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800054c:	6863      	ldr	r3, [r4, #4]
 800054e:	f003 030c 	and.w	r3, r3, #12
 8000552:	2b08      	cmp	r3, #8
 8000554:	d116      	bne.n	8000584 <HAL_RCC_OscConfig+0x58>
 8000556:	6863      	ldr	r3, [r4, #4]
 8000558:	03d8      	lsls	r0, r3, #15
 800055a:	d513      	bpl.n	8000584 <HAL_RCC_OscConfig+0x58>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800055c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000560:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000564:	6822      	ldr	r2, [r4, #0]
 8000566:	fa93 f3a3 	rbit	r3, r3
 800056a:	fab3 f383 	clz	r3, r3
 800056e:	f003 031f 	and.w	r3, r3, #31
 8000572:	fa22 f303 	lsr.w	r3, r2, r3
 8000576:	07d9      	lsls	r1, r3, #31
 8000578:	d5de      	bpl.n	8000538 <HAL_RCC_OscConfig+0xc>
 800057a:	686b      	ldr	r3, [r5, #4]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d1db      	bne.n	8000538 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8000580:	2001      	movs	r0, #1
 8000582:	e233      	b.n	80009ec <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000584:	686b      	ldr	r3, [r5, #4]
 8000586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800058a:	d007      	beq.n	800059c <HAL_RCC_OscConfig+0x70>
 800058c:	6822      	ldr	r2, [r4, #0]
 800058e:	b14b      	cbz	r3, 80005a4 <HAL_RCC_OscConfig+0x78>
 8000590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000594:	d106      	bne.n	80005a4 <HAL_RCC_OscConfig+0x78>
 8000596:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800059a:	6022      	str	r2, [r4, #0]
 800059c:	6822      	ldr	r2, [r4, #0]
 800059e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80005a2:	e005      	b.n	80005b0 <HAL_RCC_OscConfig+0x84>
 80005a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005a8:	6022      	str	r2, [r4, #0]
 80005aa:	6822      	ldr	r2, [r4, #0]
 80005ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005b0:	6022      	str	r2, [r4, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80005b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80005b4:	f022 010f 	bic.w	r1, r2, #15
 80005b8:	68aa      	ldr	r2, [r5, #8]
 80005ba:	430a      	orrs	r2, r1
 80005bc:	62e2      	str	r2, [r4, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80005be:	b1c3      	cbz	r3, 80005f2 <HAL_RCC_OscConfig+0xc6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80005c0:	f7ff fe5a 	bl	8000278 <HAL_GetTick>
 80005c4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80005c8:	4607      	mov	r7, r0
 80005ca:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005ce:	6822      	ldr	r2, [r4, #0]
 80005d0:	fa96 f3a6 	rbit	r3, r6
 80005d4:	fab3 f383 	clz	r3, r3
 80005d8:	f003 031f 	and.w	r3, r3, #31
 80005dc:	fa22 f303 	lsr.w	r3, r2, r3
 80005e0:	07da      	lsls	r2, r3, #31
 80005e2:	d4a9      	bmi.n	8000538 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005e4:	f7ff fe48 	bl	8000278 <HAL_GetTick>
 80005e8:	1bc0      	subs	r0, r0, r7
 80005ea:	2864      	cmp	r0, #100	; 0x64
 80005ec:	d9ed      	bls.n	80005ca <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 80005ee:	2003      	movs	r0, #3
 80005f0:	e1fc      	b.n	80009ec <HAL_RCC_OscConfig+0x4c0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80005f2:	f7ff fe41 	bl	8000278 <HAL_GetTick>
 80005f6:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80005fa:	4607      	mov	r7, r0
 80005fc:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000600:	6822      	ldr	r2, [r4, #0]
 8000602:	fa96 f3a6 	rbit	r3, r6
 8000606:	fab3 f383 	clz	r3, r3
 800060a:	f003 031f 	and.w	r3, r3, #31
 800060e:	fa22 f303 	lsr.w	r3, r2, r3
 8000612:	07db      	lsls	r3, r3, #31
 8000614:	d590      	bpl.n	8000538 <HAL_RCC_OscConfig+0xc>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000616:	f7ff fe2f 	bl	8000278 <HAL_GetTick>
 800061a:	1bc0      	subs	r0, r0, r7
 800061c:	2864      	cmp	r0, #100	; 0x64
 800061e:	d9ed      	bls.n	80005fc <HAL_RCC_OscConfig+0xd0>
 8000620:	e7e5      	b.n	80005ee <HAL_RCC_OscConfig+0xc2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000622:	4c7b      	ldr	r4, [pc, #492]	; (8000810 <HAL_RCC_OscConfig+0x2e4>)
 8000624:	6863      	ldr	r3, [r4, #4]
 8000626:	f013 0f0c 	tst.w	r3, #12
 800062a:	d007      	beq.n	800063c <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800062c:	6863      	ldr	r3, [r4, #4]
 800062e:	f003 030c 	and.w	r3, r3, #12
 8000632:	2b08      	cmp	r3, #8
 8000634:	d121      	bne.n	800067a <HAL_RCC_OscConfig+0x14e>
 8000636:	6863      	ldr	r3, [r4, #4]
 8000638:	03d8      	lsls	r0, r3, #15
 800063a:	d41e      	bmi.n	800067a <HAL_RCC_OscConfig+0x14e>
 800063c:	2302      	movs	r3, #2
 800063e:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000642:	6822      	ldr	r2, [r4, #0]
 8000644:	fa93 f3a3 	rbit	r3, r3
 8000648:	fab3 f383 	clz	r3, r3
 800064c:	f003 031f 	and.w	r3, r3, #31
 8000650:	fa22 f303 	lsr.w	r3, r2, r3
 8000654:	07d9      	lsls	r1, r3, #31
 8000656:	d502      	bpl.n	800065e <HAL_RCC_OscConfig+0x132>
 8000658:	692b      	ldr	r3, [r5, #16]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d190      	bne.n	8000580 <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800065e:	6823      	ldr	r3, [r4, #0]
 8000660:	22f8      	movs	r2, #248	; 0xf8
 8000662:	fa92 f2a2 	rbit	r2, r2
 8000666:	6969      	ldr	r1, [r5, #20]
 8000668:	fab2 f282 	clz	r2, r2
 800066c:	fa01 f202 	lsl.w	r2, r1, r2
 8000670:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000674:	4313      	orrs	r3, r2
 8000676:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000678:	e053      	b.n	8000722 <HAL_RCC_OscConfig+0x1f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800067a:	692a      	ldr	r2, [r5, #16]
 800067c:	2301      	movs	r3, #1
 800067e:	b37a      	cbz	r2, 80006e0 <HAL_RCC_OscConfig+0x1b4>
 8000680:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000684:	fab2 f282 	clz	r2, r2
 8000688:	0092      	lsls	r2, r2, #2
 800068a:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 800068e:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 8000692:	2602      	movs	r6, #2
 8000694:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000696:	f7ff fdef 	bl	8000278 <HAL_GetTick>
 800069a:	4607      	mov	r7, r0
 800069c:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006a0:	485b      	ldr	r0, [pc, #364]	; (8000810 <HAL_RCC_OscConfig+0x2e4>)
 80006a2:	6822      	ldr	r2, [r4, #0]
 80006a4:	fa96 f3a6 	rbit	r3, r6
 80006a8:	fab3 f383 	clz	r3, r3
 80006ac:	f003 031f 	and.w	r3, r3, #31
 80006b0:	fa22 f303 	lsr.w	r3, r2, r3
 80006b4:	07da      	lsls	r2, r3, #31
 80006b6:	d405      	bmi.n	80006c4 <HAL_RCC_OscConfig+0x198>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006b8:	f7ff fdde 	bl	8000278 <HAL_GetTick>
 80006bc:	1bc0      	subs	r0, r0, r7
 80006be:	2802      	cmp	r0, #2
 80006c0:	d9ec      	bls.n	800069c <HAL_RCC_OscConfig+0x170>
 80006c2:	e794      	b.n	80005ee <HAL_RCC_OscConfig+0xc2>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006c4:	6803      	ldr	r3, [r0, #0]
 80006c6:	22f8      	movs	r2, #248	; 0xf8
 80006c8:	fa92 f2a2 	rbit	r2, r2
 80006cc:	6969      	ldr	r1, [r5, #20]
 80006ce:	fab2 f282 	clz	r2, r2
 80006d2:	fa01 f202 	lsl.w	r2, r1, r2
 80006d6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80006da:	4313      	orrs	r3, r2
 80006dc:	6003      	str	r3, [r0, #0]
 80006de:	e020      	b.n	8000722 <HAL_RCC_OscConfig+0x1f6>
 80006e0:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80006e4:	fab3 f383 	clz	r3, r3
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80006ee:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80006f2:	2602      	movs	r6, #2
 80006f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80006f6:	f7ff fdbf 	bl	8000278 <HAL_GetTick>
 80006fa:	4607      	mov	r7, r0
 80006fc:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000700:	6822      	ldr	r2, [r4, #0]
 8000702:	fa96 f3a6 	rbit	r3, r6
 8000706:	fab3 f383 	clz	r3, r3
 800070a:	f003 031f 	and.w	r3, r3, #31
 800070e:	fa22 f303 	lsr.w	r3, r2, r3
 8000712:	07db      	lsls	r3, r3, #31
 8000714:	d505      	bpl.n	8000722 <HAL_RCC_OscConfig+0x1f6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000716:	f7ff fdaf 	bl	8000278 <HAL_GetTick>
 800071a:	1bc0      	subs	r0, r0, r7
 800071c:	2802      	cmp	r0, #2
 800071e:	d9ed      	bls.n	80006fc <HAL_RCC_OscConfig+0x1d0>
 8000720:	e765      	b.n	80005ee <HAL_RCC_OscConfig+0xc2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000722:	682b      	ldr	r3, [r5, #0]
 8000724:	0718      	lsls	r0, r3, #28
 8000726:	d403      	bmi.n	8000730 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000728:	682b      	ldr	r3, [r5, #0]
 800072a:	0759      	lsls	r1, r3, #29
 800072c:	d447      	bmi.n	80007be <HAL_RCC_OscConfig+0x292>
 800072e:	e0da      	b.n	80008e6 <HAL_RCC_OscConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000730:	69aa      	ldr	r2, [r5, #24]
 8000732:	4c37      	ldr	r4, [pc, #220]	; (8000810 <HAL_RCC_OscConfig+0x2e4>)
 8000734:	4937      	ldr	r1, [pc, #220]	; (8000814 <HAL_RCC_OscConfig+0x2e8>)
 8000736:	2301      	movs	r3, #1
 8000738:	b302      	cbz	r2, 800077c <HAL_RCC_OscConfig+0x250>
 800073a:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800073e:	fab2 f282 	clz	r2, r2
 8000742:	2602      	movs	r6, #2
 8000744:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000748:	f7ff fd96 	bl	8000278 <HAL_GetTick>
 800074c:	4607      	mov	r7, r0
 800074e:	fa96 f3a6 	rbit	r3, r6
 8000752:	fa96 f3a6 	rbit	r3, r6
 8000756:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800075a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800075c:	fa96 f3a6 	rbit	r3, r6
 8000760:	fab3 f383 	clz	r3, r3
 8000764:	f003 031f 	and.w	r3, r3, #31
 8000768:	fa22 f303 	lsr.w	r3, r2, r3
 800076c:	07da      	lsls	r2, r3, #31
 800076e:	d4db      	bmi.n	8000728 <HAL_RCC_OscConfig+0x1fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000770:	f7ff fd82 	bl	8000278 <HAL_GetTick>
 8000774:	1bc0      	subs	r0, r0, r7
 8000776:	2802      	cmp	r0, #2
 8000778:	d9e9      	bls.n	800074e <HAL_RCC_OscConfig+0x222>
 800077a:	e738      	b.n	80005ee <HAL_RCC_OscConfig+0xc2>
 800077c:	fa93 f3a3 	rbit	r3, r3
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000780:	fab3 f383 	clz	r3, r3
 8000784:	2602      	movs	r6, #2
 8000786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800078a:	f7ff fd75 	bl	8000278 <HAL_GetTick>
 800078e:	4607      	mov	r7, r0
 8000790:	fa96 f3a6 	rbit	r3, r6
 8000794:	fa96 f3a6 	rbit	r3, r6
 8000798:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800079c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800079e:	fa96 f3a6 	rbit	r3, r6
 80007a2:	fab3 f383 	clz	r3, r3
 80007a6:	f003 031f 	and.w	r3, r3, #31
 80007aa:	fa22 f303 	lsr.w	r3, r2, r3
 80007ae:	07db      	lsls	r3, r3, #31
 80007b0:	d5ba      	bpl.n	8000728 <HAL_RCC_OscConfig+0x1fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007b2:	f7ff fd61 	bl	8000278 <HAL_GetTick>
 80007b6:	1bc0      	subs	r0, r0, r7
 80007b8:	2802      	cmp	r0, #2
 80007ba:	d9e9      	bls.n	8000790 <HAL_RCC_OscConfig+0x264>
 80007bc:	e717      	b.n	80005ee <HAL_RCC_OscConfig+0xc2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007be:	4c14      	ldr	r4, [pc, #80]	; (8000810 <HAL_RCC_OscConfig+0x2e4>)
 80007c0:	69e3      	ldr	r3, [r4, #28]
 80007c2:	00de      	lsls	r6, r3, #3
 80007c4:	d40a      	bmi.n	80007dc <HAL_RCC_OscConfig+0x2b0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	69e3      	ldr	r3, [r4, #28]
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007cc:	61e3      	str	r3, [r4, #28]
 80007ce:	69e3      	ldr	r3, [r4, #28]
 80007d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d4:	9301      	str	r3, [sp, #4]
 80007d6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80007d8:	2701      	movs	r7, #1
 80007da:	e000      	b.n	80007de <HAL_RCC_OscConfig+0x2b2>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 80007dc:	2700      	movs	r7, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007de:	4e0e      	ldr	r6, [pc, #56]	; (8000818 <HAL_RCC_OscConfig+0x2ec>)
 80007e0:	6833      	ldr	r3, [r6, #0]
 80007e2:	05d8      	lsls	r0, r3, #23
 80007e4:	d503      	bpl.n	80007ee <HAL_RCC_OscConfig+0x2c2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007e6:	68eb      	ldr	r3, [r5, #12]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d117      	bne.n	800081c <HAL_RCC_OscConfig+0x2f0>
 80007ec:	e02d      	b.n	800084a <HAL_RCC_OscConfig+0x31e>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80007ee:	6833      	ldr	r3, [r6, #0]
 80007f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007f4:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80007f6:	f7ff fd3f 	bl	8000278 <HAL_GetTick>
 80007fa:	4680      	mov	r8, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007fc:	6833      	ldr	r3, [r6, #0]
 80007fe:	05d9      	lsls	r1, r3, #23
 8000800:	d4f1      	bmi.n	80007e6 <HAL_RCC_OscConfig+0x2ba>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000802:	f7ff fd39 	bl	8000278 <HAL_GetTick>
 8000806:	ebc8 0000 	rsb	r0, r8, r0
 800080a:	2864      	cmp	r0, #100	; 0x64
 800080c:	d9f6      	bls.n	80007fc <HAL_RCC_OscConfig+0x2d0>
 800080e:	e6ee      	b.n	80005ee <HAL_RCC_OscConfig+0xc2>
 8000810:	40021000 	.word	0x40021000
 8000814:	42420480 	.word	0x42420480
 8000818:	40007000 	.word	0x40007000
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800081c:	b97b      	cbnz	r3, 800083e <HAL_RCC_OscConfig+0x312>
 800081e:	6a23      	ldr	r3, [r4, #32]
 8000820:	f023 0301 	bic.w	r3, r3, #1
 8000824:	6223      	str	r3, [r4, #32]
 8000826:	6a23      	ldr	r3, [r4, #32]
 8000828:	f023 0304 	bic.w	r3, r3, #4
 800082c:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800082e:	f7ff fd23 	bl	8000278 <HAL_GetTick>
 8000832:	2602      	movs	r6, #2
 8000834:	4681      	mov	r9, r0
 8000836:	46b0      	mov	r8, r6
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000838:	f241 3a88 	movw	sl, #5000	; 0x1388
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800083c:	e039      	b.n	80008b2 <HAL_RCC_OscConfig+0x386>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800083e:	2b05      	cmp	r3, #5
 8000840:	6a23      	ldr	r3, [r4, #32]
 8000842:	d106      	bne.n	8000852 <HAL_RCC_OscConfig+0x326>
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	6223      	str	r3, [r4, #32]
 800084a:	6a23      	ldr	r3, [r4, #32]
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	e005      	b.n	800085e <HAL_RCC_OscConfig+0x332>
 8000852:	f023 0301 	bic.w	r3, r3, #1
 8000856:	6223      	str	r3, [r4, #32]
 8000858:	6a23      	ldr	r3, [r4, #32]
 800085a:	f023 0304 	bic.w	r3, r3, #4
 800085e:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000860:	f7ff fd0a 	bl	8000278 <HAL_GetTick>
 8000864:	2602      	movs	r6, #2
 8000866:	4682      	mov	sl, r0
 8000868:	46b1      	mov	r9, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800086a:	f241 3888 	movw	r8, #5000	; 0x1388
 800086e:	fa96 f3a6 	rbit	r3, r6
 8000872:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000876:	b10b      	cbz	r3, 800087c <HAL_RCC_OscConfig+0x350>
 8000878:	6a22      	ldr	r2, [r4, #32]
 800087a:	e002      	b.n	8000882 <HAL_RCC_OscConfig+0x356>
 800087c:	fa96 f3a6 	rbit	r3, r6
 8000880:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000882:	fa99 f3a9 	rbit	r3, r9
 8000886:	fab3 f383 	clz	r3, r3
 800088a:	f003 031f 	and.w	r3, r3, #31
 800088e:	fa22 f303 	lsr.w	r3, r2, r3
 8000892:	07da      	lsls	r2, r3, #31
 8000894:	d41d      	bmi.n	80008d2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000896:	f7ff fcef 	bl	8000278 <HAL_GetTick>
 800089a:	ebca 0000 	rsb	r0, sl, r0
 800089e:	4540      	cmp	r0, r8
 80008a0:	d9e5      	bls.n	800086e <HAL_RCC_OscConfig+0x342>
 80008a2:	e6a4      	b.n	80005ee <HAL_RCC_OscConfig+0xc2>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008a4:	f7ff fce8 	bl	8000278 <HAL_GetTick>
 80008a8:	ebc9 0000 	rsb	r0, r9, r0
 80008ac:	4550      	cmp	r0, sl
 80008ae:	f63f ae9e 	bhi.w	80005ee <HAL_RCC_OscConfig+0xc2>
 80008b2:	fa96 f3a6 	rbit	r3, r6
 80008b6:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008ba:	b183      	cbz	r3, 80008de <HAL_RCC_OscConfig+0x3b2>
 80008bc:	6a22      	ldr	r2, [r4, #32]
 80008be:	fa98 f3a8 	rbit	r3, r8
 80008c2:	fab3 f383 	clz	r3, r3
 80008c6:	f003 031f 	and.w	r3, r3, #31
 80008ca:	fa22 f303 	lsr.w	r3, r2, r3
 80008ce:	07db      	lsls	r3, r3, #31
 80008d0:	d4e8      	bmi.n	80008a4 <HAL_RCC_OscConfig+0x378>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80008d2:	b147      	cbz	r7, 80008e6 <HAL_RCC_OscConfig+0x3ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80008d4:	69e3      	ldr	r3, [r4, #28]
 80008d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80008da:	61e3      	str	r3, [r4, #28]
 80008dc:	e003      	b.n	80008e6 <HAL_RCC_OscConfig+0x3ba>
 80008de:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008e4:	e7eb      	b.n	80008be <HAL_RCC_OscConfig+0x392>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008e6:	69ea      	ldr	r2, [r5, #28]
 80008e8:	b90a      	cbnz	r2, 80008ee <HAL_RCC_OscConfig+0x3c2>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80008ea:	2000      	movs	r0, #0
 80008ec:	e07e      	b.n	80009ec <HAL_RCC_OscConfig+0x4c0>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008ee:	4c41      	ldr	r4, [pc, #260]	; (80009f4 <HAL_RCC_OscConfig+0x4c8>)
 80008f0:	6863      	ldr	r3, [r4, #4]
 80008f2:	f003 030c 	and.w	r3, r3, #12
 80008f6:	2b08      	cmp	r3, #8
 80008f8:	f43f ae42 	beq.w	8000580 <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008fc:	2a02      	cmp	r2, #2
 80008fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000902:	d150      	bne.n	80009a6 <HAL_RCC_OscConfig+0x47a>
 8000904:	fa93 f3a3 	rbit	r3, r3
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000908:	fab3 f383 	clz	r3, r3
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000912:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800091a:	f7ff fcad 	bl	8000278 <HAL_GetTick>
 800091e:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000922:	4607      	mov	r7, r0
 8000924:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000928:	4932      	ldr	r1, [pc, #200]	; (80009f4 <HAL_RCC_OscConfig+0x4c8>)
 800092a:	6822      	ldr	r2, [r4, #0]
 800092c:	fa96 f3a6 	rbit	r3, r6
 8000930:	fab3 f383 	clz	r3, r3
 8000934:	f003 031f 	and.w	r3, r3, #31
 8000938:	fa22 f303 	lsr.w	r3, r2, r3
 800093c:	07d8      	lsls	r0, r3, #31
 800093e:	d505      	bpl.n	800094c <HAL_RCC_OscConfig+0x420>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000940:	f7ff fc9a 	bl	8000278 <HAL_GetTick>
 8000944:	1bc0      	subs	r0, r0, r7
 8000946:	2802      	cmp	r0, #2
 8000948:	d9ec      	bls.n	8000924 <HAL_RCC_OscConfig+0x3f8>
 800094a:	e650      	b.n	80005ee <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800094c:	684b      	ldr	r3, [r1, #4]
 800094e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8000950:	6a2a      	ldr	r2, [r5, #32]
 8000952:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000956:	4302      	orrs	r2, r0
 8000958:	4313      	orrs	r3, r2
 800095a:	604b      	str	r3, [r1, #4]
 800095c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000960:	fa93 f3a3 	rbit	r3, r3
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000964:	fab3 f383 	clz	r3, r3
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800096e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000972:	2201      	movs	r2, #1
 8000974:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000976:	f7ff fc7f 	bl	8000278 <HAL_GetTick>
 800097a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800097e:	4606      	mov	r6, r0
 8000980:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000984:	6822      	ldr	r2, [r4, #0]
 8000986:	fa95 f3a5 	rbit	r3, r5
 800098a:	fab3 f383 	clz	r3, r3
 800098e:	f003 031f 	and.w	r3, r3, #31
 8000992:	fa22 f303 	lsr.w	r3, r2, r3
 8000996:	07da      	lsls	r2, r3, #31
 8000998:	d4a7      	bmi.n	80008ea <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800099a:	f7ff fc6d 	bl	8000278 <HAL_GetTick>
 800099e:	1b80      	subs	r0, r0, r6
 80009a0:	2802      	cmp	r0, #2
 80009a2:	d9ed      	bls.n	8000980 <HAL_RCC_OscConfig+0x454>
 80009a4:	e623      	b.n	80005ee <HAL_RCC_OscConfig+0xc2>
 80009a6:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80009aa:	fab3 f383 	clz	r3, r3
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80009b4:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009bc:	f7ff fc5c 	bl	8000278 <HAL_GetTick>
 80009c0:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80009c4:	4606      	mov	r6, r0
 80009c6:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009ca:	6822      	ldr	r2, [r4, #0]
 80009cc:	fa95 f3a5 	rbit	r3, r5
 80009d0:	fab3 f383 	clz	r3, r3
 80009d4:	f003 031f 	and.w	r3, r3, #31
 80009d8:	fa22 f303 	lsr.w	r3, r2, r3
 80009dc:	07db      	lsls	r3, r3, #31
 80009de:	d584      	bpl.n	80008ea <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009e0:	f7ff fc4a 	bl	8000278 <HAL_GetTick>
 80009e4:	1b80      	subs	r0, r0, r6
 80009e6:	2802      	cmp	r0, #2
 80009e8:	d9ed      	bls.n	80009c6 <HAL_RCC_OscConfig+0x49a>
 80009ea:	e600      	b.n	80005ee <HAL_RCC_OscConfig+0xc2>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80009ec:	b002      	add	sp, #8
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	bf00      	nop
 80009f4:	40021000 	.word	0x40021000

080009f8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 80009f8:	4913      	ldr	r1, [pc, #76]	; (8000a48 <HAL_RCC_GetSysClockFreq+0x50>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80009fa:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 80009fc:	684c      	ldr	r4, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80009fe:	f004 030c 	and.w	r3, r4, #12
 8000a02:	2b08      	cmp	r3, #8
 8000a04:	d11e      	bne.n	8000a44 <HAL_RCC_GetSysClockFreq+0x4c>
 8000a06:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000a0a:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a0e:	f404 1270 	and.w	r2, r4, #3932160	; 0x3c0000
 8000a12:	fab3 f383 	clz	r3, r3
 8000a16:	fa22 f303 	lsr.w	r3, r2, r3
 8000a1a:	4a0c      	ldr	r2, [pc, #48]	; (8000a4c <HAL_RCC_GetSysClockFreq+0x54>)
 8000a1c:	5cd3      	ldrb	r3, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000a1e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8000a20:	210f      	movs	r1, #15
 8000a22:	fa91 f1a1 	rbit	r1, r1
 8000a26:	fab1 f181 	clz	r1, r1
 8000a2a:	f002 020f 	and.w	r2, r2, #15
 8000a2e:	40ca      	lsrs	r2, r1
 8000a30:	4907      	ldr	r1, [pc, #28]	; (8000a50 <HAL_RCC_GetSysClockFreq+0x58>)
 8000a32:	5c88      	ldrb	r0, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000a34:	03e2      	lsls	r2, r4, #15
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8000a36:	bf52      	itee	pl
 8000a38:	4806      	ldrpl	r0, [pc, #24]	; (8000a54 <HAL_RCC_GetSysClockFreq+0x5c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000a3a:	4a07      	ldrmi	r2, [pc, #28]	; (8000a58 <HAL_RCC_GetSysClockFreq+0x60>)
 8000a3c:	fbb2 f0f0 	udivmi	r0, r2, r0
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8000a40:	4358      	muls	r0, r3
 8000a42:	bd10      	pop	{r4, pc}
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000a44:	4804      	ldr	r0, [pc, #16]	; (8000a58 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a46:	bd10      	pop	{r4, pc}
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	08001490 	.word	0x08001490
 8000a50:	08001480 	.word	0x08001480
 8000a54:	003d0900 	.word	0x003d0900
 8000a58:	007a1200 	.word	0x007a1200

08000a5c <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a5c:	4a54      	ldr	r2, [pc, #336]	; (8000bb0 <HAL_RCC_ClockConfig+0x154>)
 8000a5e:	6813      	ldr	r3, [r2, #0]
 8000a60:	f003 0307 	and.w	r3, r3, #7
 8000a64:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a6a:	4606      	mov	r6, r0
 8000a6c:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a6e:	d30a      	bcc.n	8000a86 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a70:	6831      	ldr	r1, [r6, #0]
 8000a72:	078c      	lsls	r4, r1, #30
 8000a74:	d514      	bpl.n	8000aa0 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a76:	484f      	ldr	r0, [pc, #316]	; (8000bb4 <HAL_RCC_ClockConfig+0x158>)
 8000a78:	6843      	ldr	r3, [r0, #4]
 8000a7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a7e:	68b3      	ldr	r3, [r6, #8]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	6043      	str	r3, [r0, #4]
 8000a84:	e00c      	b.n	8000aa0 <HAL_RCC_ClockConfig+0x44>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a86:	6813      	ldr	r3, [r2, #0]
 8000a88:	f023 0307 	bic.w	r3, r3, #7
 8000a8c:	430b      	orrs	r3, r1
 8000a8e:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a90:	6813      	ldr	r3, [r2, #0]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	4299      	cmp	r1, r3
 8000a98:	d0ea      	beq.n	8000a70 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000aa0:	07c8      	lsls	r0, r1, #31
 8000aa2:	d406      	bmi.n	8000ab2 <HAL_RCC_ClockConfig+0x56>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000aa4:	4a42      	ldr	r2, [pc, #264]	; (8000bb0 <HAL_RCC_ClockConfig+0x154>)
 8000aa6:	6813      	ldr	r3, [r2, #0]
 8000aa8:	f003 0307 	and.w	r3, r3, #7
 8000aac:	429d      	cmp	r5, r3
 8000aae:	d34a      	bcc.n	8000b46 <HAL_RCC_ClockConfig+0xea>
 8000ab0:	e053      	b.n	8000b5a <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ab2:	6872      	ldr	r2, [r6, #4]
 8000ab4:	4c3f      	ldr	r4, [pc, #252]	; (8000bb4 <HAL_RCC_ClockConfig+0x158>)
 8000ab6:	2a01      	cmp	r2, #1
 8000ab8:	d102      	bne.n	8000ac0 <HAL_RCC_ClockConfig+0x64>
 8000aba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000abe:	e004      	b.n	8000aca <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ac0:	2a02      	cmp	r2, #2
 8000ac2:	bf0c      	ite	eq
 8000ac4:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000ac8:	2302      	movne	r3, #2
 8000aca:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ace:	6821      	ldr	r1, [r4, #0]
 8000ad0:	fa93 f3a3 	rbit	r3, r3
 8000ad4:	fab3 f383 	clz	r3, r3
 8000ad8:	f003 031f 	and.w	r3, r3, #31
 8000adc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ae0:	07d9      	lsls	r1, r3, #31
 8000ae2:	d5da      	bpl.n	8000a9a <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ae4:	6863      	ldr	r3, [r4, #4]
 8000ae6:	f023 0303 	bic.w	r3, r3, #3
 8000aea:	431a      	orrs	r2, r3
 8000aec:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000aee:	f7ff fbc3 	bl	8000278 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000af2:	6873      	ldr	r3, [r6, #4]
 8000af4:	2b01      	cmp	r3, #1
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000af6:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000af8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000afc:	d10c      	bne.n	8000b18 <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000afe:	6863      	ldr	r3, [r4, #4]
 8000b00:	f003 030c 	and.w	r3, r3, #12
 8000b04:	2b04      	cmp	r3, #4
 8000b06:	d0cd      	beq.n	8000aa4 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b08:	f7ff fbb6 	bl	8000278 <HAL_GetTick>
 8000b0c:	1bc0      	subs	r0, r0, r7
 8000b0e:	4540      	cmp	r0, r8
 8000b10:	d9f5      	bls.n	8000afe <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 8000b12:	2003      	movs	r0, #3
 8000b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d10f      	bne.n	8000b3c <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b1c:	6863      	ldr	r3, [r4, #4]
 8000b1e:	f003 030c 	and.w	r3, r3, #12
 8000b22:	2b08      	cmp	r3, #8
 8000b24:	d0be      	beq.n	8000aa4 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b26:	f7ff fba7 	bl	8000278 <HAL_GetTick>
 8000b2a:	1bc0      	subs	r0, r0, r7
 8000b2c:	4540      	cmp	r0, r8
 8000b2e:	d9f5      	bls.n	8000b1c <HAL_RCC_ClockConfig+0xc0>
 8000b30:	e7ef      	b.n	8000b12 <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b32:	f7ff fba1 	bl	8000278 <HAL_GetTick>
 8000b36:	1bc0      	subs	r0, r0, r7
 8000b38:	4540      	cmp	r0, r8
 8000b3a:	d8ea      	bhi.n	8000b12 <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b3c:	6863      	ldr	r3, [r4, #4]
 8000b3e:	f013 0f0c 	tst.w	r3, #12
 8000b42:	d1f6      	bne.n	8000b32 <HAL_RCC_ClockConfig+0xd6>
 8000b44:	e7ae      	b.n	8000aa4 <HAL_RCC_ClockConfig+0x48>
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b46:	6813      	ldr	r3, [r2, #0]
 8000b48:	f023 0307 	bic.w	r3, r3, #7
 8000b4c:	432b      	orrs	r3, r5
 8000b4e:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b50:	6813      	ldr	r3, [r2, #0]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	429d      	cmp	r5, r3
 8000b58:	d19f      	bne.n	8000a9a <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b5a:	6831      	ldr	r1, [r6, #0]
 8000b5c:	4c15      	ldr	r4, [pc, #84]	; (8000bb4 <HAL_RCC_ClockConfig+0x158>)
 8000b5e:	f011 0f04 	tst.w	r1, #4
 8000b62:	d005      	beq.n	8000b70 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b64:	6863      	ldr	r3, [r4, #4]
 8000b66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000b6a:	68f3      	ldr	r3, [r6, #12]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b70:	070b      	lsls	r3, r1, #28
 8000b72:	d506      	bpl.n	8000b82 <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000b74:	6863      	ldr	r3, [r4, #4]
 8000b76:	6932      	ldr	r2, [r6, #16]
 8000b78:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b7c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b80:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000b82:	f7ff ff39 	bl	80009f8 <HAL_RCC_GetSysClockFreq>
 8000b86:	6863      	ldr	r3, [r4, #4]
 8000b88:	22f0      	movs	r2, #240	; 0xf0
 8000b8a:	fa92 f2a2 	rbit	r2, r2
 8000b8e:	fab2 f282 	clz	r2, r2
 8000b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b96:	40d3      	lsrs	r3, r2
 8000b98:	4a07      	ldr	r2, [pc, #28]	; (8000bb8 <HAL_RCC_ClockConfig+0x15c>)
 8000b9a:	5cd3      	ldrb	r3, [r2, r3]
 8000b9c:	40d8      	lsrs	r0, r3
 8000b9e:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <HAL_RCC_ClockConfig+0x160>)
 8000ba0:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f7ff fb3a 	bl	800021c <HAL_InitTick>
  
  return HAL_OK;
 8000ba8:	2000      	movs	r0, #0
}
 8000baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bae:	bf00      	nop
 8000bb0:	40022000 	.word	0x40022000
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	080014a0 	.word	0x080014a0
 8000bbc:	20000004 	.word	0x20000004

08000bc0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000bc0:	4b01      	ldr	r3, [pc, #4]	; (8000bc8 <HAL_RCC_GetHCLKFreq+0x8>)
 8000bc2:	6818      	ldr	r0, [r3, #0]
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000004 	.word	0x20000004

08000bcc <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000bcc:	6803      	ldr	r3, [r0, #0]
 8000bce:	68da      	ldr	r2, [r3, #12]
 8000bd0:	f042 0201 	orr.w	r2, r2, #1
 8000bd4:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	f042 0201 	orr.w	r2, r2, #1
 8000bdc:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8000bde:	2000      	movs	r0, #0
 8000be0:	4770      	bx	lr

08000be2 <HAL_TIM_OC_DelayElapsedCallback>:
 8000be2:	4770      	bx	lr

08000be4 <HAL_TIM_IC_CaptureCallback>:
 8000be4:	4770      	bx	lr

08000be6 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000be6:	4770      	bx	lr

08000be8 <HAL_TIM_TriggerCallback>:
 8000be8:	4770      	bx	lr

08000bea <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000bea:	6803      	ldr	r3, [r0, #0]
 8000bec:	691a      	ldr	r2, [r3, #16]
 8000bee:	0791      	lsls	r1, r2, #30
  * @brief  This function handles TIM interrupts requests.
  * @param  htim: TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000bf0:	b510      	push	{r4, lr}
 8000bf2:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000bf4:	d514      	bpl.n	8000c20 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000bf6:	68da      	ldr	r2, [r3, #12]
 8000bf8:	0792      	lsls	r2, r2, #30
 8000bfa:	d511      	bpl.n	8000c20 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000bfc:	f06f 0202 	mvn.w	r2, #2
 8000c00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8000c02:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000c04:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8000c06:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000c08:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8000c0a:	d002      	beq.n	8000c12 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000c0c:	f7ff ffea 	bl	8000be4 <HAL_TIM_IC_CaptureCallback>
 8000c10:	e004      	b.n	8000c1c <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c12:	f7ff ffe6 	bl	8000be2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c16:	4620      	mov	r0, r4
 8000c18:	f7ff ffe5 	bl	8000be6 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000c20:	6823      	ldr	r3, [r4, #0]
 8000c22:	691a      	ldr	r2, [r3, #16]
 8000c24:	0750      	lsls	r0, r2, #29
 8000c26:	d516      	bpl.n	8000c56 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000c28:	68da      	ldr	r2, [r3, #12]
 8000c2a:	0751      	lsls	r1, r2, #29
 8000c2c:	d513      	bpl.n	8000c56 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000c2e:	f06f 0204 	mvn.w	r2, #4
 8000c32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8000c34:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000c36:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8000c38:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000c3c:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000c3e:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8000c40:	d002      	beq.n	8000c48 <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000c42:	f7ff ffcf 	bl	8000be4 <HAL_TIM_IC_CaptureCallback>
 8000c46:	e004      	b.n	8000c52 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c48:	f7ff ffcb 	bl	8000be2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	f7ff ffca 	bl	8000be6 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c52:	2300      	movs	r3, #0
 8000c54:	7623      	strb	r3, [r4, #24]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000c56:	6823      	ldr	r3, [r4, #0]
 8000c58:	691a      	ldr	r2, [r3, #16]
 8000c5a:	0712      	lsls	r2, r2, #28
 8000c5c:	d515      	bpl.n	8000c8a <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	0710      	lsls	r0, r2, #28
 8000c62:	d512      	bpl.n	8000c8a <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000c64:	f06f 0208 	mvn.w	r2, #8
 8000c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8000c6a:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000c6c:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8000c6e:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000c70:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000c72:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8000c74:	d002      	beq.n	8000c7c <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000c76:	f7ff ffb5 	bl	8000be4 <HAL_TIM_IC_CaptureCallback>
 8000c7a:	e004      	b.n	8000c86 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c7c:	f7ff ffb1 	bl	8000be2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8000c80:	4620      	mov	r0, r4
 8000c82:	f7ff ffb0 	bl	8000be6 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c86:	2300      	movs	r3, #0
 8000c88:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000c8a:	6823      	ldr	r3, [r4, #0]
 8000c8c:	691a      	ldr	r2, [r3, #16]
 8000c8e:	06d2      	lsls	r2, r2, #27
 8000c90:	d516      	bpl.n	8000cc0 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000c92:	68da      	ldr	r2, [r3, #12]
 8000c94:	06d0      	lsls	r0, r2, #27
 8000c96:	d513      	bpl.n	8000cc0 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000c98:	f06f 0210 	mvn.w	r2, #16
 8000c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8000c9e:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000ca0:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8000ca2:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000ca6:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000ca8:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8000caa:	d002      	beq.n	8000cb2 <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000cac:	f7ff ff9a 	bl	8000be4 <HAL_TIM_IC_CaptureCallback>
 8000cb0:	e004      	b.n	8000cbc <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000cb2:	f7ff ff96 	bl	8000be2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	f7ff ff95 	bl	8000be6 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	7623      	strb	r3, [r4, #24]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000cc0:	6823      	ldr	r3, [r4, #0]
 8000cc2:	691a      	ldr	r2, [r3, #16]
 8000cc4:	07d1      	lsls	r1, r2, #31
 8000cc6:	d508      	bpl.n	8000cda <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000cc8:	68da      	ldr	r2, [r3, #12]
 8000cca:	07d2      	lsls	r2, r2, #31
 8000ccc:	d505      	bpl.n	8000cda <HAL_TIM_IRQHandler+0xf0>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000cce:	f06f 0201 	mvn.w	r2, #1
 8000cd2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f000 f989 	bl	8000fec <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000cda:	6823      	ldr	r3, [r4, #0]
 8000cdc:	691a      	ldr	r2, [r3, #16]
 8000cde:	0610      	lsls	r0, r2, #24
 8000ce0:	d508      	bpl.n	8000cf4 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	0611      	lsls	r1, r2, #24
 8000ce6:	d505      	bpl.n	8000cf4 <HAL_TIM_IRQHandler+0x10a>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000ce8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000cec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000cee:	4620      	mov	r0, r4
 8000cf0:	f000 f97b 	bl	8000fea <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000cf4:	6823      	ldr	r3, [r4, #0]
 8000cf6:	691a      	ldr	r2, [r3, #16]
 8000cf8:	0652      	lsls	r2, r2, #25
 8000cfa:	d508      	bpl.n	8000d0e <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000cfc:	68da      	ldr	r2, [r3, #12]
 8000cfe:	0650      	lsls	r0, r2, #25
 8000d00:	d505      	bpl.n	8000d0e <HAL_TIM_IRQHandler+0x124>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000d02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000d06:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000d08:	4620      	mov	r0, r4
 8000d0a:	f7ff ff6d 	bl	8000be8 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000d0e:	6823      	ldr	r3, [r4, #0]
 8000d10:	691a      	ldr	r2, [r3, #16]
 8000d12:	0691      	lsls	r1, r2, #26
 8000d14:	d50a      	bpl.n	8000d2c <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000d16:	68da      	ldr	r2, [r3, #12]
 8000d18:	0692      	lsls	r2, r2, #26
 8000d1a:	d507      	bpl.n	8000d2c <HAL_TIM_IRQHandler+0x142>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000d1c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000d20:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000d22:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 8000d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 8000d28:	f000 b95e 	b.w	8000fe8 <HAL_TIMEx_CommutationCallback>
 8000d2c:	bd10      	pop	{r4, pc}
	...

08000d30 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d30:	4a2a      	ldr	r2, [pc, #168]	; (8000ddc <TIM_Base_SetConfig+0xac>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8000d32:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d34:	4290      	cmp	r0, r2
 8000d36:	d00e      	beq.n	8000d56 <TIM_Base_SetConfig+0x26>
 8000d38:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000d3c:	d00b      	beq.n	8000d56 <TIM_Base_SetConfig+0x26>
 8000d3e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000d42:	4290      	cmp	r0, r2
 8000d44:	d007      	beq.n	8000d56 <TIM_Base_SetConfig+0x26>
 8000d46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d4a:	4290      	cmp	r0, r2
 8000d4c:	d003      	beq.n	8000d56 <TIM_Base_SetConfig+0x26>
 8000d4e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8000d52:	4290      	cmp	r0, r2
 8000d54:	d115      	bne.n	8000d82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000d56:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000d5c:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000d5e:	4a1f      	ldr	r2, [pc, #124]	; (8000ddc <TIM_Base_SetConfig+0xac>)
 8000d60:	4290      	cmp	r0, r2
 8000d62:	d019      	beq.n	8000d98 <TIM_Base_SetConfig+0x68>
 8000d64:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000d68:	d016      	beq.n	8000d98 <TIM_Base_SetConfig+0x68>
 8000d6a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000d6e:	4290      	cmp	r0, r2
 8000d70:	d012      	beq.n	8000d98 <TIM_Base_SetConfig+0x68>
 8000d72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d76:	4290      	cmp	r0, r2
 8000d78:	d00e      	beq.n	8000d98 <TIM_Base_SetConfig+0x68>
 8000d7a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	d00a      	beq.n	8000d98 <TIM_Base_SetConfig+0x68>
 8000d82:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <TIM_Base_SetConfig+0xb0>)
 8000d84:	4290      	cmp	r0, r2
 8000d86:	d007      	beq.n	8000d98 <TIM_Base_SetConfig+0x68>
 8000d88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d003      	beq.n	8000d98 <TIM_Base_SetConfig+0x68>
 8000d90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d94:	4290      	cmp	r0, r2
 8000d96:	d103      	bne.n	8000da0 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d98:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d9e:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8000da0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000da2:	688b      	ldr	r3, [r1, #8]
 8000da4:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000da6:	680b      	ldr	r3, [r1, #0]
 8000da8:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <TIM_Base_SetConfig+0xac>)
 8000dac:	4298      	cmp	r0, r3
 8000dae:	d00f      	beq.n	8000dd0 <TIM_Base_SetConfig+0xa0>
 8000db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000db4:	4298      	cmp	r0, r3
 8000db6:	d00b      	beq.n	8000dd0 <TIM_Base_SetConfig+0xa0>
 8000db8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8000dbc:	4298      	cmp	r0, r3
 8000dbe:	d007      	beq.n	8000dd0 <TIM_Base_SetConfig+0xa0>
 8000dc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000dc4:	4298      	cmp	r0, r3
 8000dc6:	d003      	beq.n	8000dd0 <TIM_Base_SetConfig+0xa0>
 8000dc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	d101      	bne.n	8000dd4 <TIM_Base_SetConfig+0xa4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000dd0:	690b      	ldr	r3, [r1, #16]
 8000dd2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	6143      	str	r3, [r0, #20]
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40012c00 	.word	0x40012c00
 8000de0:	40014000 	.word	0x40014000

08000de4 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim: TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8000de4:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8000de6:	4604      	mov	r4, r0
 8000de8:	b1a0      	cbz	r0, 8000e14 <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8000dea:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000dee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000df2:	b91b      	cbnz	r3, 8000dfc <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000df4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000df8:	f000 fab0 	bl	800135c <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000e02:	6820      	ldr	r0, [r4, #0]
 8000e04:	1d21      	adds	r1, r4, #4
 8000e06:	f7ff ff93 	bl	8000d30 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8000e10:	2000      	movs	r0, #0
 8000e12:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8000e14:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8000e16:	bd10      	pop	{r4, pc}

08000e18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8000e18:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8000e1a:	6884      	ldr	r4, [r0, #8]
 8000e1c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8000e20:	4321      	orrs	r1, r4
 8000e22:	430a      	orrs	r2, r1

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000e24:	ea42 2303 	orr.w	r3, r2, r3, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000e28:	6083      	str	r3, [r0, #8]
 8000e2a:	bd10      	pop	{r4, pc}

08000e2c <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0;
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8000e2c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000e30:	2b01      	cmp	r3, #1
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8000e32:	b570      	push	{r4, r5, r6, lr}
 8000e34:	4604      	mov	r4, r0
 8000e36:	f04f 0002 	mov.w	r0, #2
  uint32_t tmpsmcr = 0;
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8000e3a:	f000 80ab 	beq.w	8000f94 <HAL_TIM_ConfigClockSource+0x168>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8000e3e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000e42:	6820      	ldr	r0, [r4, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0;
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8000e44:	2301      	movs	r3, #1
 8000e46:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000e4a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000e4c:	4b52      	ldr	r3, [pc, #328]	; (8000f98 <HAL_TIM_ConfigClockSource+0x16c>)
 8000e4e:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8000e50:	6083      	str	r3, [r0, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8000e52:	680b      	ldr	r3, [r1, #0]
 8000e54:	2b40      	cmp	r3, #64	; 0x40
 8000e56:	d074      	beq.n	8000f42 <HAL_TIM_ConfigClockSource+0x116>
 8000e58:	d818      	bhi.n	8000e8c <HAL_TIM_ConfigClockSource+0x60>
 8000e5a:	2b10      	cmp	r3, #16
 8000e5c:	f000 8088 	beq.w	8000f70 <HAL_TIM_ConfigClockSource+0x144>
 8000e60:	d808      	bhi.n	8000e74 <HAL_TIM_ConfigClockSource+0x48>
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f040 8090 	bne.w	8000f88 <HAL_TIM_ConfigClockSource+0x15c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000e68:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000e6e:	f043 0307 	orr.w	r3, r3, #7
 8000e72:	e088      	b.n	8000f86 <HAL_TIM_ConfigClockSource+0x15a>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8000e74:	2b20      	cmp	r3, #32
 8000e76:	f000 8081 	beq.w	8000f7c <HAL_TIM_ConfigClockSource+0x150>
 8000e7a:	2b30      	cmp	r3, #48	; 0x30
 8000e7c:	f040 8084 	bne.w	8000f88 <HAL_TIM_ConfigClockSource+0x15c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000e80:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000e86:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8000e8a:	e07c      	b.n	8000f86 <HAL_TIM_ConfigClockSource+0x15a>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8000e8c:	2b70      	cmp	r3, #112	; 0x70
 8000e8e:	d032      	beq.n	8000ef6 <HAL_TIM_ConfigClockSource+0xca>
 8000e90:	d81b      	bhi.n	8000eca <HAL_TIM_ConfigClockSource+0x9e>
 8000e92:	2b50      	cmp	r3, #80	; 0x50
 8000e94:	d03e      	beq.n	8000f14 <HAL_TIM_ConfigClockSource+0xe8>
 8000e96:	2b60      	cmp	r3, #96	; 0x60
 8000e98:	d176      	bne.n	8000f88 <HAL_TIM_ConfigClockSource+0x15c>
      
       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance, 
 8000e9a:	684d      	ldr	r5, [r1, #4]
 8000e9c:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e9e:	6a01      	ldr	r1, [r0, #32]
 8000ea0:	f021 0110 	bic.w	r1, r1, #16
 8000ea4:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000ea6:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8000ea8:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000eaa:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000eae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 8000eb2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12);
 8000eb6:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8000eba:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000ebc:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000ebe:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000ec4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8000ec8:	e05d      	b.n	8000f86 <HAL_TIM_ConfigClockSource+0x15a>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8000eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ece:	d00c      	beq.n	8000eea <HAL_TIM_ConfigClockSource+0xbe>
 8000ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ed4:	d158      	bne.n	8000f88 <HAL_TIM_ConfigClockSource+0x15c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance, 
 8000ed6:	68cb      	ldr	r3, [r1, #12]
 8000ed8:	684a      	ldr	r2, [r1, #4]
 8000eda:	6889      	ldr	r1, [r1, #8]
 8000edc:	f7ff ff9c 	bl	8000e18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000ee0:	6822      	ldr	r2, [r4, #0]
 8000ee2:	6893      	ldr	r3, [r2, #8]
 8000ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee8:	e012      	b.n	8000f10 <HAL_TIM_ConfigClockSource+0xe4>
  {
  case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));      
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000eea:	6883      	ldr	r3, [r0, #8]
 8000eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ef0:	f023 0307 	bic.w	r3, r3, #7
 8000ef4:	e047      	b.n	8000f86 <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance, 
 8000ef6:	68cb      	ldr	r3, [r1, #12]
 8000ef8:	684a      	ldr	r2, [r1, #4]
 8000efa:	6889      	ldr	r1, [r1, #8]
 8000efc:	f7ff ff8c 	bl	8000e18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity, 
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 8000f00:	6822      	ldr	r2, [r4, #0]
 8000f02:	6893      	ldr	r3, [r2, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8000f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f08:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000f0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      TIM_ETR_SetConfig(htim->Instance, 
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000f10:	6093      	str	r3, [r2, #8]
    }
    break;
 8000f12:	e039      	b.n	8000f88 <HAL_TIM_ConfigClockSource+0x15c>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000f14:	6a03      	ldr	r3, [r0, #32]
      
      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000f16:	684d      	ldr	r5, [r1, #4]
 8000f18:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f1a:	6a01      	ldr	r1, [r0, #32]
 8000f1c:	f021 0101 	bic.w	r1, r1, #1
 8000f20:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000f22:	6982      	ldr	r2, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000f24:	f023 030a 	bic.w	r3, r3, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000f28:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8000f2c:	432b      	orrs	r3, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 8000f2e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000f32:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000f34:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000f36:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f3c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8000f40:	e021      	b.n	8000f86 <HAL_TIM_ConfigClockSource+0x15a>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000f42:	6a03      	ldr	r3, [r0, #32]
      
      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000f44:	684d      	ldr	r5, [r1, #4]
 8000f46:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f48:	6a01      	ldr	r1, [r0, #32]
 8000f4a:	f021 0101 	bic.w	r1, r1, #1
 8000f4e:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000f50:	6982      	ldr	r2, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000f52:	f023 030a 	bic.w	r3, r3, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000f56:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8000f5a:	432b      	orrs	r3, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 8000f5c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000f60:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000f62:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000f64:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f6a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8000f6e:	e00a      	b.n	8000f86 <HAL_TIM_ConfigClockSource+0x15a>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000f70:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f76:	f043 0317 	orr.w	r3, r3, #23
 8000f7a:	e004      	b.n	8000f86 <HAL_TIM_ConfigClockSource+0x15a>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000f7c:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f82:	f043 0327 	orr.w	r3, r3, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8000f86:	6083      	str	r3, [r0, #8]
    break;
    
  default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 8000f88:	2301      	movs	r3, #1
  
  __HAL_UNLOCK(htim);
 8000f8a:	2000      	movs	r0, #0
    break;
    
  default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 8000f8c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8000f90:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 8000f94:	bd70      	pop	{r4, r5, r6, pc}
 8000f96:	bf00      	nop
 8000f98:	fffe0088 	.word	0xfffe0088

08000f9c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8000f9c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000fa0:	2b01      	cmp	r3, #1
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8000fa2:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8000fa4:	d01c      	beq.n	8000fe0 <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8000fa6:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8000fa8:	4c0e      	ldr	r4, [pc, #56]	; (8000fe4 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  
  /* Check input state */
  __HAL_LOCK(htim);

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8000faa:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8000fac:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8000fae:	42a2      	cmp	r2, r4
 8000fb0:	d003      	beq.n	8000fba <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 8000fb2:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8000fb6:	42a2      	cmp	r2, r4
 8000fb8:	d103      	bne.n	8000fc2 <HAL_TIMEx_MasterConfigSynchronization+0x26>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8000fba:	684c      	ldr	r4, [r1, #4]
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8000fbc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8000fc0:	4323      	orrs	r3, r4
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000fc2:	680c      	ldr	r4, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000fc4:	6889      	ldr	r1, [r1, #8]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8000fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000fca:	4323      	orrs	r3, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8000fcc:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8000fd0:	6053      	str	r3, [r2, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000fd2:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8000fd4:	2300      	movs	r3, #0
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8000fd6:	6091      	str	r1, [r2, #8]

  __HAL_UNLOCK(htim);
 8000fd8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 8000fdc:	4618      	mov	r0, r3
 8000fde:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8000fe0:	2002      	movs	r0, #2
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 8000fe2:	bd30      	pop	{r4, r5, pc}
 8000fe4:	40012c00 	.word	0x40012c00

08000fe8 <HAL_TIMEx_CommutationCallback>:
 8000fe8:	4770      	bx	lr

08000fea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000fea:	4770      	bx	lr

08000fec <HAL_TIM_PeriodElapsedCallback>:
 */

void  HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{

	if(htim ->Instance == TIM3)
 8000fec:	6802      	ldr	r2, [r0, #0]
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d110      	bne.n	8001016 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		redLED = redLED^1 ;
 8000ff4:	4a09      	ldr	r2, [pc, #36]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x30>)
		{

			delay =0;
		}
		
		HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_10);
 8000ff6:	480a      	ldr	r0, [pc, #40]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x34>)
void  HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{

	if(htim ->Instance == TIM3)
	{
		redLED = redLED^1 ;
 8000ff8:	6813      	ldr	r3, [r2, #0]
 8000ffa:	f083 0301 	eor.w	r3, r3, #1
 8000ffe:	6013      	str	r3, [r2, #0]
		delay++;
 8001000:	4a08      	ldr	r2, [pc, #32]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001002:	6813      	ldr	r3, [r2, #0]
 8001004:	3301      	adds	r3, #1
		if(delay == 10)
 8001006:	2b0a      	cmp	r3, #10
		{

			delay =0;
 8001008:	bf08      	it	eq
 800100a:	2300      	moveq	r3, #0
		}
		
		HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_10);
 800100c:	f44f 6180 	mov.w	r1, #1024	; 0x400
		redLED = redLED^1 ;
		delay++;
		if(delay == 10)
		{

			delay =0;
 8001010:	6013      	str	r3, [r2, #0]
		}
		
		HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_10);
 8001012:	f7ff ba86 	b.w	8000522 <HAL_GPIO_TogglePin>
 8001016:	4770      	bx	lr
 8001018:	40000400 	.word	0x40000400
 800101c:	20000000 	.word	0x20000000
 8001020:	48001000 	.word	0x48001000
 8001024:	20000038 	.word	0x20000038

08001028 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001028:	b530      	push	{r4, r5, lr}
 800102a:	b091      	sub	sp, #68	; 0x44

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800102c:	2310      	movs	r3, #16
 800102e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001030:	2300      	movs	r3, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001032:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001034:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001036:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001038:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800103a:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800103e:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001040:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001042:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001044:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001046:	f7ff fa71 	bl	800052c <HAL_RCC_OscConfig>
 800104a:	b100      	cbz	r0, 800104e <SystemClock_Config+0x26>
 800104c:	e7fe      	b.n	800104c <SystemClock_Config+0x24>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104e:	230f      	movs	r3, #15
 8001050:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001052:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001054:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001058:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800105a:	4629      	mov	r1, r5
 800105c:	a801      	add	r0, sp, #4

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001060:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001062:	f7ff fcfb 	bl	8000a5c <HAL_RCC_ClockConfig>
 8001066:	4604      	mov	r4, r0
 8001068:	b100      	cbz	r0, 800106c <SystemClock_Config+0x44>
 800106a:	e7fe      	b.n	800106a <SystemClock_Config+0x42>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800106c:	f7ff fda8 	bl	8000bc0 <HAL_RCC_GetHCLKFreq>
 8001070:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001074:	fbb0 f0f3 	udiv	r0, r0, r3
 8001078:	f7ff f956 	bl	8000328 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800107c:	2004      	movs	r0, #4
 800107e:	f7ff f969 	bl	8000354 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001082:	4622      	mov	r2, r4
 8001084:	4621      	mov	r1, r4
 8001086:	f04f 30ff 	mov.w	r0, #4294967295
 800108a:	f7ff f90d 	bl	80002a8 <HAL_NVIC_SetPriority>
}
 800108e:	b011      	add	sp, #68	; 0x44
 8001090:	bd30      	pop	{r4, r5, pc}
	...

08001094 <initEport>:
*/

void initEport( )
{

		__GPIOE_CLK_ENABLE( );
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <initEport+0x34>)
     PB6   ------> I2C1_SCL
     PB7   ------> I2C1_SDA
*/

void initEport( )
{
 8001096:	b507      	push	{r0, r1, r2, lr}

		__GPIOE_CLK_ENABLE( );
 8001098:	695a      	ldr	r2, [r3, #20]

		GPIO_InitStruct.Pin = ( GPIO_PIN_15 | GPIO_PIN_14 | GPIO_PIN_13 | GPIO_PIN_12
 800109a:	490c      	ldr	r1, [pc, #48]	; (80010cc <initEport+0x38>)
				| GPIO_PIN_11 | GPIO_PIN_10 | GPIO_PIN_9 | GPIO_PIN_8 );
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
		GPIO_InitStruct.Pull = GPIO_PULLUP;
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;

		HAL_GPIO_Init( GPIOE, &GPIO_InitStruct );
 800109c:	480c      	ldr	r0, [pc, #48]	; (80010d0 <initEport+0x3c>)
*/

void initEport( )
{

		__GPIOE_CLK_ENABLE( );
 800109e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80010a2:	615a      	str	r2, [r3, #20]
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	9b01      	ldr	r3, [sp, #4]

		GPIO_InitStruct.Pin = ( GPIO_PIN_15 | GPIO_PIN_14 | GPIO_PIN_13 | GPIO_PIN_12
 80010ae:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80010b2:	600b      	str	r3, [r1, #0]
				| GPIO_PIN_11 | GPIO_PIN_10 | GPIO_PIN_9 | GPIO_PIN_8 );
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b4:	2301      	movs	r3, #1
 80010b6:	604b      	str	r3, [r1, #4]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b8:	608b      	str	r3, [r1, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	60cb      	str	r3, [r1, #12]

		HAL_GPIO_Init( GPIOE, &GPIO_InitStruct );
 80010be:	f7ff f95b 	bl	8000378 <HAL_GPIO_Init>

}
 80010c2:	b003      	add	sp, #12
 80010c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80010c8:	40021000 	.word	0x40021000
 80010cc:	20000024 	.word	0x20000024
 80010d0:	48001000 	.word	0x48001000

080010d4 <initAport>:

void initAport( )
{

		__GPIOA_CLK_ENABLE( );
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <initAport+0x34>)
		HAL_GPIO_Init( GPIOE, &GPIO_InitStruct );

}

void initAport( )
{
 80010d6:	b507      	push	{r0, r1, r2, lr}

		__GPIOA_CLK_ENABLE( );
 80010d8:	695a      	ldr	r2, [r3, #20]

		GPIO_InitStruct.Pin =  GPIO_PIN_0 ;
 80010da:	490c      	ldr	r1, [pc, #48]	; (800110c <initAport+0x38>)
}

void initAport( )
{

		__GPIOA_CLK_ENABLE( );
 80010dc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80010e0:	615a      	str	r2, [r3, #20]
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	9b01      	ldr	r3, [sp, #4]

		GPIO_InitStruct.Pin =  GPIO_PIN_0 ;
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80010ec:	2200      	movs	r2, #0
 80010ee:	2302      	movs	r3, #2
 80010f0:	f04f 0e03 	mov.w	lr, #3
 80010f4:	2001      	movs	r0, #1
 80010f6:	e881 400d 	stmia.w	r1, {r0, r2, r3, lr}

		HAL_GPIO_Init( GPIOA, &GPIO_InitStruct );
 80010fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fe:	f7ff f93b 	bl	8000378 <HAL_GPIO_Init>

}
 8001102:	b003      	add	sp, #12
 8001104:	f85d fb04 	ldr.w	pc, [sp], #4
 8001108:	40021000 	.word	0x40021000
 800110c:	20000024 	.word	0x20000024

08001110 <main>:
	}
}


int main(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08e      	sub	sp, #56	; 0x38

    HAL_Init();
 8001114:	f7ff f896 	bl	8000244 <HAL_Init>
  SystemClock_Config();
 8001118:	f7ff ff86 	bl	8001028 <SystemClock_Config>
 initEport( );
 800111c:	f7ff ffba 	bl	8001094 <initEport>
 initAport( );
 8001120:	f7ff ffd8 	bl	80010d4 <initAport>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001124:	4b66      	ldr	r3, [pc, #408]	; (80012c0 <main+0x1b0>)
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin 
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001126:	4867      	ldr	r0, [pc, #412]	; (80012c4 <main+0x1b4>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001128:	695a      	ldr	r2, [r3, #20]
 800112a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800112e:	615a      	str	r2, [r3, #20]
 8001130:	695a      	ldr	r2, [r3, #20]
 8001132:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001136:	9201      	str	r2, [sp, #4]
 8001138:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113a:	695a      	ldr	r2, [r3, #20]
 800113c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001140:	615a      	str	r2, [r3, #20]
 8001142:	695a      	ldr	r2, [r3, #20]
 8001144:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001148:	9202      	str	r2, [sp, #8]
 800114a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800114c:	695a      	ldr	r2, [r3, #20]
 800114e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001152:	615a      	str	r2, [r3, #20]
 8001154:	695a      	ldr	r2, [r3, #20]
 8001156:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800115a:	9203      	str	r2, [sp, #12]
 800115c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	695a      	ldr	r2, [r3, #20]
 8001160:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001164:	615a      	str	r2, [r3, #20]
 8001166:	695a      	ldr	r2, [r3, #20]
 8001168:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800116c:	9204      	str	r2, [sp, #16]
 800116e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001170:	695a      	ldr	r2, [r3, #20]
 8001172:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001176:	615a      	str	r2, [r3, #20]
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800117e:	9305      	str	r3, [sp, #20]
 8001180:	9b05      	ldr	r3, [sp, #20]

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin 
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin 
 8001182:	2337      	movs	r3, #55	; 0x37
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin 
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin 
 8001186:	9309      	str	r3, [sp, #36]	; 0x24
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001188:	a909      	add	r1, sp, #36	; 0x24

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin 
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin 
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800118a:	4b4f      	ldr	r3, [pc, #316]	; (80012c8 <main+0x1b8>)
 800118c:	930a      	str	r3, [sp, #40]	; 0x28
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin 
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118e:	2501      	movs	r5, #1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin 
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin 
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 8001190:	f64f 7608 	movw	r6, #65288	; 0xff08
  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin 
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin 
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001196:	f7ff f8ef 	bl	8000378 <HAL_GPIO_Init>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800119a:	a909      	add	r1, sp, #36	; 0x24
 800119c:	4849      	ldr	r0, [pc, #292]	; (80012c4 <main+0x1b4>)
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin 
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin 
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin 
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 80011a0:	9609      	str	r6, [sp, #36]	; 0x24
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a6:	f7ff f8e7 	bl	8000378 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011aa:	a909      	add	r1, sp, #36	; 0x24
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011b0:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b2:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011b6:	f7ff f8df 	bl	8000378 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80011ba:	23e0      	movs	r3, #224	; 0xe0
 80011bc:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2702      	movs	r7, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011c0:	2305      	movs	r3, #5
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c2:	a909      	add	r1, sp, #36	; 0x24
 80011c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011c8:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f7ff f8d2 	bl	8000378 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80011d4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011d8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011da:	2303      	movs	r3, #3
 80011dc:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	a909      	add	r1, sp, #36	; 0x24
  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80011e0:	230e      	movs	r3, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80011e6:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f7ff f8c4 	bl	8000378 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80011f0:	23c0      	movs	r3, #192	; 0xc0
 80011f2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f4:	2312      	movs	r3, #18
 80011f6:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f8:	a909      	add	r1, sp, #36	; 0x24
  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011fa:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fc:	4833      	ldr	r0, [pc, #204]	; (80012cc <main+0x1bc>)
  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011fe:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001200:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001204:	f7ff f8b8 	bl	8000378 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 8001208:	4622      	mov	r2, r4
 800120a:	482e      	ldr	r0, [pc, #184]	; (80012c4 <main+0x1b4>)
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 800120c:	4d30      	ldr	r5, [pc, #192]	; (80012d0 <main+0x1c0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 800120e:	4631      	mov	r1, r6
 8001210:	f7ff f982 	bl	8000518 <HAL_GPIO_WritePin>

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 48000;
 8001214:	4a2f      	ldr	r2, [pc, #188]	; (80012d4 <main+0x1c4>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001216:	60ac      	str	r4, [r5, #8]

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 48000;
 8001218:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800121c:	e885 000c 	stmia.w	r5, {r2, r3}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 499;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001220:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 48000;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 499;
 8001222:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001226:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001228:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800122a:	f7ff fddb 	bl	8000de4 <HAL_TIM_Base_Init>
 800122e:	b100      	cbz	r0, 8001232 <main+0x122>
 8001230:	e7fe      	b.n	8001230 <main+0x120>
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001236:	a909      	add	r1, sp, #36	; 0x24
 8001238:	4628      	mov	r0, r5
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800123a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800123c:	f7ff fdf6 	bl	8000e2c <HAL_TIM_ConfigClockSource>
 8001240:	b100      	cbz	r0, 8001244 <main+0x134>
 8001242:	e7fe      	b.n	8001242 <main+0x132>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001244:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001246:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001248:	a906      	add	r1, sp, #24
 800124a:	4628      	mov	r0, r5
 800124c:	f7ff fea6 	bl	8000f9c <HAL_TIMEx_MasterConfigSynchronization>
 8001250:	b100      	cbz	r0, 8001254 <main+0x144>
 8001252:	e7fe      	b.n	8001252 <main+0x142>
  SystemClock_Config();
 initEport( );
 initAport( );
  MX_GPIO_Init();
  MX_TIM3_Init();
  HAL_TIM_Base_Start_IT(&htim3); // start timer 3 in time based interrupt mode
 8001254:	4628      	mov	r0, r5
 
  while (1)
  {
  
	  if(redLED == 0)
 8001256:	4c20      	ldr	r4, [pc, #128]	; (80012d8 <main+0x1c8>)
  SystemClock_Config();
 initEport( );
 initAport( );
  MX_GPIO_Init();
  MX_TIM3_Init();
  HAL_TIM_Base_Start_IT(&htim3); // start timer 3 in time based interrupt mode
 8001258:	f7ff fcb8 	bl	8000bcc <HAL_TIM_Base_Start_IT>
 800125c:	4626      	mov	r6, r4
 
  while (1)
  {
  
	  if(redLED == 0)
 800125e:	6823      	ldr	r3, [r4, #0]
 8001260:	b92b      	cbnz	r3, 800126e <main+0x15e>
	  	  	{
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,SET);
 8001262:	2201      	movs	r2, #1
 8001264:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001268:	4816      	ldr	r0, [pc, #88]	; (80012c4 <main+0x1b4>)
 800126a:	f7ff f955 	bl	8000518 <HAL_GPIO_WritePin>
	  	  	}

    	if(redLED == 1)
 800126e:	6833      	ldr	r3, [r6, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d105      	bne.n	8001280 <main+0x170>
	  	{

		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127a:	4812      	ldr	r0, [pc, #72]	; (80012c4 <main+0x1b4>)
 800127c:	f7ff f94c 	bl	8000518 <HAL_GPIO_WritePin>

	    }

    	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)== 1)
 8001280:	2101      	movs	r1, #1
 8001282:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001286:	f7ff f941 	bl	800050c <HAL_GPIO_ReadPin>
 800128a:	2801      	cmp	r0, #1
 800128c:	4602      	mov	r2, r0
 800128e:	d104      	bne.n	800129a <main+0x18a>
    	{
    		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,SET);
 8001290:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001294:	480b      	ldr	r0, [pc, #44]	; (80012c4 <main+0x1b4>)
 8001296:	f7ff f93f 	bl	8000518 <HAL_GPIO_WritePin>

    	}
    	if( delay == 0 )
 800129a:	4d10      	ldr	r5, [pc, #64]	; (80012dc <main+0x1cc>)
 800129c:	682b      	ldr	r3, [r5, #0]
 800129e:	b92b      	cbnz	r3, 80012ac <main+0x19c>
    	{
    		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_8,SET);
 80012a0:	2201      	movs	r2, #1
 80012a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a6:	4807      	ldr	r0, [pc, #28]	; (80012c4 <main+0x1b4>)
 80012a8:	f7ff f936 	bl	8000518 <HAL_GPIO_WritePin>

    	}
    	if( delay != 0 )
 80012ac:	682b      	ldr	r3, [r5, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0d5      	beq.n	800125e <main+0x14e>
    	    	{
    	    		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_8,RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <main+0x1b4>)
 80012ba:	f7ff f92d 	bl	8000518 <HAL_GPIO_WritePin>
 80012be:	e7ce      	b.n	800125e <main+0x14e>
 80012c0:	40021000 	.word	0x40021000
 80012c4:	48001000 	.word	0x48001000
 80012c8:	10120000 	.word	0x10120000
 80012cc:	48000400 	.word	0x48000400
 80012d0:	20000040 	.word	0x20000040
 80012d4:	40000400 	.word	0x40000400
 80012d8:	20000000 	.word	0x20000000
 80012dc:	20000038 	.word	0x20000038

080012e0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e0:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <HAL_MspInit+0x78>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e2:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e4:	699a      	ldr	r2, [r3, #24]
 80012e6:	f042 0201 	orr.w	r2, r2, #1
 80012ea:	619a      	str	r2, [r3, #24]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012f4:	2007      	movs	r0, #7
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012f8:	f7fe ffc4 	bl	8000284 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80012fc:	2200      	movs	r2, #0
 80012fe:	4611      	mov	r1, r2
 8001300:	f06f 000b 	mvn.w	r0, #11
 8001304:	f7fe ffd0 	bl	80002a8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	4611      	mov	r1, r2
 800130c:	f06f 000a 	mvn.w	r0, #10
 8001310:	f7fe ffca 	bl	80002a8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	4611      	mov	r1, r2
 8001318:	f06f 0009 	mvn.w	r0, #9
 800131c:	f7fe ffc4 	bl	80002a8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	4611      	mov	r1, r2
 8001324:	f06f 0004 	mvn.w	r0, #4
 8001328:	f7fe ffbe 	bl	80002a8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	4611      	mov	r1, r2
 8001330:	f06f 0003 	mvn.w	r0, #3
 8001334:	f7fe ffb8 	bl	80002a8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	4611      	mov	r1, r2
 800133c:	f06f 0001 	mvn.w	r0, #1
 8001340:	f7fe ffb2 	bl	80002a8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001344:	2200      	movs	r2, #0
 8001346:	4611      	mov	r1, r2
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f7fe ffac 	bl	80002a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001350:	b003      	add	sp, #12
 8001352:	f85d fb04 	ldr.w	pc, [sp], #4
 8001356:	bf00      	nop
 8001358:	40021000 	.word	0x40021000

0800135c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800135c:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM3)
 800135e:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <HAL_TIM_Base_MspInit+0x38>)
 8001360:	6802      	ldr	r2, [r0, #0]
 8001362:	429a      	cmp	r2, r3
 8001364:	d112      	bne.n	800138c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001366:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800136a:	201d      	movs	r0, #29
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800136c:	69da      	ldr	r2, [r3, #28]
 800136e:	f042 0202 	orr.w	r2, r2, #2
 8001372:	61da      	str	r2, [r3, #28]
 8001374:	69db      	ldr	r3, [r3, #28]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	9301      	str	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800137e:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001380:	9b01      	ldr	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001382:	f7fe ff91 	bl	80002a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001386:	201d      	movs	r0, #29
 8001388:	f7fe ffc2 	bl	8000310 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800138c:	b003      	add	sp, #12
 800138e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001392:	bf00      	nop
 8001394:	40000400 	.word	0x40000400

08001398 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001398:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800139a:	f7fe ff65 	bl	8000268 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 80013a2:	f7fe bfe4 	b.w	800036e <HAL_SYSTICK_IRQHandler>
	...

080013a8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013a8:	4801      	ldr	r0, [pc, #4]	; (80013b0 <TIM3_IRQHandler+0x8>)
 80013aa:	f7ff bc1e 	b.w	8000bea <HAL_TIM_IRQHandler>
 80013ae:	bf00      	nop
 80013b0:	20000040 	.word	0x20000040

080013b4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b4:	4915      	ldr	r1, [pc, #84]	; (800140c <SystemInit+0x58>)
 80013b6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80013ba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80013c2:	4b13      	ldr	r3, [pc, #76]	; (8001410 <SystemInit+0x5c>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	f042 0201 	orr.w	r2, r2, #1
 80013ca:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80013cc:	6858      	ldr	r0, [r3, #4]
 80013ce:	4a11      	ldr	r2, [pc, #68]	; (8001414 <SystemInit+0x60>)
 80013d0:	4002      	ands	r2, r0
 80013d2:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80013da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013de:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013e6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80013ee:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80013f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013f2:	f022 020f 	bic.w	r2, r2, #15
 80013f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80013f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80013fa:	4a07      	ldr	r2, [pc, #28]	; (8001418 <SystemInit+0x64>)
 80013fc:	4002      	ands	r2, r0
 80013fe:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001404:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001408:	608b      	str	r3, [r1, #8]
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00
 8001410:	40021000 	.word	0x40021000
 8001414:	f87fc00c 	.word	0xf87fc00c
 8001418:	ff00fccc 	.word	0xff00fccc

0800141c <__libc_init_array>:
 800141c:	b570      	push	{r4, r5, r6, lr}
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <__libc_init_array+0x3c>)
 8001420:	4c0e      	ldr	r4, [pc, #56]	; (800145c <__libc_init_array+0x40>)
 8001422:	1ae4      	subs	r4, r4, r3
 8001424:	10a4      	asrs	r4, r4, #2
 8001426:	2500      	movs	r5, #0
 8001428:	461e      	mov	r6, r3
 800142a:	42a5      	cmp	r5, r4
 800142c:	d004      	beq.n	8001438 <__libc_init_array+0x1c>
 800142e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001432:	4798      	blx	r3
 8001434:	3501      	adds	r5, #1
 8001436:	e7f8      	b.n	800142a <__libc_init_array+0xe>
 8001438:	f000 f816 	bl	8001468 <_init>
 800143c:	4c08      	ldr	r4, [pc, #32]	; (8001460 <__libc_init_array+0x44>)
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <__libc_init_array+0x48>)
 8001440:	1ae4      	subs	r4, r4, r3
 8001442:	10a4      	asrs	r4, r4, #2
 8001444:	2500      	movs	r5, #0
 8001446:	461e      	mov	r6, r3
 8001448:	42a5      	cmp	r5, r4
 800144a:	d004      	beq.n	8001456 <__libc_init_array+0x3a>
 800144c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001450:	4798      	blx	r3
 8001452:	3501      	adds	r5, #1
 8001454:	e7f8      	b.n	8001448 <__libc_init_array+0x2c>
 8001456:	bd70      	pop	{r4, r5, r6, pc}
 8001458:	080014b0 	.word	0x080014b0
 800145c:	080014b0 	.word	0x080014b0
 8001460:	080014b4 	.word	0x080014b4
 8001464:	080014b0 	.word	0x080014b0

08001468 <_init>:
 8001468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800146a:	bf00      	nop
 800146c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800146e:	bc08      	pop	{r3}
 8001470:	469e      	mov	lr, r3
 8001472:	4770      	bx	lr

08001474 <_fini>:
 8001474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001476:	bf00      	nop
 8001478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800147a:	bc08      	pop	{r3}
 800147c:	469e      	mov	lr, r3
 800147e:	4770      	bx	lr
