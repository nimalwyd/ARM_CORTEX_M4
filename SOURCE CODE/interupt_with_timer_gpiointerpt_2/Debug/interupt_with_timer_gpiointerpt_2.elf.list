
interupt_with_timer_gpiointerpt_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012cc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001454  08001454  00011454  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001484  08001484  00011484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001488  08001488  00011488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  0800148c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000060  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000064  20000064  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_line   00003902  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00009770  00000000  00000000  00023936  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001738  00000000  00000000  0002d0a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000006e0  00000000  00000000  0002e7e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000009c8  00000000  00000000  0002eec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004de0  00000000  00000000  0002f888  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002762  00000000  00000000  00034668  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  00036dca  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001340  00000000  00000000  00036e48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800143c 	.word	0x0800143c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800143c 	.word	0x0800143c

080001c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80001c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000200 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80001cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80001ce:	e003      	b.n	80001d8 <LoopCopyDataInit>

080001d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80001d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80001d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80001d6:	3104      	adds	r1, #4

080001d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <LoopForever+0xa>)
	ldr	r3, =_edata
 80001da:	4b0c      	ldr	r3, [pc, #48]	; (800020c <LoopForever+0xe>)
	adds	r2, r0, r1
 80001dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80001de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80001e0:	d3f6      	bcc.n	80001d0 <CopyDataInit>
	ldr	r2, =_sbss
 80001e2:	4a0b      	ldr	r2, [pc, #44]	; (8000210 <LoopForever+0x12>)
	b	LoopFillZerobss
 80001e4:	e002      	b.n	80001ec <LoopFillZerobss>

080001e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80001e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80001e8:	f842 3b04 	str.w	r3, [r2], #4

080001ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <LoopForever+0x16>)
	cmp	r2, r3
 80001ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80001f0:	d3f9      	bcc.n	80001e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80001f2:	f001 f8c9 	bl	8001388 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001f6:	f001 f8fb 	bl	80013f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80001fa:	f000 ff71 	bl	80010e0 <main>

080001fe <LoopForever>:

LoopForever:
    b LoopForever
 80001fe:	e7fe      	b.n	80001fe <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000200:	2000a000 	.word	0x2000a000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000204:	0800148c 	.word	0x0800148c
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000208:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800020c:	20000004 	.word	0x20000004
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000210:	20000004 	.word	0x20000004
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000214:	20000064 	.word	0x20000064

08000218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000218:	e7fe      	b.n	8000218 <ADC1_2_IRQHandler>
	...

0800021c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800021c:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 800021e:	4b08      	ldr	r3, [pc, #32]	; (8000240 <HAL_InitTick+0x24>)
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000220:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 8000222:	6818      	ldr	r0, [r3, #0]
 8000224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000228:	fbb0 f0f3 	udiv	r0, r0, r3
 800022c:	f000 f88a 	bl	8000344 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000230:	2200      	movs	r2, #0
 8000232:	4621      	mov	r1, r4
 8000234:	f04f 30ff 	mov.w	r0, #4294967295
 8000238:	f000 f844 	bl	80002c4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800023c:	2000      	movs	r0, #0
 800023e:	bd10      	pop	{r4, pc}
 8000240:	20000000 	.word	0x20000000

08000244 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000244:	4a07      	ldr	r2, [pc, #28]	; (8000264 <HAL_Init+0x20>)
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000246:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000248:	6813      	ldr	r3, [r2, #0]
 800024a:	f043 0310 	orr.w	r3, r3, #16
 800024e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000250:	2003      	movs	r0, #3
 8000252:	f000 f825 	bl	80002a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000256:	2000      	movs	r0, #0
 8000258:	f7ff ffe0 	bl	800021c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800025c:	f001 f816 	bl	800128c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000260:	2000      	movs	r0, #0
 8000262:	bd08      	pop	{r3, pc}
 8000264:	40022000 	.word	0x40022000

08000268 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000268:	4a02      	ldr	r2, [pc, #8]	; (8000274 <HAL_IncTick+0xc>)
 800026a:	6813      	ldr	r3, [r2, #0]
 800026c:	3301      	adds	r3, #1
 800026e:	6013      	str	r3, [r2, #0]
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000024 	.word	0x20000024

08000278 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000278:	4b01      	ldr	r3, [pc, #4]	; (8000280 <HAL_GetTick+0x8>)
 800027a:	6818      	ldr	r0, [r3, #0]
}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	20000024 	.word	0x20000024

08000284 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000284:	b513      	push	{r0, r1, r4, lr}
 8000286:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000288:	f7ff fff6 	bl	8000278 <HAL_GetTick>
 800028c:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800028e:	f7ff fff3 	bl	8000278 <HAL_GetTick>
 8000292:	9b01      	ldr	r3, [sp, #4]
 8000294:	1b00      	subs	r0, r0, r4
 8000296:	4298      	cmp	r0, r3
 8000298:	d3f9      	bcc.n	800028e <HAL_Delay+0xa>
  {
  }
}
 800029a:	b002      	add	sp, #8
 800029c:	bd10      	pop	{r4, pc}
	...

080002a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002a0:	4a07      	ldr	r2, [pc, #28]	; (80002c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80002a2:	68d3      	ldr	r3, [r2, #12]
 80002a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80002a8:	041b      	lsls	r3, r3, #16
 80002aa:	0c1b      	lsrs	r3, r3, #16
 80002ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80002b0:	0200      	lsls	r0, r0, #8
 80002b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80002ba:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80002bc:	60d3      	str	r3, [r2, #12]
 80002be:	4770      	bx	lr
 80002c0:	e000ed00 	.word	0xe000ed00

080002c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002c4:	4b17      	ldr	r3, [pc, #92]	; (8000324 <HAL_NVIC_SetPriority+0x60>)
 80002c6:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002c8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002cc:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002ce:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002d2:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002d4:	2c04      	cmp	r4, #4
 80002d6:	bf28      	it	cs
 80002d8:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002da:	2d06      	cmp	r5, #6

  return (
 80002dc:	f04f 0501 	mov.w	r5, #1
 80002e0:	fa05 f404 	lsl.w	r4, r5, r4
 80002e4:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002e8:	bf8c      	ite	hi
 80002ea:	3b03      	subhi	r3, #3
 80002ec:	2300      	movls	r3, #0

  return (
 80002ee:	400c      	ands	r4, r1
 80002f0:	409c      	lsls	r4, r3
 80002f2:	fa05 f303 	lsl.w	r3, r5, r3
 80002f6:	3b01      	subs	r3, #1
 80002f8:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002fa:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80002fc:	ea42 0204 	orr.w	r2, r2, r4
 8000300:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000304:	bfaf      	iteee	ge
 8000306:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030a:	f000 000f 	andlt.w	r0, r0, #15
 800030e:	4b06      	ldrlt	r3, [pc, #24]	; (8000328 <HAL_NVIC_SetPriority+0x64>)
 8000310:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000312:	bfa5      	ittet	ge
 8000314:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000318:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	bf00      	nop
 8000324:	e000ed00 	.word	0xe000ed00
 8000328:	e000ed14 	.word	0xe000ed14

0800032c <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800032c:	0942      	lsrs	r2, r0, #5
 800032e:	2301      	movs	r3, #1
 8000330:	f000 001f 	and.w	r0, r0, #31
 8000334:	fa03 f000 	lsl.w	r0, r3, r0
 8000338:	4b01      	ldr	r3, [pc, #4]	; (8000340 <HAL_NVIC_EnableIRQ+0x14>)
 800033a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800033e:	4770      	bx	lr
 8000340:	e000e100 	.word	0xe000e100

08000344 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000344:	3801      	subs	r0, #1
 8000346:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800034a:	d20a      	bcs.n	8000362 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800034e:	4a07      	ldr	r2, [pc, #28]	; (800036c <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000350:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000352:	21f0      	movs	r1, #240	; 0xf0
 8000354:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000358:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800035a:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800035c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000362:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	e000e010 	.word	0xe000e010
 800036c:	e000ed00 	.word	0xe000ed00

08000370 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000370:	4b04      	ldr	r3, [pc, #16]	; (8000384 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000372:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000374:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000376:	bf0c      	ite	eq
 8000378:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800037c:	f022 0204 	bicne.w	r2, r2, #4
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	4770      	bx	lr
 8000384:	e000e010 	.word	0xe000e010

08000388 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000388:	4770      	bx	lr

0800038a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800038a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800038c:	f7ff fffc 	bl	8000388 <HAL_SYSTICK_Callback>
 8000390:	bd08      	pop	{r3, pc}
	...

08000394 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000398:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8000520 <HAL_GPIO_Init+0x18c>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800039c:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800039e:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8000524 <HAL_GPIO_Init+0x190>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003a2:	b085      	sub	sp, #20
 80003a4:	464c      	mov	r4, r9
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80003a6:	9301      	str	r3, [sp, #4]
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00;
 80003a8:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80003aa:	9a01      	ldr	r2, [sp, #4]
 80003ac:	40da      	lsrs	r2, r3
 80003ae:	f000 80b1 	beq.w	8000514 <HAL_GPIO_Init+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80003b2:	2201      	movs	r2, #1
 80003b4:	fa02 fa03 	lsl.w	sl, r2, r3

    if(iocurrent)
 80003b8:	9a01      	ldr	r2, [sp, #4]
 80003ba:	ea12 060a 	ands.w	r6, r2, sl
 80003be:	f000 80a7 	beq.w	8000510 <HAL_GPIO_Init+0x17c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80003c2:	684a      	ldr	r2, [r1, #4]
 80003c4:	f022 0e10 	bic.w	lr, r2, #16
 80003c8:	f1be 0f02 	cmp.w	lr, #2
 80003cc:	d114      	bne.n	80003f8 <HAL_GPIO_Init+0x64>
 80003ce:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80003d2:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80003d6:	f003 0b07 	and.w	fp, r3, #7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80003da:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80003de:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80003e2:	250f      	movs	r5, #15
 80003e4:	fa05 f50b 	lsl.w	r5, r5, fp
 80003e8:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80003ec:	690f      	ldr	r7, [r1, #16]
 80003ee:	fa07 f70b 	lsl.w	r7, r7, fp
 80003f2:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3] = temp;
 80003f4:	f8cc 7020 	str.w	r7, [ip, #32]
 80003f8:	ea4f 0b43 	mov.w	fp, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80003fc:	2703      	movs	r7, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80003fe:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000400:	fa07 fc0b 	lsl.w	ip, r7, fp
 8000404:	ea6f 0c0c 	mvn.w	ip, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000408:	4017      	ands	r7, r2
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800040a:	ea05 050c 	and.w	r5, r5, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800040e:	fa07 f70b 	lsl.w	r7, r7, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000412:	f10e 3eff 	add.w	lr, lr, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000416:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000418:	f1be 0f01 	cmp.w	lr, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 800041c:	6005      	str	r5, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800041e:	d810      	bhi.n	8000442 <HAL_GPIO_Init+0xae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000420:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
 8000422:	68cf      	ldr	r7, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000424:	ea0c 0505 	and.w	r5, ip, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000428:	fa07 f70b 	lsl.w	r7, r7, fp
 800042c:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 800042e:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000430:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000432:	ea25 0a0a 	bic.w	sl, r5, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000436:	f3c2 1500 	ubfx	r5, r2, #4, #1
 800043a:	409d      	lsls	r5, r3
 800043c:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->OTYPER = temp;
 8000440:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000442:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000444:	ea0c 0c05 	and.w	ip, ip, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000448:	688d      	ldr	r5, [r1, #8]
 800044a:	fa05 f50b 	lsl.w	r5, r5, fp
 800044e:	ea45 050c 	orr.w	r5, r5, ip
      GPIOx->PUPDR = temp;
 8000452:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000454:	00d5      	lsls	r5, r2, #3
 8000456:	d55b      	bpl.n	8000510 <HAL_GPIO_Init+0x17c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000458:	f8d8 5018 	ldr.w	r5, [r8, #24]
 800045c:	f045 0501 	orr.w	r5, r5, #1
 8000460:	f8c8 5018 	str.w	r5, [r8, #24]
 8000464:	f8d8 5018 	ldr.w	r5, [r8, #24]
 8000468:	f023 0e03 	bic.w	lr, r3, #3
 800046c:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8000470:	f005 0501 	and.w	r5, r5, #1
 8000474:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8000478:	9503      	str	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800047a:	f003 0c03 	and.w	ip, r3, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047e:	9d03      	ldr	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000480:	f8de 5008 	ldr.w	r5, [lr, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000484:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000488:	270f      	movs	r7, #15
 800048a:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800048e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000492:	ea25 0507 	bic.w	r5, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000496:	d011      	beq.n	80004bc <HAL_GPIO_Init+0x128>
 8000498:	4f20      	ldr	r7, [pc, #128]	; (800051c <HAL_GPIO_Init+0x188>)
 800049a:	42b8      	cmp	r0, r7
 800049c:	d010      	beq.n	80004c0 <HAL_GPIO_Init+0x12c>
 800049e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80004a2:	42b8      	cmp	r0, r7
 80004a4:	d00e      	beq.n	80004c4 <HAL_GPIO_Init+0x130>
 80004a6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80004aa:	42b8      	cmp	r0, r7
 80004ac:	d00c      	beq.n	80004c8 <HAL_GPIO_Init+0x134>
 80004ae:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80004b2:	42b8      	cmp	r0, r7
 80004b4:	bf14      	ite	ne
 80004b6:	2705      	movne	r7, #5
 80004b8:	2704      	moveq	r7, #4
 80004ba:	e006      	b.n	80004ca <HAL_GPIO_Init+0x136>
 80004bc:	2700      	movs	r7, #0
 80004be:	e004      	b.n	80004ca <HAL_GPIO_Init+0x136>
 80004c0:	2701      	movs	r7, #1
 80004c2:	e002      	b.n	80004ca <HAL_GPIO_Init+0x136>
 80004c4:	2702      	movs	r7, #2
 80004c6:	e000      	b.n	80004ca <HAL_GPIO_Init+0x136>
 80004c8:	2703      	movs	r7, #3
 80004ca:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ce:	ea4c 0505 	orr.w	r5, ip, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 80004d2:	f8ce 5008 	str.w	r5, [lr, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80004d6:	f8d9 5000 	ldr.w	r5, [r9]
        temp &= ~((uint32_t)iocurrent);
 80004da:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004dc:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 80004e0:	bf0c      	ite	eq
 80004e2:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 80004e4:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80004e6:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 80004e8:	6865      	ldr	r5, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004ea:	f412 3f00 	tst.w	r2, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 80004ee:	bf0c      	ite	eq
 80004f0:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 80004f2:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80004f4:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80004f6:	68a5      	ldr	r5, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004f8:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 80004fc:	bf0c      	ite	eq
 80004fe:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8000500:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000502:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000504:	68e5      	ldr	r5, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000506:	0292      	lsls	r2, r2, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8000508:	bf54      	ite	pl
 800050a:	403d      	andpl	r5, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 800050c:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800050e:	60e5      	str	r5, [r4, #12]
      }
    }
    
    position++;
 8000510:	3301      	adds	r3, #1
 8000512:	e74a      	b.n	80003aa <HAL_GPIO_Init+0x16>
  }
}
 8000514:	b005      	add	sp, #20
 8000516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800051a:	bf00      	nop
 800051c:	48000400 	.word	0x48000400
 8000520:	40010400 	.word	0x40010400
 8000524:	40021000 	.word	0x40021000

08000528 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000528:	b10a      	cbz	r2, 800052e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800052a:	6181      	str	r1, [r0, #24]
 800052c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800052e:	6281      	str	r1, [r0, #40]	; 0x28
 8000530:	4770      	bx	lr

08000532 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000532:	6943      	ldr	r3, [r0, #20]
 8000534:	4059      	eors	r1, r3
 8000536:	6141      	str	r1, [r0, #20]
 8000538:	4770      	bx	lr

0800053a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800053a:	4770      	bx	lr

0800053c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800053c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800053e:	4b04      	ldr	r3, [pc, #16]	; (8000550 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000540:	6959      	ldr	r1, [r3, #20]
 8000542:	4201      	tst	r1, r0
 8000544:	d002      	beq.n	800054c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000546:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000548:	f7ff fff7 	bl	800053a <HAL_GPIO_EXTI_Callback>
 800054c:	bd08      	pop	{r3, pc}
 800054e:	bf00      	nop
 8000550:	40010400 	.word	0x40010400

08000554 <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8000554:	4770      	bx	lr
	...

08000558 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8000558:	b510      	push	{r4, lr}
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 800055a:	4c05      	ldr	r4, [pc, #20]	; (8000570 <HAL_PWR_PVD_IRQHandler+0x18>)
 800055c:	6963      	ldr	r3, [r4, #20]
 800055e:	03db      	lsls	r3, r3, #15
 8000560:	d504      	bpl.n	800056c <HAL_PWR_PVD_IRQHandler+0x14>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8000562:	f7ff fff7 	bl	8000554 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8000566:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056a:	6163      	str	r3, [r4, #20]
 800056c:	bd10      	pop	{r4, pc}
 800056e:	bf00      	nop
 8000570:	40010400 	.word	0x40010400

08000574 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000574:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000576:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800057a:	07de      	lsls	r6, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800057c:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800057e:	d403      	bmi.n	8000588 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000580:	682b      	ldr	r3, [r5, #0]
 8000582:	079c      	lsls	r4, r3, #30
 8000584:	d471      	bmi.n	800066a <HAL_RCC_OscConfig+0xf6>
 8000586:	e0f0      	b.n	800076a <HAL_RCC_OscConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000588:	4cb3      	ldr	r4, [pc, #716]	; (8000858 <HAL_RCC_OscConfig+0x2e4>)
 800058a:	6863      	ldr	r3, [r4, #4]
 800058c:	f003 030c 	and.w	r3, r3, #12
 8000590:	2b04      	cmp	r3, #4
 8000592:	d007      	beq.n	80005a4 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000594:	6863      	ldr	r3, [r4, #4]
 8000596:	f003 030c 	and.w	r3, r3, #12
 800059a:	2b08      	cmp	r3, #8
 800059c:	d116      	bne.n	80005cc <HAL_RCC_OscConfig+0x58>
 800059e:	6863      	ldr	r3, [r4, #4]
 80005a0:	03d8      	lsls	r0, r3, #15
 80005a2:	d513      	bpl.n	80005cc <HAL_RCC_OscConfig+0x58>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005a8:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005ac:	6822      	ldr	r2, [r4, #0]
 80005ae:	fa93 f3a3 	rbit	r3, r3
 80005b2:	fab3 f383 	clz	r3, r3
 80005b6:	f003 031f 	and.w	r3, r3, #31
 80005ba:	fa22 f303 	lsr.w	r3, r2, r3
 80005be:	07d9      	lsls	r1, r3, #31
 80005c0:	d5de      	bpl.n	8000580 <HAL_RCC_OscConfig+0xc>
 80005c2:	686b      	ldr	r3, [r5, #4]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d1db      	bne.n	8000580 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 80005c8:	2001      	movs	r0, #1
 80005ca:	e233      	b.n	8000a34 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005cc:	686b      	ldr	r3, [r5, #4]
 80005ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005d2:	d007      	beq.n	80005e4 <HAL_RCC_OscConfig+0x70>
 80005d4:	6822      	ldr	r2, [r4, #0]
 80005d6:	b14b      	cbz	r3, 80005ec <HAL_RCC_OscConfig+0x78>
 80005d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80005dc:	d106      	bne.n	80005ec <HAL_RCC_OscConfig+0x78>
 80005de:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80005e2:	6022      	str	r2, [r4, #0]
 80005e4:	6822      	ldr	r2, [r4, #0]
 80005e6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80005ea:	e005      	b.n	80005f8 <HAL_RCC_OscConfig+0x84>
 80005ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005f0:	6022      	str	r2, [r4, #0]
 80005f2:	6822      	ldr	r2, [r4, #0]
 80005f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005f8:	6022      	str	r2, [r4, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80005fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80005fc:	f022 010f 	bic.w	r1, r2, #15
 8000600:	68aa      	ldr	r2, [r5, #8]
 8000602:	430a      	orrs	r2, r1
 8000604:	62e2      	str	r2, [r4, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000606:	b1c3      	cbz	r3, 800063a <HAL_RCC_OscConfig+0xc6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000608:	f7ff fe36 	bl	8000278 <HAL_GetTick>
 800060c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000610:	4607      	mov	r7, r0
 8000612:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000616:	6822      	ldr	r2, [r4, #0]
 8000618:	fa96 f3a6 	rbit	r3, r6
 800061c:	fab3 f383 	clz	r3, r3
 8000620:	f003 031f 	and.w	r3, r3, #31
 8000624:	fa22 f303 	lsr.w	r3, r2, r3
 8000628:	07da      	lsls	r2, r3, #31
 800062a:	d4a9      	bmi.n	8000580 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800062c:	f7ff fe24 	bl	8000278 <HAL_GetTick>
 8000630:	1bc0      	subs	r0, r0, r7
 8000632:	2864      	cmp	r0, #100	; 0x64
 8000634:	d9ed      	bls.n	8000612 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8000636:	2003      	movs	r0, #3
 8000638:	e1fc      	b.n	8000a34 <HAL_RCC_OscConfig+0x4c0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800063a:	f7ff fe1d 	bl	8000278 <HAL_GetTick>
 800063e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000642:	4607      	mov	r7, r0
 8000644:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000648:	6822      	ldr	r2, [r4, #0]
 800064a:	fa96 f3a6 	rbit	r3, r6
 800064e:	fab3 f383 	clz	r3, r3
 8000652:	f003 031f 	and.w	r3, r3, #31
 8000656:	fa22 f303 	lsr.w	r3, r2, r3
 800065a:	07db      	lsls	r3, r3, #31
 800065c:	d590      	bpl.n	8000580 <HAL_RCC_OscConfig+0xc>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800065e:	f7ff fe0b 	bl	8000278 <HAL_GetTick>
 8000662:	1bc0      	subs	r0, r0, r7
 8000664:	2864      	cmp	r0, #100	; 0x64
 8000666:	d9ed      	bls.n	8000644 <HAL_RCC_OscConfig+0xd0>
 8000668:	e7e5      	b.n	8000636 <HAL_RCC_OscConfig+0xc2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800066a:	4c7b      	ldr	r4, [pc, #492]	; (8000858 <HAL_RCC_OscConfig+0x2e4>)
 800066c:	6863      	ldr	r3, [r4, #4]
 800066e:	f013 0f0c 	tst.w	r3, #12
 8000672:	d007      	beq.n	8000684 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000674:	6863      	ldr	r3, [r4, #4]
 8000676:	f003 030c 	and.w	r3, r3, #12
 800067a:	2b08      	cmp	r3, #8
 800067c:	d121      	bne.n	80006c2 <HAL_RCC_OscConfig+0x14e>
 800067e:	6863      	ldr	r3, [r4, #4]
 8000680:	03d8      	lsls	r0, r3, #15
 8000682:	d41e      	bmi.n	80006c2 <HAL_RCC_OscConfig+0x14e>
 8000684:	2302      	movs	r3, #2
 8000686:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800068a:	6822      	ldr	r2, [r4, #0]
 800068c:	fa93 f3a3 	rbit	r3, r3
 8000690:	fab3 f383 	clz	r3, r3
 8000694:	f003 031f 	and.w	r3, r3, #31
 8000698:	fa22 f303 	lsr.w	r3, r2, r3
 800069c:	07d9      	lsls	r1, r3, #31
 800069e:	d502      	bpl.n	80006a6 <HAL_RCC_OscConfig+0x132>
 80006a0:	692b      	ldr	r3, [r5, #16]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d190      	bne.n	80005c8 <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006a6:	6823      	ldr	r3, [r4, #0]
 80006a8:	22f8      	movs	r2, #248	; 0xf8
 80006aa:	fa92 f2a2 	rbit	r2, r2
 80006ae:	6969      	ldr	r1, [r5, #20]
 80006b0:	fab2 f282 	clz	r2, r2
 80006b4:	fa01 f202 	lsl.w	r2, r1, r2
 80006b8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80006bc:	4313      	orrs	r3, r2
 80006be:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006c0:	e053      	b.n	800076a <HAL_RCC_OscConfig+0x1f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80006c2:	692a      	ldr	r2, [r5, #16]
 80006c4:	2301      	movs	r3, #1
 80006c6:	b37a      	cbz	r2, 8000728 <HAL_RCC_OscConfig+0x1b4>
 80006c8:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80006cc:	fab2 f282 	clz	r2, r2
 80006d0:	0092      	lsls	r2, r2, #2
 80006d2:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 80006d6:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 80006da:	2602      	movs	r6, #2
 80006dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80006de:	f7ff fdcb 	bl	8000278 <HAL_GetTick>
 80006e2:	4607      	mov	r7, r0
 80006e4:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006e8:	485b      	ldr	r0, [pc, #364]	; (8000858 <HAL_RCC_OscConfig+0x2e4>)
 80006ea:	6822      	ldr	r2, [r4, #0]
 80006ec:	fa96 f3a6 	rbit	r3, r6
 80006f0:	fab3 f383 	clz	r3, r3
 80006f4:	f003 031f 	and.w	r3, r3, #31
 80006f8:	fa22 f303 	lsr.w	r3, r2, r3
 80006fc:	07da      	lsls	r2, r3, #31
 80006fe:	d405      	bmi.n	800070c <HAL_RCC_OscConfig+0x198>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000700:	f7ff fdba 	bl	8000278 <HAL_GetTick>
 8000704:	1bc0      	subs	r0, r0, r7
 8000706:	2802      	cmp	r0, #2
 8000708:	d9ec      	bls.n	80006e4 <HAL_RCC_OscConfig+0x170>
 800070a:	e794      	b.n	8000636 <HAL_RCC_OscConfig+0xc2>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800070c:	6803      	ldr	r3, [r0, #0]
 800070e:	22f8      	movs	r2, #248	; 0xf8
 8000710:	fa92 f2a2 	rbit	r2, r2
 8000714:	6969      	ldr	r1, [r5, #20]
 8000716:	fab2 f282 	clz	r2, r2
 800071a:	fa01 f202 	lsl.w	r2, r1, r2
 800071e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000722:	4313      	orrs	r3, r2
 8000724:	6003      	str	r3, [r0, #0]
 8000726:	e020      	b.n	800076a <HAL_RCC_OscConfig+0x1f6>
 8000728:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800072c:	fab3 f383 	clz	r3, r3
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000736:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800073a:	2602      	movs	r6, #2
 800073c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800073e:	f7ff fd9b 	bl	8000278 <HAL_GetTick>
 8000742:	4607      	mov	r7, r0
 8000744:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000748:	6822      	ldr	r2, [r4, #0]
 800074a:	fa96 f3a6 	rbit	r3, r6
 800074e:	fab3 f383 	clz	r3, r3
 8000752:	f003 031f 	and.w	r3, r3, #31
 8000756:	fa22 f303 	lsr.w	r3, r2, r3
 800075a:	07db      	lsls	r3, r3, #31
 800075c:	d505      	bpl.n	800076a <HAL_RCC_OscConfig+0x1f6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800075e:	f7ff fd8b 	bl	8000278 <HAL_GetTick>
 8000762:	1bc0      	subs	r0, r0, r7
 8000764:	2802      	cmp	r0, #2
 8000766:	d9ed      	bls.n	8000744 <HAL_RCC_OscConfig+0x1d0>
 8000768:	e765      	b.n	8000636 <HAL_RCC_OscConfig+0xc2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800076a:	682b      	ldr	r3, [r5, #0]
 800076c:	0718      	lsls	r0, r3, #28
 800076e:	d403      	bmi.n	8000778 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000770:	682b      	ldr	r3, [r5, #0]
 8000772:	0759      	lsls	r1, r3, #29
 8000774:	d447      	bmi.n	8000806 <HAL_RCC_OscConfig+0x292>
 8000776:	e0da      	b.n	800092e <HAL_RCC_OscConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000778:	69aa      	ldr	r2, [r5, #24]
 800077a:	4c37      	ldr	r4, [pc, #220]	; (8000858 <HAL_RCC_OscConfig+0x2e4>)
 800077c:	4937      	ldr	r1, [pc, #220]	; (800085c <HAL_RCC_OscConfig+0x2e8>)
 800077e:	2301      	movs	r3, #1
 8000780:	b302      	cbz	r2, 80007c4 <HAL_RCC_OscConfig+0x250>
 8000782:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000786:	fab2 f282 	clz	r2, r2
 800078a:	2602      	movs	r6, #2
 800078c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000790:	f7ff fd72 	bl	8000278 <HAL_GetTick>
 8000794:	4607      	mov	r7, r0
 8000796:	fa96 f3a6 	rbit	r3, r6
 800079a:	fa96 f3a6 	rbit	r3, r6
 800079e:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007a4:	fa96 f3a6 	rbit	r3, r6
 80007a8:	fab3 f383 	clz	r3, r3
 80007ac:	f003 031f 	and.w	r3, r3, #31
 80007b0:	fa22 f303 	lsr.w	r3, r2, r3
 80007b4:	07da      	lsls	r2, r3, #31
 80007b6:	d4db      	bmi.n	8000770 <HAL_RCC_OscConfig+0x1fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007b8:	f7ff fd5e 	bl	8000278 <HAL_GetTick>
 80007bc:	1bc0      	subs	r0, r0, r7
 80007be:	2802      	cmp	r0, #2
 80007c0:	d9e9      	bls.n	8000796 <HAL_RCC_OscConfig+0x222>
 80007c2:	e738      	b.n	8000636 <HAL_RCC_OscConfig+0xc2>
 80007c4:	fa93 f3a3 	rbit	r3, r3
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80007c8:	fab3 f383 	clz	r3, r3
 80007cc:	2602      	movs	r6, #2
 80007ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80007d2:	f7ff fd51 	bl	8000278 <HAL_GetTick>
 80007d6:	4607      	mov	r7, r0
 80007d8:	fa96 f3a6 	rbit	r3, r6
 80007dc:	fa96 f3a6 	rbit	r3, r6
 80007e0:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007e6:	fa96 f3a6 	rbit	r3, r6
 80007ea:	fab3 f383 	clz	r3, r3
 80007ee:	f003 031f 	and.w	r3, r3, #31
 80007f2:	fa22 f303 	lsr.w	r3, r2, r3
 80007f6:	07db      	lsls	r3, r3, #31
 80007f8:	d5ba      	bpl.n	8000770 <HAL_RCC_OscConfig+0x1fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007fa:	f7ff fd3d 	bl	8000278 <HAL_GetTick>
 80007fe:	1bc0      	subs	r0, r0, r7
 8000800:	2802      	cmp	r0, #2
 8000802:	d9e9      	bls.n	80007d8 <HAL_RCC_OscConfig+0x264>
 8000804:	e717      	b.n	8000636 <HAL_RCC_OscConfig+0xc2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000806:	4c14      	ldr	r4, [pc, #80]	; (8000858 <HAL_RCC_OscConfig+0x2e4>)
 8000808:	69e3      	ldr	r3, [r4, #28]
 800080a:	00de      	lsls	r6, r3, #3
 800080c:	d40a      	bmi.n	8000824 <HAL_RCC_OscConfig+0x2b0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	69e3      	ldr	r3, [r4, #28]
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	61e3      	str	r3, [r4, #28]
 8000816:	69e3      	ldr	r3, [r4, #28]
 8000818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000820:	2701      	movs	r7, #1
 8000822:	e000      	b.n	8000826 <HAL_RCC_OscConfig+0x2b2>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 8000824:	2700      	movs	r7, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000826:	4e0e      	ldr	r6, [pc, #56]	; (8000860 <HAL_RCC_OscConfig+0x2ec>)
 8000828:	6833      	ldr	r3, [r6, #0]
 800082a:	05d8      	lsls	r0, r3, #23
 800082c:	d503      	bpl.n	8000836 <HAL_RCC_OscConfig+0x2c2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800082e:	68eb      	ldr	r3, [r5, #12]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d117      	bne.n	8000864 <HAL_RCC_OscConfig+0x2f0>
 8000834:	e02d      	b.n	8000892 <HAL_RCC_OscConfig+0x31e>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000836:	6833      	ldr	r3, [r6, #0]
 8000838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800083c:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800083e:	f7ff fd1b 	bl	8000278 <HAL_GetTick>
 8000842:	4680      	mov	r8, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000844:	6833      	ldr	r3, [r6, #0]
 8000846:	05d9      	lsls	r1, r3, #23
 8000848:	d4f1      	bmi.n	800082e <HAL_RCC_OscConfig+0x2ba>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800084a:	f7ff fd15 	bl	8000278 <HAL_GetTick>
 800084e:	ebc8 0000 	rsb	r0, r8, r0
 8000852:	2864      	cmp	r0, #100	; 0x64
 8000854:	d9f6      	bls.n	8000844 <HAL_RCC_OscConfig+0x2d0>
 8000856:	e6ee      	b.n	8000636 <HAL_RCC_OscConfig+0xc2>
 8000858:	40021000 	.word	0x40021000
 800085c:	42420480 	.word	0x42420480
 8000860:	40007000 	.word	0x40007000
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000864:	b97b      	cbnz	r3, 8000886 <HAL_RCC_OscConfig+0x312>
 8000866:	6a23      	ldr	r3, [r4, #32]
 8000868:	f023 0301 	bic.w	r3, r3, #1
 800086c:	6223      	str	r3, [r4, #32]
 800086e:	6a23      	ldr	r3, [r4, #32]
 8000870:	f023 0304 	bic.w	r3, r3, #4
 8000874:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000876:	f7ff fcff 	bl	8000278 <HAL_GetTick>
 800087a:	2602      	movs	r6, #2
 800087c:	4681      	mov	r9, r0
 800087e:	46b0      	mov	r8, r6
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000880:	f241 3a88 	movw	sl, #5000	; 0x1388
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000884:	e039      	b.n	80008fa <HAL_RCC_OscConfig+0x386>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000886:	2b05      	cmp	r3, #5
 8000888:	6a23      	ldr	r3, [r4, #32]
 800088a:	d106      	bne.n	800089a <HAL_RCC_OscConfig+0x326>
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	6223      	str	r3, [r4, #32]
 8000892:	6a23      	ldr	r3, [r4, #32]
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	e005      	b.n	80008a6 <HAL_RCC_OscConfig+0x332>
 800089a:	f023 0301 	bic.w	r3, r3, #1
 800089e:	6223      	str	r3, [r4, #32]
 80008a0:	6a23      	ldr	r3, [r4, #32]
 80008a2:	f023 0304 	bic.w	r3, r3, #4
 80008a6:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80008a8:	f7ff fce6 	bl	8000278 <HAL_GetTick>
 80008ac:	2602      	movs	r6, #2
 80008ae:	4682      	mov	sl, r0
 80008b0:	46b1      	mov	r9, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008b2:	f241 3888 	movw	r8, #5000	; 0x1388
 80008b6:	fa96 f3a6 	rbit	r3, r6
 80008ba:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008be:	b10b      	cbz	r3, 80008c4 <HAL_RCC_OscConfig+0x350>
 80008c0:	6a22      	ldr	r2, [r4, #32]
 80008c2:	e002      	b.n	80008ca <HAL_RCC_OscConfig+0x356>
 80008c4:	fa96 f3a6 	rbit	r3, r6
 80008c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008ca:	fa99 f3a9 	rbit	r3, r9
 80008ce:	fab3 f383 	clz	r3, r3
 80008d2:	f003 031f 	and.w	r3, r3, #31
 80008d6:	fa22 f303 	lsr.w	r3, r2, r3
 80008da:	07da      	lsls	r2, r3, #31
 80008dc:	d41d      	bmi.n	800091a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008de:	f7ff fccb 	bl	8000278 <HAL_GetTick>
 80008e2:	ebca 0000 	rsb	r0, sl, r0
 80008e6:	4540      	cmp	r0, r8
 80008e8:	d9e5      	bls.n	80008b6 <HAL_RCC_OscConfig+0x342>
 80008ea:	e6a4      	b.n	8000636 <HAL_RCC_OscConfig+0xc2>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008ec:	f7ff fcc4 	bl	8000278 <HAL_GetTick>
 80008f0:	ebc9 0000 	rsb	r0, r9, r0
 80008f4:	4550      	cmp	r0, sl
 80008f6:	f63f ae9e 	bhi.w	8000636 <HAL_RCC_OscConfig+0xc2>
 80008fa:	fa96 f3a6 	rbit	r3, r6
 80008fe:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000902:	b183      	cbz	r3, 8000926 <HAL_RCC_OscConfig+0x3b2>
 8000904:	6a22      	ldr	r2, [r4, #32]
 8000906:	fa98 f3a8 	rbit	r3, r8
 800090a:	fab3 f383 	clz	r3, r3
 800090e:	f003 031f 	and.w	r3, r3, #31
 8000912:	fa22 f303 	lsr.w	r3, r2, r3
 8000916:	07db      	lsls	r3, r3, #31
 8000918:	d4e8      	bmi.n	80008ec <HAL_RCC_OscConfig+0x378>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800091a:	b147      	cbz	r7, 800092e <HAL_RCC_OscConfig+0x3ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800091c:	69e3      	ldr	r3, [r4, #28]
 800091e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000922:	61e3      	str	r3, [r4, #28]
 8000924:	e003      	b.n	800092e <HAL_RCC_OscConfig+0x3ba>
 8000926:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800092a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800092c:	e7eb      	b.n	8000906 <HAL_RCC_OscConfig+0x392>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800092e:	69ea      	ldr	r2, [r5, #28]
 8000930:	b90a      	cbnz	r2, 8000936 <HAL_RCC_OscConfig+0x3c2>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000932:	2000      	movs	r0, #0
 8000934:	e07e      	b.n	8000a34 <HAL_RCC_OscConfig+0x4c0>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000936:	4c41      	ldr	r4, [pc, #260]	; (8000a3c <HAL_RCC_OscConfig+0x4c8>)
 8000938:	6863      	ldr	r3, [r4, #4]
 800093a:	f003 030c 	and.w	r3, r3, #12
 800093e:	2b08      	cmp	r3, #8
 8000940:	f43f ae42 	beq.w	80005c8 <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000944:	2a02      	cmp	r2, #2
 8000946:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800094a:	d150      	bne.n	80009ee <HAL_RCC_OscConfig+0x47a>
 800094c:	fa93 f3a3 	rbit	r3, r3
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000950:	fab3 f383 	clz	r3, r3
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800095a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000962:	f7ff fc89 	bl	8000278 <HAL_GetTick>
 8000966:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800096a:	4607      	mov	r7, r0
 800096c:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000970:	4932      	ldr	r1, [pc, #200]	; (8000a3c <HAL_RCC_OscConfig+0x4c8>)
 8000972:	6822      	ldr	r2, [r4, #0]
 8000974:	fa96 f3a6 	rbit	r3, r6
 8000978:	fab3 f383 	clz	r3, r3
 800097c:	f003 031f 	and.w	r3, r3, #31
 8000980:	fa22 f303 	lsr.w	r3, r2, r3
 8000984:	07d8      	lsls	r0, r3, #31
 8000986:	d505      	bpl.n	8000994 <HAL_RCC_OscConfig+0x420>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000988:	f7ff fc76 	bl	8000278 <HAL_GetTick>
 800098c:	1bc0      	subs	r0, r0, r7
 800098e:	2802      	cmp	r0, #2
 8000990:	d9ec      	bls.n	800096c <HAL_RCC_OscConfig+0x3f8>
 8000992:	e650      	b.n	8000636 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000994:	684b      	ldr	r3, [r1, #4]
 8000996:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8000998:	6a2a      	ldr	r2, [r5, #32]
 800099a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800099e:	4302      	orrs	r2, r0
 80009a0:	4313      	orrs	r3, r2
 80009a2:	604b      	str	r3, [r1, #4]
 80009a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009a8:	fa93 f3a3 	rbit	r3, r3
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80009ac:	fab3 f383 	clz	r3, r3
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80009b6:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80009ba:	2201      	movs	r2, #1
 80009bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009be:	f7ff fc5b 	bl	8000278 <HAL_GetTick>
 80009c2:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80009c6:	4606      	mov	r6, r0
 80009c8:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009cc:	6822      	ldr	r2, [r4, #0]
 80009ce:	fa95 f3a5 	rbit	r3, r5
 80009d2:	fab3 f383 	clz	r3, r3
 80009d6:	f003 031f 	and.w	r3, r3, #31
 80009da:	fa22 f303 	lsr.w	r3, r2, r3
 80009de:	07da      	lsls	r2, r3, #31
 80009e0:	d4a7      	bmi.n	8000932 <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009e2:	f7ff fc49 	bl	8000278 <HAL_GetTick>
 80009e6:	1b80      	subs	r0, r0, r6
 80009e8:	2802      	cmp	r0, #2
 80009ea:	d9ed      	bls.n	80009c8 <HAL_RCC_OscConfig+0x454>
 80009ec:	e623      	b.n	8000636 <HAL_RCC_OscConfig+0xc2>
 80009ee:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80009f2:	fab3 f383 	clz	r3, r3
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80009fc:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a04:	f7ff fc38 	bl	8000278 <HAL_GetTick>
 8000a08:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000a0c:	4606      	mov	r6, r0
 8000a0e:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a12:	6822      	ldr	r2, [r4, #0]
 8000a14:	fa95 f3a5 	rbit	r3, r5
 8000a18:	fab3 f383 	clz	r3, r3
 8000a1c:	f003 031f 	and.w	r3, r3, #31
 8000a20:	fa22 f303 	lsr.w	r3, r2, r3
 8000a24:	07db      	lsls	r3, r3, #31
 8000a26:	d584      	bpl.n	8000932 <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a28:	f7ff fc26 	bl	8000278 <HAL_GetTick>
 8000a2c:	1b80      	subs	r0, r0, r6
 8000a2e:	2802      	cmp	r0, #2
 8000a30:	d9ed      	bls.n	8000a0e <HAL_RCC_OscConfig+0x49a>
 8000a32:	e600      	b.n	8000636 <HAL_RCC_OscConfig+0xc2>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000a34:	b002      	add	sp, #8
 8000a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40021000 	.word	0x40021000

08000a40 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8000a40:	4913      	ldr	r1, [pc, #76]	; (8000a90 <HAL_RCC_GetSysClockFreq+0x50>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000a42:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8000a44:	684c      	ldr	r4, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000a46:	f004 030c 	and.w	r3, r4, #12
 8000a4a:	2b08      	cmp	r3, #8
 8000a4c:	d11e      	bne.n	8000a8c <HAL_RCC_GetSysClockFreq+0x4c>
 8000a4e:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000a52:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a56:	f404 1270 	and.w	r2, r4, #3932160	; 0x3c0000
 8000a5a:	fab3 f383 	clz	r3, r3
 8000a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8000a62:	4a0c      	ldr	r2, [pc, #48]	; (8000a94 <HAL_RCC_GetSysClockFreq+0x54>)
 8000a64:	5cd3      	ldrb	r3, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000a66:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8000a68:	210f      	movs	r1, #15
 8000a6a:	fa91 f1a1 	rbit	r1, r1
 8000a6e:	fab1 f181 	clz	r1, r1
 8000a72:	f002 020f 	and.w	r2, r2, #15
 8000a76:	40ca      	lsrs	r2, r1
 8000a78:	4907      	ldr	r1, [pc, #28]	; (8000a98 <HAL_RCC_GetSysClockFreq+0x58>)
 8000a7a:	5c88      	ldrb	r0, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000a7c:	03e2      	lsls	r2, r4, #15
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8000a7e:	bf52      	itee	pl
 8000a80:	4806      	ldrpl	r0, [pc, #24]	; (8000a9c <HAL_RCC_GetSysClockFreq+0x5c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000a82:	4a07      	ldrmi	r2, [pc, #28]	; (8000aa0 <HAL_RCC_GetSysClockFreq+0x60>)
 8000a84:	fbb2 f0f0 	udivmi	r0, r2, r0
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8000a88:	4358      	muls	r0, r3
 8000a8a:	bd10      	pop	{r4, pc}
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a8e:	bd10      	pop	{r4, pc}
 8000a90:	40021000 	.word	0x40021000
 8000a94:	08001464 	.word	0x08001464
 8000a98:	08001454 	.word	0x08001454
 8000a9c:	003d0900 	.word	0x003d0900
 8000aa0:	007a1200 	.word	0x007a1200

08000aa4 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000aa4:	4a54      	ldr	r2, [pc, #336]	; (8000bf8 <HAL_RCC_ClockConfig+0x154>)
 8000aa6:	6813      	ldr	r3, [r2, #0]
 8000aa8:	f003 0307 	and.w	r3, r3, #7
 8000aac:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ab2:	4606      	mov	r6, r0
 8000ab4:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ab6:	d30a      	bcc.n	8000ace <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ab8:	6831      	ldr	r1, [r6, #0]
 8000aba:	078c      	lsls	r4, r1, #30
 8000abc:	d514      	bpl.n	8000ae8 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000abe:	484f      	ldr	r0, [pc, #316]	; (8000bfc <HAL_RCC_ClockConfig+0x158>)
 8000ac0:	6843      	ldr	r3, [r0, #4]
 8000ac2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ac6:	68b3      	ldr	r3, [r6, #8]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	6043      	str	r3, [r0, #4]
 8000acc:	e00c      	b.n	8000ae8 <HAL_RCC_ClockConfig+0x44>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ace:	6813      	ldr	r3, [r2, #0]
 8000ad0:	f023 0307 	bic.w	r3, r3, #7
 8000ad4:	430b      	orrs	r3, r1
 8000ad6:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ad8:	6813      	ldr	r3, [r2, #0]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	d0ea      	beq.n	8000ab8 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ae8:	07c8      	lsls	r0, r1, #31
 8000aea:	d406      	bmi.n	8000afa <HAL_RCC_ClockConfig+0x56>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000aec:	4a42      	ldr	r2, [pc, #264]	; (8000bf8 <HAL_RCC_ClockConfig+0x154>)
 8000aee:	6813      	ldr	r3, [r2, #0]
 8000af0:	f003 0307 	and.w	r3, r3, #7
 8000af4:	429d      	cmp	r5, r3
 8000af6:	d34a      	bcc.n	8000b8e <HAL_RCC_ClockConfig+0xea>
 8000af8:	e053      	b.n	8000ba2 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000afa:	6872      	ldr	r2, [r6, #4]
 8000afc:	4c3f      	ldr	r4, [pc, #252]	; (8000bfc <HAL_RCC_ClockConfig+0x158>)
 8000afe:	2a01      	cmp	r2, #1
 8000b00:	d102      	bne.n	8000b08 <HAL_RCC_ClockConfig+0x64>
 8000b02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b06:	e004      	b.n	8000b12 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b08:	2a02      	cmp	r2, #2
 8000b0a:	bf0c      	ite	eq
 8000b0c:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000b10:	2302      	movne	r3, #2
 8000b12:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b16:	6821      	ldr	r1, [r4, #0]
 8000b18:	fa93 f3a3 	rbit	r3, r3
 8000b1c:	fab3 f383 	clz	r3, r3
 8000b20:	f003 031f 	and.w	r3, r3, #31
 8000b24:	fa21 f303 	lsr.w	r3, r1, r3
 8000b28:	07d9      	lsls	r1, r3, #31
 8000b2a:	d5da      	bpl.n	8000ae2 <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b2c:	6863      	ldr	r3, [r4, #4]
 8000b2e:	f023 0303 	bic.w	r3, r3, #3
 8000b32:	431a      	orrs	r2, r3
 8000b34:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000b36:	f7ff fb9f 	bl	8000278 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b3a:	6873      	ldr	r3, [r6, #4]
 8000b3c:	2b01      	cmp	r3, #1
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000b3e:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b40:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b44:	d10c      	bne.n	8000b60 <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b46:	6863      	ldr	r3, [r4, #4]
 8000b48:	f003 030c 	and.w	r3, r3, #12
 8000b4c:	2b04      	cmp	r3, #4
 8000b4e:	d0cd      	beq.n	8000aec <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b50:	f7ff fb92 	bl	8000278 <HAL_GetTick>
 8000b54:	1bc0      	subs	r0, r0, r7
 8000b56:	4540      	cmp	r0, r8
 8000b58:	d9f5      	bls.n	8000b46 <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 8000b5a:	2003      	movs	r0, #3
 8000b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d10f      	bne.n	8000b84 <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b64:	6863      	ldr	r3, [r4, #4]
 8000b66:	f003 030c 	and.w	r3, r3, #12
 8000b6a:	2b08      	cmp	r3, #8
 8000b6c:	d0be      	beq.n	8000aec <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b6e:	f7ff fb83 	bl	8000278 <HAL_GetTick>
 8000b72:	1bc0      	subs	r0, r0, r7
 8000b74:	4540      	cmp	r0, r8
 8000b76:	d9f5      	bls.n	8000b64 <HAL_RCC_ClockConfig+0xc0>
 8000b78:	e7ef      	b.n	8000b5a <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b7a:	f7ff fb7d 	bl	8000278 <HAL_GetTick>
 8000b7e:	1bc0      	subs	r0, r0, r7
 8000b80:	4540      	cmp	r0, r8
 8000b82:	d8ea      	bhi.n	8000b5a <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b84:	6863      	ldr	r3, [r4, #4]
 8000b86:	f013 0f0c 	tst.w	r3, #12
 8000b8a:	d1f6      	bne.n	8000b7a <HAL_RCC_ClockConfig+0xd6>
 8000b8c:	e7ae      	b.n	8000aec <HAL_RCC_ClockConfig+0x48>
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b8e:	6813      	ldr	r3, [r2, #0]
 8000b90:	f023 0307 	bic.w	r3, r3, #7
 8000b94:	432b      	orrs	r3, r5
 8000b96:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b98:	6813      	ldr	r3, [r2, #0]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	429d      	cmp	r5, r3
 8000ba0:	d19f      	bne.n	8000ae2 <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ba2:	6831      	ldr	r1, [r6, #0]
 8000ba4:	4c15      	ldr	r4, [pc, #84]	; (8000bfc <HAL_RCC_ClockConfig+0x158>)
 8000ba6:	f011 0f04 	tst.w	r1, #4
 8000baa:	d005      	beq.n	8000bb8 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000bac:	6863      	ldr	r3, [r4, #4]
 8000bae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000bb2:	68f3      	ldr	r3, [r6, #12]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bb8:	070b      	lsls	r3, r1, #28
 8000bba:	d506      	bpl.n	8000bca <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000bbc:	6863      	ldr	r3, [r4, #4]
 8000bbe:	6932      	ldr	r2, [r6, #16]
 8000bc0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000bc4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000bc8:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000bca:	f7ff ff39 	bl	8000a40 <HAL_RCC_GetSysClockFreq>
 8000bce:	6863      	ldr	r3, [r4, #4]
 8000bd0:	22f0      	movs	r2, #240	; 0xf0
 8000bd2:	fa92 f2a2 	rbit	r2, r2
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000bde:	40d3      	lsrs	r3, r2
 8000be0:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <HAL_RCC_ClockConfig+0x15c>)
 8000be2:	5cd3      	ldrb	r3, [r2, r3]
 8000be4:	40d8      	lsrs	r0, r3
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <HAL_RCC_ClockConfig+0x160>)
 8000be8:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000bea:	2000      	movs	r0, #0
 8000bec:	f7ff fb16 	bl	800021c <HAL_InitTick>
  
  return HAL_OK;
 8000bf0:	2000      	movs	r0, #0
}
 8000bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40022000 	.word	0x40022000
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	08001474 	.word	0x08001474
 8000c04:	20000000 	.word	0x20000000

08000c08 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000c08:	4b01      	ldr	r3, [pc, #4]	; (8000c10 <HAL_RCC_GetHCLKFreq+0x8>)
 8000c0a:	6818      	ldr	r0, [r3, #0]
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000000 	.word	0x20000000

08000c14 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000c14:	6803      	ldr	r3, [r0, #0]
 8000c16:	68da      	ldr	r2, [r3, #12]
 8000c18:	f042 0201 	orr.w	r2, r2, #1
 8000c1c:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	f042 0201 	orr.w	r2, r2, #1
 8000c24:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8000c26:	2000      	movs	r0, #0
 8000c28:	4770      	bx	lr

08000c2a <HAL_TIM_OC_DelayElapsedCallback>:
 8000c2a:	4770      	bx	lr

08000c2c <HAL_TIM_IC_CaptureCallback>:
 8000c2c:	4770      	bx	lr

08000c2e <HAL_TIM_PWM_PulseFinishedCallback>:
 8000c2e:	4770      	bx	lr

08000c30 <HAL_TIM_TriggerCallback>:
 8000c30:	4770      	bx	lr

08000c32 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000c32:	6803      	ldr	r3, [r0, #0]
 8000c34:	691a      	ldr	r2, [r3, #16]
 8000c36:	0791      	lsls	r1, r2, #30
  * @brief  This function handles TIM interrupts requests.
  * @param  htim: TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000c38:	b510      	push	{r4, lr}
 8000c3a:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000c3c:	d514      	bpl.n	8000c68 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000c3e:	68da      	ldr	r2, [r3, #12]
 8000c40:	0792      	lsls	r2, r2, #30
 8000c42:	d511      	bpl.n	8000c68 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000c44:	f06f 0202 	mvn.w	r2, #2
 8000c48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8000c4a:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000c4c:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8000c4e:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000c50:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8000c52:	d002      	beq.n	8000c5a <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000c54:	f7ff ffea 	bl	8000c2c <HAL_TIM_IC_CaptureCallback>
 8000c58:	e004      	b.n	8000c64 <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c5a:	f7ff ffe6 	bl	8000c2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c5e:	4620      	mov	r0, r4
 8000c60:	f7ff ffe5 	bl	8000c2e <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c64:	2300      	movs	r3, #0
 8000c66:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000c68:	6823      	ldr	r3, [r4, #0]
 8000c6a:	691a      	ldr	r2, [r3, #16]
 8000c6c:	0750      	lsls	r0, r2, #29
 8000c6e:	d516      	bpl.n	8000c9e <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000c70:	68da      	ldr	r2, [r3, #12]
 8000c72:	0751      	lsls	r1, r2, #29
 8000c74:	d513      	bpl.n	8000c9e <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000c76:	f06f 0204 	mvn.w	r2, #4
 8000c7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8000c7c:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000c7e:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8000c80:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000c84:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000c86:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8000c88:	d002      	beq.n	8000c90 <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000c8a:	f7ff ffcf 	bl	8000c2c <HAL_TIM_IC_CaptureCallback>
 8000c8e:	e004      	b.n	8000c9a <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c90:	f7ff ffcb 	bl	8000c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c94:	4620      	mov	r0, r4
 8000c96:	f7ff ffca 	bl	8000c2e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	7623      	strb	r3, [r4, #24]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000c9e:	6823      	ldr	r3, [r4, #0]
 8000ca0:	691a      	ldr	r2, [r3, #16]
 8000ca2:	0712      	lsls	r2, r2, #28
 8000ca4:	d515      	bpl.n	8000cd2 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000ca6:	68da      	ldr	r2, [r3, #12]
 8000ca8:	0710      	lsls	r0, r2, #28
 8000caa:	d512      	bpl.n	8000cd2 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000cac:	f06f 0208 	mvn.w	r2, #8
 8000cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8000cb2:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000cb4:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8000cb6:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000cb8:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000cba:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8000cbc:	d002      	beq.n	8000cc4 <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000cbe:	f7ff ffb5 	bl	8000c2c <HAL_TIM_IC_CaptureCallback>
 8000cc2:	e004      	b.n	8000cce <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000cc4:	f7ff ffb1 	bl	8000c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8000cc8:	4620      	mov	r0, r4
 8000cca:	f7ff ffb0 	bl	8000c2e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000cd2:	6823      	ldr	r3, [r4, #0]
 8000cd4:	691a      	ldr	r2, [r3, #16]
 8000cd6:	06d2      	lsls	r2, r2, #27
 8000cd8:	d516      	bpl.n	8000d08 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000cda:	68da      	ldr	r2, [r3, #12]
 8000cdc:	06d0      	lsls	r0, r2, #27
 8000cde:	d513      	bpl.n	8000d08 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000ce0:	f06f 0210 	mvn.w	r2, #16
 8000ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8000ce6:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000ce8:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8000cea:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000cee:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000cf0:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8000cf2:	d002      	beq.n	8000cfa <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000cf4:	f7ff ff9a 	bl	8000c2c <HAL_TIM_IC_CaptureCallback>
 8000cf8:	e004      	b.n	8000d04 <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000cfa:	f7ff ff96 	bl	8000c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000cfe:	4620      	mov	r0, r4
 8000d00:	f7ff ff95 	bl	8000c2e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d04:	2300      	movs	r3, #0
 8000d06:	7623      	strb	r3, [r4, #24]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000d08:	6823      	ldr	r3, [r4, #0]
 8000d0a:	691a      	ldr	r2, [r3, #16]
 8000d0c:	07d1      	lsls	r1, r2, #31
 8000d0e:	d508      	bpl.n	8000d22 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000d10:	68da      	ldr	r2, [r3, #12]
 8000d12:	07d2      	lsls	r2, r2, #31
 8000d14:	d505      	bpl.n	8000d22 <HAL_TIM_IRQHandler+0xf0>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000d16:	f06f 0201 	mvn.w	r2, #1
 8000d1a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000d1c:	4620      	mov	r0, r4
 8000d1e:	f000 f989 	bl	8001034 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000d22:	6823      	ldr	r3, [r4, #0]
 8000d24:	691a      	ldr	r2, [r3, #16]
 8000d26:	0610      	lsls	r0, r2, #24
 8000d28:	d508      	bpl.n	8000d3c <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	0611      	lsls	r1, r2, #24
 8000d2e:	d505      	bpl.n	8000d3c <HAL_TIM_IRQHandler+0x10a>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000d30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000d34:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000d36:	4620      	mov	r0, r4
 8000d38:	f000 f97b 	bl	8001032 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000d3c:	6823      	ldr	r3, [r4, #0]
 8000d3e:	691a      	ldr	r2, [r3, #16]
 8000d40:	0652      	lsls	r2, r2, #25
 8000d42:	d508      	bpl.n	8000d56 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000d44:	68da      	ldr	r2, [r3, #12]
 8000d46:	0650      	lsls	r0, r2, #25
 8000d48:	d505      	bpl.n	8000d56 <HAL_TIM_IRQHandler+0x124>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000d4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000d4e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000d50:	4620      	mov	r0, r4
 8000d52:	f7ff ff6d 	bl	8000c30 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000d56:	6823      	ldr	r3, [r4, #0]
 8000d58:	691a      	ldr	r2, [r3, #16]
 8000d5a:	0691      	lsls	r1, r2, #26
 8000d5c:	d50a      	bpl.n	8000d74 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000d5e:	68da      	ldr	r2, [r3, #12]
 8000d60:	0692      	lsls	r2, r2, #26
 8000d62:	d507      	bpl.n	8000d74 <HAL_TIM_IRQHandler+0x142>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000d64:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000d68:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000d6a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 8000d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 8000d70:	f000 b95e 	b.w	8001030 <HAL_TIMEx_CommutationCallback>
 8000d74:	bd10      	pop	{r4, pc}
	...

08000d78 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d78:	4a2a      	ldr	r2, [pc, #168]	; (8000e24 <TIM_Base_SetConfig+0xac>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8000d7a:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d00e      	beq.n	8000d9e <TIM_Base_SetConfig+0x26>
 8000d80:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000d84:	d00b      	beq.n	8000d9e <TIM_Base_SetConfig+0x26>
 8000d86:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000d8a:	4290      	cmp	r0, r2
 8000d8c:	d007      	beq.n	8000d9e <TIM_Base_SetConfig+0x26>
 8000d8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d92:	4290      	cmp	r0, r2
 8000d94:	d003      	beq.n	8000d9e <TIM_Base_SetConfig+0x26>
 8000d96:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	d115      	bne.n	8000dca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000d9e:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000da4:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000da6:	4a1f      	ldr	r2, [pc, #124]	; (8000e24 <TIM_Base_SetConfig+0xac>)
 8000da8:	4290      	cmp	r0, r2
 8000daa:	d019      	beq.n	8000de0 <TIM_Base_SetConfig+0x68>
 8000dac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000db0:	d016      	beq.n	8000de0 <TIM_Base_SetConfig+0x68>
 8000db2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d012      	beq.n	8000de0 <TIM_Base_SetConfig+0x68>
 8000dba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	d00e      	beq.n	8000de0 <TIM_Base_SetConfig+0x68>
 8000dc2:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d00a      	beq.n	8000de0 <TIM_Base_SetConfig+0x68>
 8000dca:	4a17      	ldr	r2, [pc, #92]	; (8000e28 <TIM_Base_SetConfig+0xb0>)
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	d007      	beq.n	8000de0 <TIM_Base_SetConfig+0x68>
 8000dd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	d003      	beq.n	8000de0 <TIM_Base_SetConfig+0x68>
 8000dd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ddc:	4290      	cmp	r0, r2
 8000dde:	d103      	bne.n	8000de8 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000de0:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000de6:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8000de8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000dea:	688b      	ldr	r3, [r1, #8]
 8000dec:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000dee:	680b      	ldr	r3, [r1, #0]
 8000df0:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <TIM_Base_SetConfig+0xac>)
 8000df4:	4298      	cmp	r0, r3
 8000df6:	d00f      	beq.n	8000e18 <TIM_Base_SetConfig+0xa0>
 8000df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	d00b      	beq.n	8000e18 <TIM_Base_SetConfig+0xa0>
 8000e00:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8000e04:	4298      	cmp	r0, r3
 8000e06:	d007      	beq.n	8000e18 <TIM_Base_SetConfig+0xa0>
 8000e08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	d003      	beq.n	8000e18 <TIM_Base_SetConfig+0xa0>
 8000e10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e14:	4298      	cmp	r0, r3
 8000e16:	d101      	bne.n	8000e1c <TIM_Base_SetConfig+0xa4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000e18:	690b      	ldr	r3, [r1, #16]
 8000e1a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	6143      	str	r3, [r0, #20]
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40012c00 	.word	0x40012c00
 8000e28:	40014000 	.word	0x40014000

08000e2c <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim: TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8000e2c:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8000e2e:	4604      	mov	r4, r0
 8000e30:	b1a0      	cbz	r0, 8000e5c <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8000e32:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000e36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e3a:	b91b      	cbnz	r3, 8000e44 <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000e3c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000e40:	f000 fa6a 	bl	8001318 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8000e44:	2302      	movs	r3, #2
 8000e46:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000e4a:	6820      	ldr	r0, [r4, #0]
 8000e4c:	1d21      	adds	r1, r4, #4
 8000e4e:	f7ff ff93 	bl	8000d78 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8000e52:	2301      	movs	r3, #1
 8000e54:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8000e58:	2000      	movs	r0, #0
 8000e5a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8000e5c:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8000e5e:	bd10      	pop	{r4, pc}

08000e60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8000e60:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8000e62:	6884      	ldr	r4, [r0, #8]
 8000e64:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8000e68:	4321      	orrs	r1, r4
 8000e6a:	430a      	orrs	r2, r1

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000e6c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000e70:	6083      	str	r3, [r0, #8]
 8000e72:	bd10      	pop	{r4, pc}

08000e74 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0;
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8000e74:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000e78:	2b01      	cmp	r3, #1
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8000e7a:	b570      	push	{r4, r5, r6, lr}
 8000e7c:	4604      	mov	r4, r0
 8000e7e:	f04f 0002 	mov.w	r0, #2
  uint32_t tmpsmcr = 0;
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8000e82:	f000 80ab 	beq.w	8000fdc <HAL_TIM_ConfigClockSource+0x168>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8000e86:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000e8a:	6820      	ldr	r0, [r4, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0;
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000e92:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000e94:	4b52      	ldr	r3, [pc, #328]	; (8000fe0 <HAL_TIM_ConfigClockSource+0x16c>)
 8000e96:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8000e98:	6083      	str	r3, [r0, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8000e9a:	680b      	ldr	r3, [r1, #0]
 8000e9c:	2b40      	cmp	r3, #64	; 0x40
 8000e9e:	d074      	beq.n	8000f8a <HAL_TIM_ConfigClockSource+0x116>
 8000ea0:	d818      	bhi.n	8000ed4 <HAL_TIM_ConfigClockSource+0x60>
 8000ea2:	2b10      	cmp	r3, #16
 8000ea4:	f000 8088 	beq.w	8000fb8 <HAL_TIM_ConfigClockSource+0x144>
 8000ea8:	d808      	bhi.n	8000ebc <HAL_TIM_ConfigClockSource+0x48>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f040 8090 	bne.w	8000fd0 <HAL_TIM_ConfigClockSource+0x15c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000eb0:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000eb6:	f043 0307 	orr.w	r3, r3, #7
 8000eba:	e088      	b.n	8000fce <HAL_TIM_ConfigClockSource+0x15a>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8000ebc:	2b20      	cmp	r3, #32
 8000ebe:	f000 8081 	beq.w	8000fc4 <HAL_TIM_ConfigClockSource+0x150>
 8000ec2:	2b30      	cmp	r3, #48	; 0x30
 8000ec4:	f040 8084 	bne.w	8000fd0 <HAL_TIM_ConfigClockSource+0x15c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000ec8:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000ece:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8000ed2:	e07c      	b.n	8000fce <HAL_TIM_ConfigClockSource+0x15a>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8000ed4:	2b70      	cmp	r3, #112	; 0x70
 8000ed6:	d032      	beq.n	8000f3e <HAL_TIM_ConfigClockSource+0xca>
 8000ed8:	d81b      	bhi.n	8000f12 <HAL_TIM_ConfigClockSource+0x9e>
 8000eda:	2b50      	cmp	r3, #80	; 0x50
 8000edc:	d03e      	beq.n	8000f5c <HAL_TIM_ConfigClockSource+0xe8>
 8000ede:	2b60      	cmp	r3, #96	; 0x60
 8000ee0:	d176      	bne.n	8000fd0 <HAL_TIM_ConfigClockSource+0x15c>
      
       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance, 
 8000ee2:	684d      	ldr	r5, [r1, #4]
 8000ee4:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000ee6:	6a01      	ldr	r1, [r0, #32]
 8000ee8:	f021 0110 	bic.w	r1, r1, #16
 8000eec:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000eee:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8000ef0:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000ef2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000ef6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 8000efa:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12);
 8000efe:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8000f02:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000f04:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000f06:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f0c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8000f10:	e05d      	b.n	8000fce <HAL_TIM_ConfigClockSource+0x15a>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8000f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f16:	d00c      	beq.n	8000f32 <HAL_TIM_ConfigClockSource+0xbe>
 8000f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f1c:	d158      	bne.n	8000fd0 <HAL_TIM_ConfigClockSource+0x15c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance, 
 8000f1e:	68cb      	ldr	r3, [r1, #12]
 8000f20:	684a      	ldr	r2, [r1, #4]
 8000f22:	6889      	ldr	r1, [r1, #8]
 8000f24:	f7ff ff9c 	bl	8000e60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000f28:	6822      	ldr	r2, [r4, #0]
 8000f2a:	6893      	ldr	r3, [r2, #8]
 8000f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f30:	e012      	b.n	8000f58 <HAL_TIM_ConfigClockSource+0xe4>
  {
  case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));      
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000f32:	6883      	ldr	r3, [r0, #8]
 8000f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f38:	f023 0307 	bic.w	r3, r3, #7
 8000f3c:	e047      	b.n	8000fce <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance, 
 8000f3e:	68cb      	ldr	r3, [r1, #12]
 8000f40:	684a      	ldr	r2, [r1, #4]
 8000f42:	6889      	ldr	r1, [r1, #8]
 8000f44:	f7ff ff8c 	bl	8000e60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity, 
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 8000f48:	6822      	ldr	r2, [r4, #0]
 8000f4a:	6893      	ldr	r3, [r2, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8000f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f50:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000f54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      TIM_ETR_SetConfig(htim->Instance, 
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000f58:	6093      	str	r3, [r2, #8]
    }
    break;
 8000f5a:	e039      	b.n	8000fd0 <HAL_TIM_ConfigClockSource+0x15c>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000f5c:	6a03      	ldr	r3, [r0, #32]
      
      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000f5e:	684d      	ldr	r5, [r1, #4]
 8000f60:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f62:	6a01      	ldr	r1, [r0, #32]
 8000f64:	f021 0101 	bic.w	r1, r1, #1
 8000f68:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000f6a:	6982      	ldr	r2, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000f6c:	f023 030a 	bic.w	r3, r3, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000f70:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8000f74:	432b      	orrs	r3, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 8000f76:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000f7a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000f7c:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000f7e:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f84:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8000f88:	e021      	b.n	8000fce <HAL_TIM_ConfigClockSource+0x15a>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000f8a:	6a03      	ldr	r3, [r0, #32]
      
      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000f8c:	684d      	ldr	r5, [r1, #4]
 8000f8e:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f90:	6a01      	ldr	r1, [r0, #32]
 8000f92:	f021 0101 	bic.w	r1, r1, #1
 8000f96:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000f98:	6982      	ldr	r2, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000f9a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000f9e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8000fa2:	432b      	orrs	r3, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 8000fa4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000fa8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000faa:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000fac:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000fb2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8000fb6:	e00a      	b.n	8000fce <HAL_TIM_ConfigClockSource+0x15a>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000fb8:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000fbe:	f043 0317 	orr.w	r3, r3, #23
 8000fc2:	e004      	b.n	8000fce <HAL_TIM_ConfigClockSource+0x15a>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000fc4:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000fca:	f043 0327 	orr.w	r3, r3, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8000fce:	6083      	str	r3, [r0, #8]
    break;
    
  default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 8000fd0:	2301      	movs	r3, #1
  
  __HAL_UNLOCK(htim);
 8000fd2:	2000      	movs	r0, #0
    break;
    
  default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 8000fd4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8000fd8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 8000fdc:	bd70      	pop	{r4, r5, r6, pc}
 8000fde:	bf00      	nop
 8000fe0:	fffe0088 	.word	0xfffe0088

08000fe4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8000fe4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000fe8:	2b01      	cmp	r3, #1
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8000fea:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8000fec:	d01c      	beq.n	8001028 <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8000fee:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8000ff0:	4c0e      	ldr	r4, [pc, #56]	; (800102c <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  
  /* Check input state */
  __HAL_LOCK(htim);

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8000ff2:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8000ff4:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8000ff6:	42a2      	cmp	r2, r4
 8000ff8:	d003      	beq.n	8001002 <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 8000ffa:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8000ffe:	42a2      	cmp	r2, r4
 8001000:	d103      	bne.n	800100a <HAL_TIMEx_MasterConfigSynchronization+0x26>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001002:	684c      	ldr	r4, [r1, #4]
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001004:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001008:	4323      	orrs	r3, r4
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800100a:	680c      	ldr	r4, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800100c:	6889      	ldr	r1, [r1, #8]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800100e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001012:	4323      	orrs	r3, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001014:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001018:	6053      	str	r3, [r2, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800101a:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 800101c:	2300      	movs	r3, #0
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800101e:	6091      	str	r1, [r2, #8]

  __HAL_UNLOCK(htim);
 8001020:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 8001024:	4618      	mov	r0, r3
 8001026:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001028:	2002      	movs	r0, #2
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 800102a:	bd30      	pop	{r4, r5, pc}
 800102c:	40012c00 	.word	0x40012c00

08001030 <HAL_TIMEx_CommutationCallback>:
 8001030:	4770      	bx	lr

08001032 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001032:	4770      	bx	lr

08001034 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END 0 */
void  HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{

	if(htim ->Instance == TIM3 && pushButtonPressed ==0)
 8001034:	6802      	ldr	r2, [r0, #0]
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001038:	429a      	cmp	r2, r3

/* USER CODE BEGIN 0 */

/* USER CODE END 0 */
void  HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800103a:	b510      	push	{r4, lr}

	if(htim ->Instance == TIM3 && pushButtonPressed ==0)
 800103c:	d113      	bne.n	8001066 <HAL_TIM_PeriodElapsedCallback+0x32>
 800103e:	4c0b      	ldr	r4, [pc, #44]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001040:	6823      	ldr	r3, [r4, #0]
 8001042:	b933      	cbnz	r3, 8001052 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_15);
 8001044:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001048:	4809      	ldr	r0, [pc, #36]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x3c>)
		{

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,RESET);
		pushButtonPressed =0;
		}
}
 800104a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void  HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{

	if(htim ->Instance == TIM3 && pushButtonPressed ==0)
	{
		HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_15);
 800104e:	f7ff ba70 	b.w	8000532 <HAL_GPIO_TogglePin>
	}
	else if(htim ->Instance == TIM3 && pushButtonPressed ==1)
 8001052:	2b01      	cmp	r3, #1
 8001054:	d107      	bne.n	8001066 <HAL_TIM_PeriodElapsedCallback+0x32>
		{

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800105c:	4804      	ldr	r0, [pc, #16]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800105e:	f7ff fa63 	bl	8000528 <HAL_GPIO_WritePin>
		pushButtonPressed =0;
 8001062:	2300      	movs	r3, #0
 8001064:	6023      	str	r3, [r4, #0]
 8001066:	bd10      	pop	{r4, pc}
 8001068:	40000400 	.word	0x40000400
 800106c:	20000020 	.word	0x20000020
 8001070:	48001000 	.word	0x48001000

08001074 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001074:	b530      	push	{r4, r5, lr}
 8001076:	b091      	sub	sp, #68	; 0x44

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001078:	2310      	movs	r3, #16
 800107a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800107c:	2300      	movs	r3, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800107e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001080:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001082:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001084:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001086:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800108a:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800108c:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800108e:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001090:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001092:	f7ff fa6f 	bl	8000574 <HAL_RCC_OscConfig>
 8001096:	b100      	cbz	r0, 800109a <SystemClock_Config+0x26>
 8001098:	e7fe      	b.n	8001098 <SystemClock_Config+0x24>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109a:	230f      	movs	r3, #15
 800109c:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a4:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010a6:	4629      	mov	r1, r5
 80010a8:	a801      	add	r0, sp, #4

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010aa:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ac:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010ae:	f7ff fcf9 	bl	8000aa4 <HAL_RCC_ClockConfig>
 80010b2:	4604      	mov	r4, r0
 80010b4:	b100      	cbz	r0, 80010b8 <SystemClock_Config+0x44>
 80010b6:	e7fe      	b.n	80010b6 <SystemClock_Config+0x42>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80010b8:	f7ff fda6 	bl	8000c08 <HAL_RCC_GetHCLKFreq>
 80010bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80010c4:	f7ff f93e 	bl	8000344 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80010c8:	2004      	movs	r0, #4
 80010ca:	f7ff f951 	bl	8000370 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80010ce:	4622      	mov	r2, r4
 80010d0:	4621      	mov	r1, r4
 80010d2:	f04f 30ff 	mov.w	r0, #4294967295
 80010d6:	f7ff f8f5 	bl	80002c4 <HAL_NVIC_SetPriority>
}
 80010da:	b011      	add	sp, #68	; 0x44
 80010dc:	bd30      	pop	{r4, r5, pc}
	...

080010e0 <main>:
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,RESET);
		pushButtonPressed =0;
		}
}
int main(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08e      	sub	sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e4:	f7ff f8ae 	bl	8000244 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80010e8:	f7ff ffc4 	bl	8001074 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ec:	4b60      	ldr	r3, [pc, #384]	; (8001270 <main+0x190>)

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ee:	4861      	ldr	r0, [pc, #388]	; (8001274 <main+0x194>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010f0:	695a      	ldr	r2, [r3, #20]
 80010f2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80010f6:	615a      	str	r2, [r3, #20]
 80010f8:	695a      	ldr	r2, [r3, #20]
 80010fa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80010fe:	9201      	str	r2, [sp, #4]
 8001100:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001102:	695a      	ldr	r2, [r3, #20]
 8001104:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001108:	615a      	str	r2, [r3, #20]
 800110a:	695a      	ldr	r2, [r3, #20]
 800110c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001110:	9202      	str	r2, [sp, #8]
 8001112:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001114:	695a      	ldr	r2, [r3, #20]
 8001116:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800111a:	615a      	str	r2, [r3, #20]
 800111c:	695a      	ldr	r2, [r3, #20]
 800111e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001122:	9203      	str	r2, [sp, #12]
 8001124:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	695a      	ldr	r2, [r3, #20]
 8001128:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800112c:	615a      	str	r2, [r3, #20]
 800112e:	695a      	ldr	r2, [r3, #20]
 8001130:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001134:	9204      	str	r2, [sp, #16]
 8001136:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001138:	695a      	ldr	r2, [r3, #20]
 800113a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800113e:	615a      	str	r2, [r3, #20]
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001146:	9305      	str	r3, [sp, #20]
 8001148:	9b05      	ldr	r3, [sp, #20]

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT2_Pin;
 800114a:	2336      	movs	r3, #54	; 0x36
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT2_Pin;
 800114e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001150:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001152:	4b49      	ldr	r3, [pc, #292]	; (8001278 <main+0x198>)
 8001154:	930a      	str	r3, [sp, #40]	; 0x28
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin 
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001156:	2501      	movs	r5, #1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin 
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin 
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 8001158:	f64f 7708 	movw	r7, #65288	; 0xff08
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800115e:	f7ff f919 	bl	8000394 <HAL_GPIO_Init>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001162:	a909      	add	r1, sp, #36	; 0x24
 8001164:	4843      	ldr	r0, [pc, #268]	; (8001274 <main+0x194>)
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin 
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001166:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001168:	2602      	movs	r6, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin 
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin 
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 800116a:	9709      	str	r7, [sp, #36]	; 0x24
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001170:	f7ff f910 	bl	8000394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001174:	4b41      	ldr	r3, [pc, #260]	; (800127c <main+0x19c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001176:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	a909      	add	r1, sp, #36	; 0x24
 800117a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800117e:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001180:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f7ff f907 	bl	8000394 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001186:	23e0      	movs	r3, #224	; 0xe0
 8001188:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	a909      	add	r1, sp, #36	; 0x24
  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800118c:	2305      	movs	r3, #5
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001192:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119a:	f7ff f8fb 	bl	8000394 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800119e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011a2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	a909      	add	r1, sp, #36	; 0x24
  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80011aa:	230e      	movs	r3, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80011b0:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f7ff f8ed 	bl	8000394 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80011ba:	23c0      	movs	r3, #192	; 0xc0
 80011bc:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011be:	2312      	movs	r3, #18
 80011c0:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c2:	a909      	add	r1, sp, #36	; 0x24
  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011c4:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c6:	482e      	ldr	r0, [pc, #184]	; (8001280 <main+0x1a0>)
  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011c8:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ca:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ce:	f7ff f8e1 	bl	8000394 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 80011d2:	4622      	mov	r2, r4
 80011d4:	4827      	ldr	r0, [pc, #156]	; (8001274 <main+0x194>)
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 80011d6:	4d2b      	ldr	r5, [pc, #172]	; (8001284 <main+0x1a4>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 80011d8:	4639      	mov	r1, r7
 80011da:	f7ff f9a5 	bl	8000528 <HAL_GPIO_WritePin>

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 48000;
 80011de:	4a2a      	ldr	r2, [pc, #168]	; (8001288 <main+0x1a8>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e0:	60ac      	str	r4, [r5, #8]

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 48000;
 80011e2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80011e6:	e885 000c 	stmia.w	r5, {r2, r3}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 499;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011ea:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 48000;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 499;
 80011ec:	f240 13f3 	movw	r3, #499	; 0x1f3
 80011f0:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f2:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011f4:	f7ff fe1a 	bl	8000e2c <HAL_TIM_Base_Init>
 80011f8:	b100      	cbz	r0, 80011fc <main+0x11c>
 80011fa:	e7fe      	b.n	80011fa <main+0x11a>
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001200:	a909      	add	r1, sp, #36	; 0x24
 8001202:	4628      	mov	r0, r5
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001204:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001206:	f7ff fe35 	bl	8000e74 <HAL_TIM_ConfigClockSource>
 800120a:	b100      	cbz	r0, 800120e <main+0x12e>
 800120c:	e7fe      	b.n	800120c <main+0x12c>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120e:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001210:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001212:	a906      	add	r1, sp, #24
 8001214:	4628      	mov	r0, r5
 8001216:	f7ff fee5 	bl	8000fe4 <HAL_TIMEx_MasterConfigSynchronization>
 800121a:	4604      	mov	r4, r0
 800121c:	b100      	cbz	r0, 8001220 <main+0x140>
 800121e:	e7fe      	b.n	800121e <main+0x13e>
/** NVIC Configuration
*/
static void MX_NVIC_Init(void)
{
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001220:	4602      	mov	r2, r0
 8001222:	4601      	mov	r1, r0
 8001224:	2006      	movs	r0, #6
 8001226:	f7ff f84d 	bl	80002c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800122a:	2006      	movs	r0, #6
 800122c:	f7ff f87e 	bl	800032c <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001230:	4622      	mov	r2, r4
 8001232:	4621      	mov	r1, r4
 8001234:	201d      	movs	r0, #29
 8001236:	f7ff f845 	bl	80002c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800123a:	201d      	movs	r0, #29
 800123c:	f7ff f876 	bl	800032c <HAL_NVIC_EnableIRQ>

  /* Initialize interrupts */
  MX_NVIC_Init();
  void initEport(  );
  void initAport(  );
  HAL_TIM_Base_Start_IT(&htim3);
 8001240:	4628      	mov	r0, r5
 8001242:	f7ff fce7 	bl	8000c14 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,1);
 8001246:	2201      	movs	r2, #1
 8001248:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800124c:	4809      	ldr	r0, [pc, #36]	; (8001274 <main+0x194>)
 800124e:	f7ff f96b 	bl	8000528 <HAL_GPIO_WritePin>
	  HAL_Delay(5000);
 8001252:	f241 3088 	movw	r0, #5000	; 0x1388
 8001256:	f7ff f815 	bl	8000284 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,0);
 800125a:	2200      	movs	r2, #0
 800125c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <main+0x194>)
 8001262:	f7ff f961 	bl	8000528 <HAL_GPIO_WritePin>
	  HAL_Delay(5000);
 8001266:	f241 3088 	movw	r0, #5000	; 0x1388
 800126a:	f7ff f80b 	bl	8000284 <HAL_Delay>
 800126e:	e7ea      	b.n	8001246 <main+0x166>
 8001270:	40021000 	.word	0x40021000
 8001274:	48001000 	.word	0x48001000
 8001278:	10120000 	.word	0x10120000
 800127c:	10310000 	.word	0x10310000
 8001280:	48000400 	.word	0x48000400
 8001284:	20000028 	.word	0x20000028
 8001288:	40000400 	.word	0x40000400

0800128c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128c:	4b21      	ldr	r3, [pc, #132]	; (8001314 <HAL_MspInit+0x88>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800128e:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001290:	699a      	ldr	r2, [r3, #24]
 8001292:	f042 0201 	orr.w	r2, r2, #1
 8001296:	619a      	str	r2, [r3, #24]
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012a0:	2007      	movs	r0, #7
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012a4:	f7fe fffc 	bl	80002a0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80012a8:	2200      	movs	r2, #0
 80012aa:	4611      	mov	r1, r2
 80012ac:	f06f 000b 	mvn.w	r0, #11
 80012b0:	f7ff f808 	bl	80002c4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80012b4:	2200      	movs	r2, #0
 80012b6:	4611      	mov	r1, r2
 80012b8:	f06f 000a 	mvn.w	r0, #10
 80012bc:	f7ff f802 	bl	80002c4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	4611      	mov	r1, r2
 80012c4:	f06f 0009 	mvn.w	r0, #9
 80012c8:	f7fe fffc 	bl	80002c4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80012cc:	2200      	movs	r2, #0
 80012ce:	4611      	mov	r1, r2
 80012d0:	f06f 0004 	mvn.w	r0, #4
 80012d4:	f7fe fff6 	bl	80002c4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80012d8:	2200      	movs	r2, #0
 80012da:	4611      	mov	r1, r2
 80012dc:	f06f 0003 	mvn.w	r0, #3
 80012e0:	f7fe fff0 	bl	80002c4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	4611      	mov	r1, r2
 80012e8:	f06f 0001 	mvn.w	r0, #1
 80012ec:	f7fe ffea 	bl	80002c4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	4611      	mov	r1, r2
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295
 80012f8:	f7fe ffe4 	bl	80002c4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init*/
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80012fc:	2200      	movs	r2, #0
 80012fe:	4611      	mov	r1, r2
 8001300:	2001      	movs	r0, #1
 8001302:	f7fe ffdf 	bl	80002c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001306:	2001      	movs	r0, #1
 8001308:	f7ff f810 	bl	800032c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130c:	b003      	add	sp, #12
 800130e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000

08001318 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM3)
 8001318:	6802      	ldr	r2, [r0, #0]
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <HAL_TIM_Base_MspInit+0x24>)
 800131c:	429a      	cmp	r2, r3

  /* USER CODE END MspInit 1 */
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800131e:	b082      	sub	sp, #8

  if(htim_base->Instance==TIM3)
 8001320:	d10a      	bne.n	8001338 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001322:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001326:	69da      	ldr	r2, [r3, #28]
 8001328:	f042 0202 	orr.w	r2, r2, #2
 800132c:	61da      	str	r2, [r3, #28]
 800132e:	69db      	ldr	r3, [r3, #28]
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001338:	b002      	add	sp, #8
 800133a:	4770      	bx	lr
 800133c:	40000400 	.word	0x40000400

08001340 <SVC_Handler>:
 8001340:	4770      	bx	lr

08001342 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001342:	4770      	bx	lr

08001344 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001344:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001346:	f7fe ff8f 	bl	8000268 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 800134e:	f7ff b81c 	b.w	800038a <HAL_SYSTICK_IRQHandler>

08001352 <PVD_IRQHandler>:
void PVD_IRQHandler(void)
{
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001352:	f7ff b901 	b.w	8000558 <HAL_PWR_PVD_IRQHandler>
	...

08001358 <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 8001358:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,SET);
 800135a:	4806      	ldr	r0, [pc, #24]	; (8001374 <EXTI0_IRQHandler+0x1c>)
 800135c:	2201      	movs	r2, #1
 800135e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001362:	f7ff f8e1 	bl	8000528 <HAL_GPIO_WritePin>
	pushButtonPressed = 1;
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <EXTI0_IRQHandler+0x20>)
 8001368:	2001      	movs	r0, #1
 800136a:	6018      	str	r0, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800136c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,SET);
	pushButtonPressed = 1;
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001370:	f7ff b8e4 	b.w	800053c <HAL_GPIO_EXTI_IRQHandler>
 8001374:	48001000 	.word	0x48001000
 8001378:	20000020 	.word	0x20000020

0800137c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800137c:	4801      	ldr	r0, [pc, #4]	; (8001384 <TIM3_IRQHandler+0x8>)
 800137e:	f7ff bc58 	b.w	8000c32 <HAL_TIM_IRQHandler>
 8001382:	bf00      	nop
 8001384:	20000028 	.word	0x20000028

08001388 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001388:	4915      	ldr	r1, [pc, #84]	; (80013e0 <SystemInit+0x58>)
 800138a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800138e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <SystemInit+0x5c>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	f042 0201 	orr.w	r2, r2, #1
 800139e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80013a0:	6858      	ldr	r0, [r3, #4]
 80013a2:	4a11      	ldr	r2, [pc, #68]	; (80013e8 <SystemInit+0x60>)
 80013a4:	4002      	ands	r2, r0
 80013a6:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80013ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013b2:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013ba:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80013c2:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80013c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013c6:	f022 020f 	bic.w	r2, r2, #15
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80013cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80013ce:	4a07      	ldr	r2, [pc, #28]	; (80013ec <SystemInit+0x64>)
 80013d0:	4002      	ands	r2, r0
 80013d2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80013dc:	608b      	str	r3, [r1, #8]
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00
 80013e4:	40021000 	.word	0x40021000
 80013e8:	f87fc00c 	.word	0xf87fc00c
 80013ec:	ff00fccc 	.word	0xff00fccc

080013f0 <__libc_init_array>:
 80013f0:	b570      	push	{r4, r5, r6, lr}
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <__libc_init_array+0x3c>)
 80013f4:	4c0e      	ldr	r4, [pc, #56]	; (8001430 <__libc_init_array+0x40>)
 80013f6:	1ae4      	subs	r4, r4, r3
 80013f8:	10a4      	asrs	r4, r4, #2
 80013fa:	2500      	movs	r5, #0
 80013fc:	461e      	mov	r6, r3
 80013fe:	42a5      	cmp	r5, r4
 8001400:	d004      	beq.n	800140c <__libc_init_array+0x1c>
 8001402:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001406:	4798      	blx	r3
 8001408:	3501      	adds	r5, #1
 800140a:	e7f8      	b.n	80013fe <__libc_init_array+0xe>
 800140c:	f000 f816 	bl	800143c <_init>
 8001410:	4c08      	ldr	r4, [pc, #32]	; (8001434 <__libc_init_array+0x44>)
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <__libc_init_array+0x48>)
 8001414:	1ae4      	subs	r4, r4, r3
 8001416:	10a4      	asrs	r4, r4, #2
 8001418:	2500      	movs	r5, #0
 800141a:	461e      	mov	r6, r3
 800141c:	42a5      	cmp	r5, r4
 800141e:	d004      	beq.n	800142a <__libc_init_array+0x3a>
 8001420:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001424:	4798      	blx	r3
 8001426:	3501      	adds	r5, #1
 8001428:	e7f8      	b.n	800141c <__libc_init_array+0x2c>
 800142a:	bd70      	pop	{r4, r5, r6, pc}
 800142c:	08001484 	.word	0x08001484
 8001430:	08001484 	.word	0x08001484
 8001434:	08001488 	.word	0x08001488
 8001438:	08001484 	.word	0x08001484

0800143c <_init>:
 800143c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800143e:	bf00      	nop
 8001440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001442:	bc08      	pop	{r3}
 8001444:	469e      	mov	lr, r3
 8001446:	4770      	bx	lr

08001448 <_fini>:
 8001448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800144a:	bf00      	nop
 800144c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800144e:	bc08      	pop	{r3}
 8001450:	469e      	mov	lr, r3
 8001452:	4770      	bx	lr
