
gpio_set_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d3c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000ec4  08000ec4  00010ec4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000ef4  08000ef4  00010ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000ef8  08000ef8  00010ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000024  20000024  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_line   00001ddf  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000045ec  00000000  00000000  00021e13  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00000fff  00000000  00000000  000263ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000338  00000000  00000000  00027400  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000004f8  00000000  00000000  00027738  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000109a  00000000  00000000  00027c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000013ab  00000000  00000000  00028cca  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  0002a075  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000664  00000000  00000000  0002a0f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000eac 	.word	0x08000eac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000eac 	.word	0x08000eac

080001c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80001c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000200 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80001cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80001ce:	e003      	b.n	80001d8 <LoopCopyDataInit>

080001d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80001d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80001d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80001d6:	3104      	adds	r1, #4

080001d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <LoopForever+0xa>)
	ldr	r3, =_edata
 80001da:	4b0c      	ldr	r3, [pc, #48]	; (800020c <LoopForever+0xe>)
	adds	r2, r0, r1
 80001dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80001de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80001e0:	d3f6      	bcc.n	80001d0 <CopyDataInit>
	ldr	r2, =_sbss
 80001e2:	4a0b      	ldr	r2, [pc, #44]	; (8000210 <LoopForever+0x12>)
	b	LoopFillZerobss
 80001e4:	e002      	b.n	80001ec <LoopFillZerobss>

080001e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80001e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80001e8:	f842 3b04 	str.w	r3, [r2], #4

080001ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <LoopForever+0x16>)
	cmp	r2, r3
 80001ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80001f0:	d3f9      	bcc.n	80001e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80001f2:	f000 fe01 	bl	8000df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001f6:	f000 fe33 	bl	8000e60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80001fa:	f000 fd3d 	bl	8000c78 <main>

080001fe <LoopForever>:

LoopForever:
    b LoopForever
 80001fe:	e7fe      	b.n	80001fe <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000200:	2000a000 	.word	0x2000a000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000204:	08000efc 	.word	0x08000efc
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000208:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800020c:	20000004 	.word	0x20000004
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000210:	20000004 	.word	0x20000004
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000214:	20000024 	.word	0x20000024

08000218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000218:	e7fe      	b.n	8000218 <ADC1_2_IRQHandler>
	...

0800021c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800021c:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 800021e:	4b08      	ldr	r3, [pc, #32]	; (8000240 <HAL_InitTick+0x24>)
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000220:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 8000222:	6818      	ldr	r0, [r3, #0]
 8000224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000228:	fbb0 f0f3 	udiv	r0, r0, r3
 800022c:	f000 f88a 	bl	8000344 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000230:	2200      	movs	r2, #0
 8000232:	4621      	mov	r1, r4
 8000234:	f04f 30ff 	mov.w	r0, #4294967295
 8000238:	f000 f844 	bl	80002c4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800023c:	2000      	movs	r0, #0
 800023e:	bd10      	pop	{r4, pc}
 8000240:	20000000 	.word	0x20000000

08000244 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000244:	4a07      	ldr	r2, [pc, #28]	; (8000264 <HAL_Init+0x20>)
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000246:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000248:	6813      	ldr	r3, [r2, #0]
 800024a:	f043 0310 	orr.w	r3, r3, #16
 800024e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000250:	2003      	movs	r0, #3
 8000252:	f000 f825 	bl	80002a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000256:	2000      	movs	r0, #0
 8000258:	f7ff ffe0 	bl	800021c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800025c:	f000 fd64 	bl	8000d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000260:	2000      	movs	r0, #0
 8000262:	bd08      	pop	{r3, pc}
 8000264:	40022000 	.word	0x40022000

08000268 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000268:	4a02      	ldr	r2, [pc, #8]	; (8000274 <HAL_IncTick+0xc>)
 800026a:	6813      	ldr	r3, [r2, #0]
 800026c:	3301      	adds	r3, #1
 800026e:	6013      	str	r3, [r2, #0]
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000020 	.word	0x20000020

08000278 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000278:	4b01      	ldr	r3, [pc, #4]	; (8000280 <HAL_GetTick+0x8>)
 800027a:	6818      	ldr	r0, [r3, #0]
}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	20000020 	.word	0x20000020

08000284 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000284:	b513      	push	{r0, r1, r4, lr}
 8000286:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000288:	f7ff fff6 	bl	8000278 <HAL_GetTick>
 800028c:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800028e:	f7ff fff3 	bl	8000278 <HAL_GetTick>
 8000292:	9b01      	ldr	r3, [sp, #4]
 8000294:	1b00      	subs	r0, r0, r4
 8000296:	4298      	cmp	r0, r3
 8000298:	d3f9      	bcc.n	800028e <HAL_Delay+0xa>
  {
  }
}
 800029a:	b002      	add	sp, #8
 800029c:	bd10      	pop	{r4, pc}
	...

080002a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002a0:	4a07      	ldr	r2, [pc, #28]	; (80002c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80002a2:	68d3      	ldr	r3, [r2, #12]
 80002a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80002a8:	041b      	lsls	r3, r3, #16
 80002aa:	0c1b      	lsrs	r3, r3, #16
 80002ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80002b0:	0200      	lsls	r0, r0, #8
 80002b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80002ba:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80002bc:	60d3      	str	r3, [r2, #12]
 80002be:	4770      	bx	lr
 80002c0:	e000ed00 	.word	0xe000ed00

080002c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002c4:	4b17      	ldr	r3, [pc, #92]	; (8000324 <HAL_NVIC_SetPriority+0x60>)
 80002c6:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002c8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002cc:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002ce:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002d2:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002d4:	2c04      	cmp	r4, #4
 80002d6:	bf28      	it	cs
 80002d8:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002da:	2d06      	cmp	r5, #6

  return (
 80002dc:	f04f 0501 	mov.w	r5, #1
 80002e0:	fa05 f404 	lsl.w	r4, r5, r4
 80002e4:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002e8:	bf8c      	ite	hi
 80002ea:	3b03      	subhi	r3, #3
 80002ec:	2300      	movls	r3, #0

  return (
 80002ee:	400c      	ands	r4, r1
 80002f0:	409c      	lsls	r4, r3
 80002f2:	fa05 f303 	lsl.w	r3, r5, r3
 80002f6:	3b01      	subs	r3, #1
 80002f8:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002fa:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80002fc:	ea42 0204 	orr.w	r2, r2, r4
 8000300:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000304:	bfaf      	iteee	ge
 8000306:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030a:	f000 000f 	andlt.w	r0, r0, #15
 800030e:	4b06      	ldrlt	r3, [pc, #24]	; (8000328 <HAL_NVIC_SetPriority+0x64>)
 8000310:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000312:	bfa5      	ittet	ge
 8000314:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000318:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	bf00      	nop
 8000324:	e000ed00 	.word	0xe000ed00
 8000328:	e000ed14 	.word	0xe000ed14

0800032c <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800032c:	0942      	lsrs	r2, r0, #5
 800032e:	2301      	movs	r3, #1
 8000330:	f000 001f 	and.w	r0, r0, #31
 8000334:	fa03 f000 	lsl.w	r0, r3, r0
 8000338:	4b01      	ldr	r3, [pc, #4]	; (8000340 <HAL_NVIC_EnableIRQ+0x14>)
 800033a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800033e:	4770      	bx	lr
 8000340:	e000e100 	.word	0xe000e100

08000344 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000344:	3801      	subs	r0, #1
 8000346:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800034a:	d20a      	bcs.n	8000362 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800034e:	4a07      	ldr	r2, [pc, #28]	; (800036c <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000350:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000352:	21f0      	movs	r1, #240	; 0xf0
 8000354:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000358:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800035a:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800035c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000362:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	e000e010 	.word	0xe000e010
 800036c:	e000ed00 	.word	0xe000ed00

08000370 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000370:	4b04      	ldr	r3, [pc, #16]	; (8000384 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000372:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000374:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000376:	bf0c      	ite	eq
 8000378:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800037c:	f022 0204 	bicne.w	r2, r2, #4
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	4770      	bx	lr
 8000384:	e000e010 	.word	0xe000e010

08000388 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000388:	4770      	bx	lr

0800038a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800038a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800038c:	f7ff fffc 	bl	8000388 <HAL_SYSTICK_Callback>
 8000390:	bd08      	pop	{r3, pc}
	...

08000394 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000398:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8000520 <HAL_GPIO_Init+0x18c>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800039c:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800039e:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8000524 <HAL_GPIO_Init+0x190>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003a2:	b085      	sub	sp, #20
 80003a4:	464c      	mov	r4, r9
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80003a6:	9301      	str	r3, [sp, #4]
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00;
 80003a8:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80003aa:	9a01      	ldr	r2, [sp, #4]
 80003ac:	40da      	lsrs	r2, r3
 80003ae:	f000 80b1 	beq.w	8000514 <HAL_GPIO_Init+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80003b2:	2201      	movs	r2, #1
 80003b4:	fa02 fa03 	lsl.w	sl, r2, r3

    if(iocurrent)
 80003b8:	9a01      	ldr	r2, [sp, #4]
 80003ba:	ea12 060a 	ands.w	r6, r2, sl
 80003be:	f000 80a7 	beq.w	8000510 <HAL_GPIO_Init+0x17c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80003c2:	684a      	ldr	r2, [r1, #4]
 80003c4:	f022 0e10 	bic.w	lr, r2, #16
 80003c8:	f1be 0f02 	cmp.w	lr, #2
 80003cc:	d114      	bne.n	80003f8 <HAL_GPIO_Init+0x64>
 80003ce:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80003d2:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80003d6:	f003 0b07 	and.w	fp, r3, #7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80003da:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80003de:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80003e2:	250f      	movs	r5, #15
 80003e4:	fa05 f50b 	lsl.w	r5, r5, fp
 80003e8:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80003ec:	690f      	ldr	r7, [r1, #16]
 80003ee:	fa07 f70b 	lsl.w	r7, r7, fp
 80003f2:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3] = temp;
 80003f4:	f8cc 7020 	str.w	r7, [ip, #32]
 80003f8:	ea4f 0b43 	mov.w	fp, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80003fc:	2703      	movs	r7, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80003fe:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000400:	fa07 fc0b 	lsl.w	ip, r7, fp
 8000404:	ea6f 0c0c 	mvn.w	ip, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000408:	4017      	ands	r7, r2
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800040a:	ea05 050c 	and.w	r5, r5, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800040e:	fa07 f70b 	lsl.w	r7, r7, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000412:	f10e 3eff 	add.w	lr, lr, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000416:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000418:	f1be 0f01 	cmp.w	lr, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 800041c:	6005      	str	r5, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800041e:	d810      	bhi.n	8000442 <HAL_GPIO_Init+0xae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000420:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
 8000422:	68cf      	ldr	r7, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000424:	ea0c 0505 	and.w	r5, ip, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000428:	fa07 f70b 	lsl.w	r7, r7, fp
 800042c:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 800042e:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000430:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000432:	ea25 0a0a 	bic.w	sl, r5, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000436:	f3c2 1500 	ubfx	r5, r2, #4, #1
 800043a:	409d      	lsls	r5, r3
 800043c:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->OTYPER = temp;
 8000440:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000442:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000444:	ea0c 0c05 	and.w	ip, ip, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000448:	688d      	ldr	r5, [r1, #8]
 800044a:	fa05 f50b 	lsl.w	r5, r5, fp
 800044e:	ea45 050c 	orr.w	r5, r5, ip
      GPIOx->PUPDR = temp;
 8000452:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000454:	00d5      	lsls	r5, r2, #3
 8000456:	d55b      	bpl.n	8000510 <HAL_GPIO_Init+0x17c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000458:	f8d8 5018 	ldr.w	r5, [r8, #24]
 800045c:	f045 0501 	orr.w	r5, r5, #1
 8000460:	f8c8 5018 	str.w	r5, [r8, #24]
 8000464:	f8d8 5018 	ldr.w	r5, [r8, #24]
 8000468:	f023 0e03 	bic.w	lr, r3, #3
 800046c:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8000470:	f005 0501 	and.w	r5, r5, #1
 8000474:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8000478:	9503      	str	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800047a:	f003 0c03 	and.w	ip, r3, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047e:	9d03      	ldr	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000480:	f8de 5008 	ldr.w	r5, [lr, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000484:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000488:	270f      	movs	r7, #15
 800048a:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800048e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000492:	ea25 0507 	bic.w	r5, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000496:	d011      	beq.n	80004bc <HAL_GPIO_Init+0x128>
 8000498:	4f20      	ldr	r7, [pc, #128]	; (800051c <HAL_GPIO_Init+0x188>)
 800049a:	42b8      	cmp	r0, r7
 800049c:	d010      	beq.n	80004c0 <HAL_GPIO_Init+0x12c>
 800049e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80004a2:	42b8      	cmp	r0, r7
 80004a4:	d00e      	beq.n	80004c4 <HAL_GPIO_Init+0x130>
 80004a6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80004aa:	42b8      	cmp	r0, r7
 80004ac:	d00c      	beq.n	80004c8 <HAL_GPIO_Init+0x134>
 80004ae:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80004b2:	42b8      	cmp	r0, r7
 80004b4:	bf14      	ite	ne
 80004b6:	2705      	movne	r7, #5
 80004b8:	2704      	moveq	r7, #4
 80004ba:	e006      	b.n	80004ca <HAL_GPIO_Init+0x136>
 80004bc:	2700      	movs	r7, #0
 80004be:	e004      	b.n	80004ca <HAL_GPIO_Init+0x136>
 80004c0:	2701      	movs	r7, #1
 80004c2:	e002      	b.n	80004ca <HAL_GPIO_Init+0x136>
 80004c4:	2702      	movs	r7, #2
 80004c6:	e000      	b.n	80004ca <HAL_GPIO_Init+0x136>
 80004c8:	2703      	movs	r7, #3
 80004ca:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ce:	ea4c 0505 	orr.w	r5, ip, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 80004d2:	f8ce 5008 	str.w	r5, [lr, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80004d6:	f8d9 5000 	ldr.w	r5, [r9]
        temp &= ~((uint32_t)iocurrent);
 80004da:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004dc:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 80004e0:	bf0c      	ite	eq
 80004e2:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 80004e4:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80004e6:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 80004e8:	6865      	ldr	r5, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004ea:	f412 3f00 	tst.w	r2, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 80004ee:	bf0c      	ite	eq
 80004f0:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 80004f2:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80004f4:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80004f6:	68a5      	ldr	r5, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004f8:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 80004fc:	bf0c      	ite	eq
 80004fe:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8000500:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000502:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000504:	68e5      	ldr	r5, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000506:	0292      	lsls	r2, r2, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8000508:	bf54      	ite	pl
 800050a:	403d      	andpl	r5, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 800050c:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800050e:	60e5      	str	r5, [r4, #12]
      }
    }
    
    position++;
 8000510:	3301      	adds	r3, #1
 8000512:	e74a      	b.n	80003aa <HAL_GPIO_Init+0x16>
  }
}
 8000514:	b005      	add	sp, #20
 8000516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800051a:	bf00      	nop
 800051c:	48000400 	.word	0x48000400
 8000520:	40010400 	.word	0x40010400
 8000524:	40021000 	.word	0x40021000

08000528 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000528:	b10a      	cbz	r2, 800052e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800052a:	6181      	str	r1, [r0, #24]
 800052c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800052e:	6281      	str	r1, [r0, #40]	; 0x28
 8000530:	4770      	bx	lr

08000532 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000532:	4770      	bx	lr

08000534 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000534:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000536:	4b04      	ldr	r3, [pc, #16]	; (8000548 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000538:	6959      	ldr	r1, [r3, #20]
 800053a:	4201      	tst	r1, r0
 800053c:	d002      	beq.n	8000544 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800053e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000540:	f7ff fff7 	bl	8000532 <HAL_GPIO_EXTI_Callback>
 8000544:	bd08      	pop	{r3, pc}
 8000546:	bf00      	nop
 8000548:	40010400 	.word	0x40010400

0800054c <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800054c:	4770      	bx	lr
	...

08000550 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8000550:	b510      	push	{r4, lr}
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8000552:	4c05      	ldr	r4, [pc, #20]	; (8000568 <HAL_PWR_PVD_IRQHandler+0x18>)
 8000554:	6963      	ldr	r3, [r4, #20]
 8000556:	03db      	lsls	r3, r3, #15
 8000558:	d504      	bpl.n	8000564 <HAL_PWR_PVD_IRQHandler+0x14>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800055a:	f7ff fff7 	bl	800054c <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800055e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000562:	6163      	str	r3, [r4, #20]
 8000564:	bd10      	pop	{r4, pc}
 8000566:	bf00      	nop
 8000568:	40010400 	.word	0x40010400

0800056c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800056c:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800056e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000572:	07de      	lsls	r6, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000574:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000576:	d403      	bmi.n	8000580 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000578:	682b      	ldr	r3, [r5, #0]
 800057a:	079c      	lsls	r4, r3, #30
 800057c:	d471      	bmi.n	8000662 <HAL_RCC_OscConfig+0xf6>
 800057e:	e0f0      	b.n	8000762 <HAL_RCC_OscConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000580:	4cb3      	ldr	r4, [pc, #716]	; (8000850 <HAL_RCC_OscConfig+0x2e4>)
 8000582:	6863      	ldr	r3, [r4, #4]
 8000584:	f003 030c 	and.w	r3, r3, #12
 8000588:	2b04      	cmp	r3, #4
 800058a:	d007      	beq.n	800059c <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800058c:	6863      	ldr	r3, [r4, #4]
 800058e:	f003 030c 	and.w	r3, r3, #12
 8000592:	2b08      	cmp	r3, #8
 8000594:	d116      	bne.n	80005c4 <HAL_RCC_OscConfig+0x58>
 8000596:	6863      	ldr	r3, [r4, #4]
 8000598:	03d8      	lsls	r0, r3, #15
 800059a:	d513      	bpl.n	80005c4 <HAL_RCC_OscConfig+0x58>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800059c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005a0:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005a4:	6822      	ldr	r2, [r4, #0]
 80005a6:	fa93 f3a3 	rbit	r3, r3
 80005aa:	fab3 f383 	clz	r3, r3
 80005ae:	f003 031f 	and.w	r3, r3, #31
 80005b2:	fa22 f303 	lsr.w	r3, r2, r3
 80005b6:	07d9      	lsls	r1, r3, #31
 80005b8:	d5de      	bpl.n	8000578 <HAL_RCC_OscConfig+0xc>
 80005ba:	686b      	ldr	r3, [r5, #4]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d1db      	bne.n	8000578 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 80005c0:	2001      	movs	r0, #1
 80005c2:	e233      	b.n	8000a2c <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005c4:	686b      	ldr	r3, [r5, #4]
 80005c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005ca:	d007      	beq.n	80005dc <HAL_RCC_OscConfig+0x70>
 80005cc:	6822      	ldr	r2, [r4, #0]
 80005ce:	b14b      	cbz	r3, 80005e4 <HAL_RCC_OscConfig+0x78>
 80005d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80005d4:	d106      	bne.n	80005e4 <HAL_RCC_OscConfig+0x78>
 80005d6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80005da:	6022      	str	r2, [r4, #0]
 80005dc:	6822      	ldr	r2, [r4, #0]
 80005de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80005e2:	e005      	b.n	80005f0 <HAL_RCC_OscConfig+0x84>
 80005e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005e8:	6022      	str	r2, [r4, #0]
 80005ea:	6822      	ldr	r2, [r4, #0]
 80005ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005f0:	6022      	str	r2, [r4, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80005f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80005f4:	f022 010f 	bic.w	r1, r2, #15
 80005f8:	68aa      	ldr	r2, [r5, #8]
 80005fa:	430a      	orrs	r2, r1
 80005fc:	62e2      	str	r2, [r4, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80005fe:	b1c3      	cbz	r3, 8000632 <HAL_RCC_OscConfig+0xc6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000600:	f7ff fe3a 	bl	8000278 <HAL_GetTick>
 8000604:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000608:	4607      	mov	r7, r0
 800060a:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800060e:	6822      	ldr	r2, [r4, #0]
 8000610:	fa96 f3a6 	rbit	r3, r6
 8000614:	fab3 f383 	clz	r3, r3
 8000618:	f003 031f 	and.w	r3, r3, #31
 800061c:	fa22 f303 	lsr.w	r3, r2, r3
 8000620:	07da      	lsls	r2, r3, #31
 8000622:	d4a9      	bmi.n	8000578 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000624:	f7ff fe28 	bl	8000278 <HAL_GetTick>
 8000628:	1bc0      	subs	r0, r0, r7
 800062a:	2864      	cmp	r0, #100	; 0x64
 800062c:	d9ed      	bls.n	800060a <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 800062e:	2003      	movs	r0, #3
 8000630:	e1fc      	b.n	8000a2c <HAL_RCC_OscConfig+0x4c0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000632:	f7ff fe21 	bl	8000278 <HAL_GetTick>
 8000636:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800063a:	4607      	mov	r7, r0
 800063c:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000640:	6822      	ldr	r2, [r4, #0]
 8000642:	fa96 f3a6 	rbit	r3, r6
 8000646:	fab3 f383 	clz	r3, r3
 800064a:	f003 031f 	and.w	r3, r3, #31
 800064e:	fa22 f303 	lsr.w	r3, r2, r3
 8000652:	07db      	lsls	r3, r3, #31
 8000654:	d590      	bpl.n	8000578 <HAL_RCC_OscConfig+0xc>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000656:	f7ff fe0f 	bl	8000278 <HAL_GetTick>
 800065a:	1bc0      	subs	r0, r0, r7
 800065c:	2864      	cmp	r0, #100	; 0x64
 800065e:	d9ed      	bls.n	800063c <HAL_RCC_OscConfig+0xd0>
 8000660:	e7e5      	b.n	800062e <HAL_RCC_OscConfig+0xc2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000662:	4c7b      	ldr	r4, [pc, #492]	; (8000850 <HAL_RCC_OscConfig+0x2e4>)
 8000664:	6863      	ldr	r3, [r4, #4]
 8000666:	f013 0f0c 	tst.w	r3, #12
 800066a:	d007      	beq.n	800067c <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800066c:	6863      	ldr	r3, [r4, #4]
 800066e:	f003 030c 	and.w	r3, r3, #12
 8000672:	2b08      	cmp	r3, #8
 8000674:	d121      	bne.n	80006ba <HAL_RCC_OscConfig+0x14e>
 8000676:	6863      	ldr	r3, [r4, #4]
 8000678:	03d8      	lsls	r0, r3, #15
 800067a:	d41e      	bmi.n	80006ba <HAL_RCC_OscConfig+0x14e>
 800067c:	2302      	movs	r3, #2
 800067e:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000682:	6822      	ldr	r2, [r4, #0]
 8000684:	fa93 f3a3 	rbit	r3, r3
 8000688:	fab3 f383 	clz	r3, r3
 800068c:	f003 031f 	and.w	r3, r3, #31
 8000690:	fa22 f303 	lsr.w	r3, r2, r3
 8000694:	07d9      	lsls	r1, r3, #31
 8000696:	d502      	bpl.n	800069e <HAL_RCC_OscConfig+0x132>
 8000698:	692b      	ldr	r3, [r5, #16]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d190      	bne.n	80005c0 <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800069e:	6823      	ldr	r3, [r4, #0]
 80006a0:	22f8      	movs	r2, #248	; 0xf8
 80006a2:	fa92 f2a2 	rbit	r2, r2
 80006a6:	6969      	ldr	r1, [r5, #20]
 80006a8:	fab2 f282 	clz	r2, r2
 80006ac:	fa01 f202 	lsl.w	r2, r1, r2
 80006b0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80006b4:	4313      	orrs	r3, r2
 80006b6:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006b8:	e053      	b.n	8000762 <HAL_RCC_OscConfig+0x1f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80006ba:	692a      	ldr	r2, [r5, #16]
 80006bc:	2301      	movs	r3, #1
 80006be:	b37a      	cbz	r2, 8000720 <HAL_RCC_OscConfig+0x1b4>
 80006c0:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80006c4:	fab2 f282 	clz	r2, r2
 80006c8:	0092      	lsls	r2, r2, #2
 80006ca:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 80006ce:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 80006d2:	2602      	movs	r6, #2
 80006d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80006d6:	f7ff fdcf 	bl	8000278 <HAL_GetTick>
 80006da:	4607      	mov	r7, r0
 80006dc:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006e0:	485b      	ldr	r0, [pc, #364]	; (8000850 <HAL_RCC_OscConfig+0x2e4>)
 80006e2:	6822      	ldr	r2, [r4, #0]
 80006e4:	fa96 f3a6 	rbit	r3, r6
 80006e8:	fab3 f383 	clz	r3, r3
 80006ec:	f003 031f 	and.w	r3, r3, #31
 80006f0:	fa22 f303 	lsr.w	r3, r2, r3
 80006f4:	07da      	lsls	r2, r3, #31
 80006f6:	d405      	bmi.n	8000704 <HAL_RCC_OscConfig+0x198>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006f8:	f7ff fdbe 	bl	8000278 <HAL_GetTick>
 80006fc:	1bc0      	subs	r0, r0, r7
 80006fe:	2802      	cmp	r0, #2
 8000700:	d9ec      	bls.n	80006dc <HAL_RCC_OscConfig+0x170>
 8000702:	e794      	b.n	800062e <HAL_RCC_OscConfig+0xc2>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000704:	6803      	ldr	r3, [r0, #0]
 8000706:	22f8      	movs	r2, #248	; 0xf8
 8000708:	fa92 f2a2 	rbit	r2, r2
 800070c:	6969      	ldr	r1, [r5, #20]
 800070e:	fab2 f282 	clz	r2, r2
 8000712:	fa01 f202 	lsl.w	r2, r1, r2
 8000716:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800071a:	4313      	orrs	r3, r2
 800071c:	6003      	str	r3, [r0, #0]
 800071e:	e020      	b.n	8000762 <HAL_RCC_OscConfig+0x1f6>
 8000720:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000724:	fab3 f383 	clz	r3, r3
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800072e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000732:	2602      	movs	r6, #2
 8000734:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000736:	f7ff fd9f 	bl	8000278 <HAL_GetTick>
 800073a:	4607      	mov	r7, r0
 800073c:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000740:	6822      	ldr	r2, [r4, #0]
 8000742:	fa96 f3a6 	rbit	r3, r6
 8000746:	fab3 f383 	clz	r3, r3
 800074a:	f003 031f 	and.w	r3, r3, #31
 800074e:	fa22 f303 	lsr.w	r3, r2, r3
 8000752:	07db      	lsls	r3, r3, #31
 8000754:	d505      	bpl.n	8000762 <HAL_RCC_OscConfig+0x1f6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000756:	f7ff fd8f 	bl	8000278 <HAL_GetTick>
 800075a:	1bc0      	subs	r0, r0, r7
 800075c:	2802      	cmp	r0, #2
 800075e:	d9ed      	bls.n	800073c <HAL_RCC_OscConfig+0x1d0>
 8000760:	e765      	b.n	800062e <HAL_RCC_OscConfig+0xc2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000762:	682b      	ldr	r3, [r5, #0]
 8000764:	0718      	lsls	r0, r3, #28
 8000766:	d403      	bmi.n	8000770 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000768:	682b      	ldr	r3, [r5, #0]
 800076a:	0759      	lsls	r1, r3, #29
 800076c:	d447      	bmi.n	80007fe <HAL_RCC_OscConfig+0x292>
 800076e:	e0da      	b.n	8000926 <HAL_RCC_OscConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000770:	69aa      	ldr	r2, [r5, #24]
 8000772:	4c37      	ldr	r4, [pc, #220]	; (8000850 <HAL_RCC_OscConfig+0x2e4>)
 8000774:	4937      	ldr	r1, [pc, #220]	; (8000854 <HAL_RCC_OscConfig+0x2e8>)
 8000776:	2301      	movs	r3, #1
 8000778:	b302      	cbz	r2, 80007bc <HAL_RCC_OscConfig+0x250>
 800077a:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800077e:	fab2 f282 	clz	r2, r2
 8000782:	2602      	movs	r6, #2
 8000784:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000788:	f7ff fd76 	bl	8000278 <HAL_GetTick>
 800078c:	4607      	mov	r7, r0
 800078e:	fa96 f3a6 	rbit	r3, r6
 8000792:	fa96 f3a6 	rbit	r3, r6
 8000796:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800079a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800079c:	fa96 f3a6 	rbit	r3, r6
 80007a0:	fab3 f383 	clz	r3, r3
 80007a4:	f003 031f 	and.w	r3, r3, #31
 80007a8:	fa22 f303 	lsr.w	r3, r2, r3
 80007ac:	07da      	lsls	r2, r3, #31
 80007ae:	d4db      	bmi.n	8000768 <HAL_RCC_OscConfig+0x1fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007b0:	f7ff fd62 	bl	8000278 <HAL_GetTick>
 80007b4:	1bc0      	subs	r0, r0, r7
 80007b6:	2802      	cmp	r0, #2
 80007b8:	d9e9      	bls.n	800078e <HAL_RCC_OscConfig+0x222>
 80007ba:	e738      	b.n	800062e <HAL_RCC_OscConfig+0xc2>
 80007bc:	fa93 f3a3 	rbit	r3, r3
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80007c0:	fab3 f383 	clz	r3, r3
 80007c4:	2602      	movs	r6, #2
 80007c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80007ca:	f7ff fd55 	bl	8000278 <HAL_GetTick>
 80007ce:	4607      	mov	r7, r0
 80007d0:	fa96 f3a6 	rbit	r3, r6
 80007d4:	fa96 f3a6 	rbit	r3, r6
 80007d8:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007de:	fa96 f3a6 	rbit	r3, r6
 80007e2:	fab3 f383 	clz	r3, r3
 80007e6:	f003 031f 	and.w	r3, r3, #31
 80007ea:	fa22 f303 	lsr.w	r3, r2, r3
 80007ee:	07db      	lsls	r3, r3, #31
 80007f0:	d5ba      	bpl.n	8000768 <HAL_RCC_OscConfig+0x1fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007f2:	f7ff fd41 	bl	8000278 <HAL_GetTick>
 80007f6:	1bc0      	subs	r0, r0, r7
 80007f8:	2802      	cmp	r0, #2
 80007fa:	d9e9      	bls.n	80007d0 <HAL_RCC_OscConfig+0x264>
 80007fc:	e717      	b.n	800062e <HAL_RCC_OscConfig+0xc2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007fe:	4c14      	ldr	r4, [pc, #80]	; (8000850 <HAL_RCC_OscConfig+0x2e4>)
 8000800:	69e3      	ldr	r3, [r4, #28]
 8000802:	00de      	lsls	r6, r3, #3
 8000804:	d40a      	bmi.n	800081c <HAL_RCC_OscConfig+0x2b0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	69e3      	ldr	r3, [r4, #28]
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080c:	61e3      	str	r3, [r4, #28]
 800080e:	69e3      	ldr	r3, [r4, #28]
 8000810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000814:	9301      	str	r3, [sp, #4]
 8000816:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000818:	2701      	movs	r7, #1
 800081a:	e000      	b.n	800081e <HAL_RCC_OscConfig+0x2b2>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 800081c:	2700      	movs	r7, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800081e:	4e0e      	ldr	r6, [pc, #56]	; (8000858 <HAL_RCC_OscConfig+0x2ec>)
 8000820:	6833      	ldr	r3, [r6, #0]
 8000822:	05d8      	lsls	r0, r3, #23
 8000824:	d503      	bpl.n	800082e <HAL_RCC_OscConfig+0x2c2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000826:	68eb      	ldr	r3, [r5, #12]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d117      	bne.n	800085c <HAL_RCC_OscConfig+0x2f0>
 800082c:	e02d      	b.n	800088a <HAL_RCC_OscConfig+0x31e>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800082e:	6833      	ldr	r3, [r6, #0]
 8000830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000834:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000836:	f7ff fd1f 	bl	8000278 <HAL_GetTick>
 800083a:	4680      	mov	r8, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800083c:	6833      	ldr	r3, [r6, #0]
 800083e:	05d9      	lsls	r1, r3, #23
 8000840:	d4f1      	bmi.n	8000826 <HAL_RCC_OscConfig+0x2ba>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000842:	f7ff fd19 	bl	8000278 <HAL_GetTick>
 8000846:	ebc8 0000 	rsb	r0, r8, r0
 800084a:	2864      	cmp	r0, #100	; 0x64
 800084c:	d9f6      	bls.n	800083c <HAL_RCC_OscConfig+0x2d0>
 800084e:	e6ee      	b.n	800062e <HAL_RCC_OscConfig+0xc2>
 8000850:	40021000 	.word	0x40021000
 8000854:	42420480 	.word	0x42420480
 8000858:	40007000 	.word	0x40007000
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800085c:	b97b      	cbnz	r3, 800087e <HAL_RCC_OscConfig+0x312>
 800085e:	6a23      	ldr	r3, [r4, #32]
 8000860:	f023 0301 	bic.w	r3, r3, #1
 8000864:	6223      	str	r3, [r4, #32]
 8000866:	6a23      	ldr	r3, [r4, #32]
 8000868:	f023 0304 	bic.w	r3, r3, #4
 800086c:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800086e:	f7ff fd03 	bl	8000278 <HAL_GetTick>
 8000872:	2602      	movs	r6, #2
 8000874:	4681      	mov	r9, r0
 8000876:	46b0      	mov	r8, r6
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000878:	f241 3a88 	movw	sl, #5000	; 0x1388
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800087c:	e039      	b.n	80008f2 <HAL_RCC_OscConfig+0x386>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800087e:	2b05      	cmp	r3, #5
 8000880:	6a23      	ldr	r3, [r4, #32]
 8000882:	d106      	bne.n	8000892 <HAL_RCC_OscConfig+0x326>
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	6223      	str	r3, [r4, #32]
 800088a:	6a23      	ldr	r3, [r4, #32]
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	e005      	b.n	800089e <HAL_RCC_OscConfig+0x332>
 8000892:	f023 0301 	bic.w	r3, r3, #1
 8000896:	6223      	str	r3, [r4, #32]
 8000898:	6a23      	ldr	r3, [r4, #32]
 800089a:	f023 0304 	bic.w	r3, r3, #4
 800089e:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80008a0:	f7ff fcea 	bl	8000278 <HAL_GetTick>
 80008a4:	2602      	movs	r6, #2
 80008a6:	4682      	mov	sl, r0
 80008a8:	46b1      	mov	r9, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008aa:	f241 3888 	movw	r8, #5000	; 0x1388
 80008ae:	fa96 f3a6 	rbit	r3, r6
 80008b2:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008b6:	b10b      	cbz	r3, 80008bc <HAL_RCC_OscConfig+0x350>
 80008b8:	6a22      	ldr	r2, [r4, #32]
 80008ba:	e002      	b.n	80008c2 <HAL_RCC_OscConfig+0x356>
 80008bc:	fa96 f3a6 	rbit	r3, r6
 80008c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008c2:	fa99 f3a9 	rbit	r3, r9
 80008c6:	fab3 f383 	clz	r3, r3
 80008ca:	f003 031f 	and.w	r3, r3, #31
 80008ce:	fa22 f303 	lsr.w	r3, r2, r3
 80008d2:	07da      	lsls	r2, r3, #31
 80008d4:	d41d      	bmi.n	8000912 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008d6:	f7ff fccf 	bl	8000278 <HAL_GetTick>
 80008da:	ebca 0000 	rsb	r0, sl, r0
 80008de:	4540      	cmp	r0, r8
 80008e0:	d9e5      	bls.n	80008ae <HAL_RCC_OscConfig+0x342>
 80008e2:	e6a4      	b.n	800062e <HAL_RCC_OscConfig+0xc2>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008e4:	f7ff fcc8 	bl	8000278 <HAL_GetTick>
 80008e8:	ebc9 0000 	rsb	r0, r9, r0
 80008ec:	4550      	cmp	r0, sl
 80008ee:	f63f ae9e 	bhi.w	800062e <HAL_RCC_OscConfig+0xc2>
 80008f2:	fa96 f3a6 	rbit	r3, r6
 80008f6:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008fa:	b183      	cbz	r3, 800091e <HAL_RCC_OscConfig+0x3b2>
 80008fc:	6a22      	ldr	r2, [r4, #32]
 80008fe:	fa98 f3a8 	rbit	r3, r8
 8000902:	fab3 f383 	clz	r3, r3
 8000906:	f003 031f 	and.w	r3, r3, #31
 800090a:	fa22 f303 	lsr.w	r3, r2, r3
 800090e:	07db      	lsls	r3, r3, #31
 8000910:	d4e8      	bmi.n	80008e4 <HAL_RCC_OscConfig+0x378>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000912:	b147      	cbz	r7, 8000926 <HAL_RCC_OscConfig+0x3ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000914:	69e3      	ldr	r3, [r4, #28]
 8000916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800091a:	61e3      	str	r3, [r4, #28]
 800091c:	e003      	b.n	8000926 <HAL_RCC_OscConfig+0x3ba>
 800091e:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000922:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000924:	e7eb      	b.n	80008fe <HAL_RCC_OscConfig+0x392>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000926:	69ea      	ldr	r2, [r5, #28]
 8000928:	b90a      	cbnz	r2, 800092e <HAL_RCC_OscConfig+0x3c2>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800092a:	2000      	movs	r0, #0
 800092c:	e07e      	b.n	8000a2c <HAL_RCC_OscConfig+0x4c0>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800092e:	4c41      	ldr	r4, [pc, #260]	; (8000a34 <HAL_RCC_OscConfig+0x4c8>)
 8000930:	6863      	ldr	r3, [r4, #4]
 8000932:	f003 030c 	and.w	r3, r3, #12
 8000936:	2b08      	cmp	r3, #8
 8000938:	f43f ae42 	beq.w	80005c0 <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800093c:	2a02      	cmp	r2, #2
 800093e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000942:	d150      	bne.n	80009e6 <HAL_RCC_OscConfig+0x47a>
 8000944:	fa93 f3a3 	rbit	r3, r3
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000948:	fab3 f383 	clz	r3, r3
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000952:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800095a:	f7ff fc8d 	bl	8000278 <HAL_GetTick>
 800095e:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000962:	4607      	mov	r7, r0
 8000964:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000968:	4932      	ldr	r1, [pc, #200]	; (8000a34 <HAL_RCC_OscConfig+0x4c8>)
 800096a:	6822      	ldr	r2, [r4, #0]
 800096c:	fa96 f3a6 	rbit	r3, r6
 8000970:	fab3 f383 	clz	r3, r3
 8000974:	f003 031f 	and.w	r3, r3, #31
 8000978:	fa22 f303 	lsr.w	r3, r2, r3
 800097c:	07d8      	lsls	r0, r3, #31
 800097e:	d505      	bpl.n	800098c <HAL_RCC_OscConfig+0x420>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000980:	f7ff fc7a 	bl	8000278 <HAL_GetTick>
 8000984:	1bc0      	subs	r0, r0, r7
 8000986:	2802      	cmp	r0, #2
 8000988:	d9ec      	bls.n	8000964 <HAL_RCC_OscConfig+0x3f8>
 800098a:	e650      	b.n	800062e <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800098c:	684b      	ldr	r3, [r1, #4]
 800098e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8000990:	6a2a      	ldr	r2, [r5, #32]
 8000992:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000996:	4302      	orrs	r2, r0
 8000998:	4313      	orrs	r3, r2
 800099a:	604b      	str	r3, [r1, #4]
 800099c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009a0:	fa93 f3a3 	rbit	r3, r3
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80009a4:	fab3 f383 	clz	r3, r3
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80009ae:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80009b2:	2201      	movs	r2, #1
 80009b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009b6:	f7ff fc5f 	bl	8000278 <HAL_GetTick>
 80009ba:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80009be:	4606      	mov	r6, r0
 80009c0:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009c4:	6822      	ldr	r2, [r4, #0]
 80009c6:	fa95 f3a5 	rbit	r3, r5
 80009ca:	fab3 f383 	clz	r3, r3
 80009ce:	f003 031f 	and.w	r3, r3, #31
 80009d2:	fa22 f303 	lsr.w	r3, r2, r3
 80009d6:	07da      	lsls	r2, r3, #31
 80009d8:	d4a7      	bmi.n	800092a <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009da:	f7ff fc4d 	bl	8000278 <HAL_GetTick>
 80009de:	1b80      	subs	r0, r0, r6
 80009e0:	2802      	cmp	r0, #2
 80009e2:	d9ed      	bls.n	80009c0 <HAL_RCC_OscConfig+0x454>
 80009e4:	e623      	b.n	800062e <HAL_RCC_OscConfig+0xc2>
 80009e6:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80009ea:	fab3 f383 	clz	r3, r3
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80009f4:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009fc:	f7ff fc3c 	bl	8000278 <HAL_GetTick>
 8000a00:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000a04:	4606      	mov	r6, r0
 8000a06:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a0a:	6822      	ldr	r2, [r4, #0]
 8000a0c:	fa95 f3a5 	rbit	r3, r5
 8000a10:	fab3 f383 	clz	r3, r3
 8000a14:	f003 031f 	and.w	r3, r3, #31
 8000a18:	fa22 f303 	lsr.w	r3, r2, r3
 8000a1c:	07db      	lsls	r3, r3, #31
 8000a1e:	d584      	bpl.n	800092a <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a20:	f7ff fc2a 	bl	8000278 <HAL_GetTick>
 8000a24:	1b80      	subs	r0, r0, r6
 8000a26:	2802      	cmp	r0, #2
 8000a28:	d9ed      	bls.n	8000a06 <HAL_RCC_OscConfig+0x49a>
 8000a2a:	e600      	b.n	800062e <HAL_RCC_OscConfig+0xc2>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000a2c:	b002      	add	sp, #8
 8000a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a32:	bf00      	nop
 8000a34:	40021000 	.word	0x40021000

08000a38 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8000a38:	4913      	ldr	r1, [pc, #76]	; (8000a88 <HAL_RCC_GetSysClockFreq+0x50>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000a3a:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8000a3c:	684c      	ldr	r4, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000a3e:	f004 030c 	and.w	r3, r4, #12
 8000a42:	2b08      	cmp	r3, #8
 8000a44:	d11e      	bne.n	8000a84 <HAL_RCC_GetSysClockFreq+0x4c>
 8000a46:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000a4a:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a4e:	f404 1270 	and.w	r2, r4, #3932160	; 0x3c0000
 8000a52:	fab3 f383 	clz	r3, r3
 8000a56:	fa22 f303 	lsr.w	r3, r2, r3
 8000a5a:	4a0c      	ldr	r2, [pc, #48]	; (8000a8c <HAL_RCC_GetSysClockFreq+0x54>)
 8000a5c:	5cd3      	ldrb	r3, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000a5e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8000a60:	210f      	movs	r1, #15
 8000a62:	fa91 f1a1 	rbit	r1, r1
 8000a66:	fab1 f181 	clz	r1, r1
 8000a6a:	f002 020f 	and.w	r2, r2, #15
 8000a6e:	40ca      	lsrs	r2, r1
 8000a70:	4907      	ldr	r1, [pc, #28]	; (8000a90 <HAL_RCC_GetSysClockFreq+0x58>)
 8000a72:	5c88      	ldrb	r0, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000a74:	03e2      	lsls	r2, r4, #15
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8000a76:	bf52      	itee	pl
 8000a78:	4806      	ldrpl	r0, [pc, #24]	; (8000a94 <HAL_RCC_GetSysClockFreq+0x5c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000a7a:	4a07      	ldrmi	r2, [pc, #28]	; (8000a98 <HAL_RCC_GetSysClockFreq+0x60>)
 8000a7c:	fbb2 f0f0 	udivmi	r0, r2, r0
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8000a80:	4358      	muls	r0, r3
 8000a82:	bd10      	pop	{r4, pc}
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a86:	bd10      	pop	{r4, pc}
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	08000ed4 	.word	0x08000ed4
 8000a90:	08000ec4 	.word	0x08000ec4
 8000a94:	003d0900 	.word	0x003d0900
 8000a98:	007a1200 	.word	0x007a1200

08000a9c <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a9c:	4a54      	ldr	r2, [pc, #336]	; (8000bf0 <HAL_RCC_ClockConfig+0x154>)
 8000a9e:	6813      	ldr	r3, [r2, #0]
 8000aa0:	f003 0307 	and.w	r3, r3, #7
 8000aa4:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000aaa:	4606      	mov	r6, r0
 8000aac:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000aae:	d30a      	bcc.n	8000ac6 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ab0:	6831      	ldr	r1, [r6, #0]
 8000ab2:	078c      	lsls	r4, r1, #30
 8000ab4:	d514      	bpl.n	8000ae0 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ab6:	484f      	ldr	r0, [pc, #316]	; (8000bf4 <HAL_RCC_ClockConfig+0x158>)
 8000ab8:	6843      	ldr	r3, [r0, #4]
 8000aba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000abe:	68b3      	ldr	r3, [r6, #8]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	6043      	str	r3, [r0, #4]
 8000ac4:	e00c      	b.n	8000ae0 <HAL_RCC_ClockConfig+0x44>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ac6:	6813      	ldr	r3, [r2, #0]
 8000ac8:	f023 0307 	bic.w	r3, r3, #7
 8000acc:	430b      	orrs	r3, r1
 8000ace:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ad0:	6813      	ldr	r3, [r2, #0]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d0ea      	beq.n	8000ab0 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8000ada:	2001      	movs	r0, #1
 8000adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ae0:	07c8      	lsls	r0, r1, #31
 8000ae2:	d406      	bmi.n	8000af2 <HAL_RCC_ClockConfig+0x56>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ae4:	4a42      	ldr	r2, [pc, #264]	; (8000bf0 <HAL_RCC_ClockConfig+0x154>)
 8000ae6:	6813      	ldr	r3, [r2, #0]
 8000ae8:	f003 0307 	and.w	r3, r3, #7
 8000aec:	429d      	cmp	r5, r3
 8000aee:	d34a      	bcc.n	8000b86 <HAL_RCC_ClockConfig+0xea>
 8000af0:	e053      	b.n	8000b9a <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000af2:	6872      	ldr	r2, [r6, #4]
 8000af4:	4c3f      	ldr	r4, [pc, #252]	; (8000bf4 <HAL_RCC_ClockConfig+0x158>)
 8000af6:	2a01      	cmp	r2, #1
 8000af8:	d102      	bne.n	8000b00 <HAL_RCC_ClockConfig+0x64>
 8000afa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000afe:	e004      	b.n	8000b0a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b00:	2a02      	cmp	r2, #2
 8000b02:	bf0c      	ite	eq
 8000b04:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000b08:	2302      	movne	r3, #2
 8000b0a:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b0e:	6821      	ldr	r1, [r4, #0]
 8000b10:	fa93 f3a3 	rbit	r3, r3
 8000b14:	fab3 f383 	clz	r3, r3
 8000b18:	f003 031f 	and.w	r3, r3, #31
 8000b1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000b20:	07d9      	lsls	r1, r3, #31
 8000b22:	d5da      	bpl.n	8000ada <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b24:	6863      	ldr	r3, [r4, #4]
 8000b26:	f023 0303 	bic.w	r3, r3, #3
 8000b2a:	431a      	orrs	r2, r3
 8000b2c:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000b2e:	f7ff fba3 	bl	8000278 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b32:	6873      	ldr	r3, [r6, #4]
 8000b34:	2b01      	cmp	r3, #1
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000b36:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b38:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b3c:	d10c      	bne.n	8000b58 <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b3e:	6863      	ldr	r3, [r4, #4]
 8000b40:	f003 030c 	and.w	r3, r3, #12
 8000b44:	2b04      	cmp	r3, #4
 8000b46:	d0cd      	beq.n	8000ae4 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b48:	f7ff fb96 	bl	8000278 <HAL_GetTick>
 8000b4c:	1bc0      	subs	r0, r0, r7
 8000b4e:	4540      	cmp	r0, r8
 8000b50:	d9f5      	bls.n	8000b3e <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 8000b52:	2003      	movs	r0, #3
 8000b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d10f      	bne.n	8000b7c <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b5c:	6863      	ldr	r3, [r4, #4]
 8000b5e:	f003 030c 	and.w	r3, r3, #12
 8000b62:	2b08      	cmp	r3, #8
 8000b64:	d0be      	beq.n	8000ae4 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b66:	f7ff fb87 	bl	8000278 <HAL_GetTick>
 8000b6a:	1bc0      	subs	r0, r0, r7
 8000b6c:	4540      	cmp	r0, r8
 8000b6e:	d9f5      	bls.n	8000b5c <HAL_RCC_ClockConfig+0xc0>
 8000b70:	e7ef      	b.n	8000b52 <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b72:	f7ff fb81 	bl	8000278 <HAL_GetTick>
 8000b76:	1bc0      	subs	r0, r0, r7
 8000b78:	4540      	cmp	r0, r8
 8000b7a:	d8ea      	bhi.n	8000b52 <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b7c:	6863      	ldr	r3, [r4, #4]
 8000b7e:	f013 0f0c 	tst.w	r3, #12
 8000b82:	d1f6      	bne.n	8000b72 <HAL_RCC_ClockConfig+0xd6>
 8000b84:	e7ae      	b.n	8000ae4 <HAL_RCC_ClockConfig+0x48>
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b86:	6813      	ldr	r3, [r2, #0]
 8000b88:	f023 0307 	bic.w	r3, r3, #7
 8000b8c:	432b      	orrs	r3, r5
 8000b8e:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b90:	6813      	ldr	r3, [r2, #0]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	429d      	cmp	r5, r3
 8000b98:	d19f      	bne.n	8000ada <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b9a:	6831      	ldr	r1, [r6, #0]
 8000b9c:	4c15      	ldr	r4, [pc, #84]	; (8000bf4 <HAL_RCC_ClockConfig+0x158>)
 8000b9e:	f011 0f04 	tst.w	r1, #4
 8000ba2:	d005      	beq.n	8000bb0 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ba4:	6863      	ldr	r3, [r4, #4]
 8000ba6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000baa:	68f3      	ldr	r3, [r6, #12]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bb0:	070b      	lsls	r3, r1, #28
 8000bb2:	d506      	bpl.n	8000bc2 <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000bb4:	6863      	ldr	r3, [r4, #4]
 8000bb6:	6932      	ldr	r2, [r6, #16]
 8000bb8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000bbc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000bc0:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000bc2:	f7ff ff39 	bl	8000a38 <HAL_RCC_GetSysClockFreq>
 8000bc6:	6863      	ldr	r3, [r4, #4]
 8000bc8:	22f0      	movs	r2, #240	; 0xf0
 8000bca:	fa92 f2a2 	rbit	r2, r2
 8000bce:	fab2 f282 	clz	r2, r2
 8000bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000bd6:	40d3      	lsrs	r3, r2
 8000bd8:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <HAL_RCC_ClockConfig+0x15c>)
 8000bda:	5cd3      	ldrb	r3, [r2, r3]
 8000bdc:	40d8      	lsrs	r0, r3
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <HAL_RCC_ClockConfig+0x160>)
 8000be0:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000be2:	2000      	movs	r0, #0
 8000be4:	f7ff fb1a 	bl	800021c <HAL_InitTick>
  
  return HAL_OK;
 8000be8:	2000      	movs	r0, #0
}
 8000bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bee:	bf00      	nop
 8000bf0:	40022000 	.word	0x40022000
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	08000ee4 	.word	0x08000ee4
 8000bfc:	20000000 	.word	0x20000000

08000c00 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000c00:	4b01      	ldr	r3, [pc, #4]	; (8000c08 <HAL_RCC_GetHCLKFreq+0x8>)
 8000c02:	6818      	ldr	r0, [r3, #0]
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000000 	.word	0x20000000

08000c0c <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000c0c:	b510      	push	{r4, lr}
 8000c0e:	b090      	sub	sp, #64	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c10:	2301      	movs	r3, #1
 8000c12:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000c14:	2310      	movs	r3, #16
 8000c16:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c18:	2300      	movs	r3, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c1a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c1c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000c20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c24:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c26:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000c28:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2a:	f7ff fc9f 	bl	800056c <HAL_RCC_OscConfig>
 8000c2e:	4601      	mov	r1, r0
 8000c30:	b100      	cbz	r0, 8000c34 <SystemClock_Config+0x28>
 8000c32:	e7fe      	b.n	8000c32 <SystemClock_Config+0x26>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c34:	230f      	movs	r3, #15
 8000c36:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c38:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3e:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c40:	a801      	add	r0, sp, #4

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c42:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c44:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c46:	f7ff ff29 	bl	8000a9c <HAL_RCC_ClockConfig>
 8000c4a:	4604      	mov	r4, r0
 8000c4c:	b100      	cbz	r0, 8000c50 <SystemClock_Config+0x44>
 8000c4e:	e7fe      	b.n	8000c4e <SystemClock_Config+0x42>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000c50:	f7ff ffd6 	bl	8000c00 <HAL_RCC_GetHCLKFreq>
 8000c54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c58:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c5c:	f7ff fb72 	bl	8000344 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000c60:	2004      	movs	r0, #4
 8000c62:	f7ff fb85 	bl	8000370 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000c66:	4622      	mov	r2, r4
 8000c68:	4621      	mov	r1, r4
 8000c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6e:	f7ff fb29 	bl	80002c4 <HAL_NVIC_SetPriority>
}
 8000c72:	b010      	add	sp, #64	; 0x40
 8000c74:	bd10      	pop	{r4, pc}
	...

08000c78 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8000c78:	b500      	push	{lr}
 8000c7a:	b089      	sub	sp, #36	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c7c:	f7ff fae2 	bl	8000244 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000c80:	f7ff ffc4 	bl	8000c0c <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c84:	4b25      	ldr	r3, [pc, #148]	; (8000d1c <main+0xa4>)
 8000c86:	695a      	ldr	r2, [r3, #20]
 8000c88:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000c8c:	615a      	str	r2, [r3, #20]
 8000c8e:	695a      	ldr	r2, [r3, #20]
 8000c90:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000c94:	9201      	str	r2, [sp, #4]
 8000c96:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c98:	695a      	ldr	r2, [r3, #20]
 8000c9a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000c9e:	615a      	str	r2, [r3, #20]
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca6:	9302      	str	r3, [sp, #8]
 8000ca8:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000caa:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <main+0xa8>)
 8000cac:	9304      	str	r3, [sp, #16]
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cae:	2401      	movs	r4, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cb0:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	a903      	add	r1, sp, #12
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cb8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cba:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	f7ff fb6a 	bl	8000394 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000cc0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cc6:	a903      	add	r1, sp, #12
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PE10 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cca:	4816      	ldr	r0, [pc, #88]	; (8000d24 <main+0xac>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PE10 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000ccc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cd2:	f7ff fb5f 	bl	8000394 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000cd6:	4622      	mov	r2, r4
 8000cd8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000cdc:	4811      	ldr	r0, [pc, #68]	; (8000d24 <main+0xac>)
 8000cde:	f7ff fc23 	bl	8000528 <HAL_GPIO_WritePin>


static void MX_NVIC_Init(void)
{
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000ce2:	2006      	movs	r0, #6
 8000ce4:	4622      	mov	r2, r4
 8000ce6:	4621      	mov	r1, r4
 8000ce8:	f7ff faec 	bl	80002c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000cec:	2006      	movs	r0, #6
 8000cee:	f7ff fb1d 	bl	800032c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  /* USER CODE END WHILE */
//HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,RESET);
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,1);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cf8:	480a      	ldr	r0, [pc, #40]	; (8000d24 <main+0xac>)
 8000cfa:	f7ff fc15 	bl	8000528 <HAL_GPIO_WritePin>
HAL_Delay(5000);
 8000cfe:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d02:	f7ff fabf 	bl	8000284 <HAL_Delay>
HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <main+0xac>)
 8000d0e:	f7ff fc0b 	bl	8000528 <HAL_GPIO_WritePin>
HAL_Delay(5000);
 8000d12:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d16:	f7ff fab5 	bl	8000284 <HAL_Delay>
 8000d1a:	e7ea      	b.n	8000cf2 <main+0x7a>
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	10310000 	.word	0x10310000
 8000d24:	48001000 	.word	0x48001000

08000d28 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d28:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <HAL_MspInit+0x88>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2a:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2c:	699a      	ldr	r2, [r3, #24]
 8000d2e:	f042 0201 	orr.w	r2, r2, #1
 8000d32:	619a      	str	r2, [r3, #24]
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d3c:	2007      	movs	r0, #7
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d40:	f7ff faae 	bl	80002a0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	4611      	mov	r1, r2
 8000d48:	f06f 000b 	mvn.w	r0, #11
 8000d4c:	f7ff faba 	bl	80002c4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000d50:	2200      	movs	r2, #0
 8000d52:	4611      	mov	r1, r2
 8000d54:	f06f 000a 	mvn.w	r0, #10
 8000d58:	f7ff fab4 	bl	80002c4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4611      	mov	r1, r2
 8000d60:	f06f 0009 	mvn.w	r0, #9
 8000d64:	f7ff faae 	bl	80002c4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	f06f 0004 	mvn.w	r0, #4
 8000d70:	f7ff faa8 	bl	80002c4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000d74:	2200      	movs	r2, #0
 8000d76:	4611      	mov	r1, r2
 8000d78:	f06f 0003 	mvn.w	r0, #3
 8000d7c:	f7ff faa2 	bl	80002c4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000d80:	2200      	movs	r2, #0
 8000d82:	4611      	mov	r1, r2
 8000d84:	f06f 0001 	mvn.w	r0, #1
 8000d88:	f7ff fa9c 	bl	80002c4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4611      	mov	r1, r2
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f7ff fa96 	bl	80002c4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init*/
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f7ff fa91 	bl	80002c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8000da2:	2001      	movs	r0, #1
 8000da4:	f7ff fac2 	bl	800032c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da8:	b003      	add	sp, #12
 8000daa:	f85d fb04 	ldr.w	pc, [sp], #4
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000

08000db4 <SVC_Handler>:
 8000db4:	4770      	bx	lr

08000db6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000db6:	4770      	bx	lr

08000db8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000db8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dba:	f7ff fa55 	bl	8000268 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8000dc2:	f7ff bae2 	b.w	800038a <HAL_SYSTICK_IRQHandler>

08000dc6 <PVD_IRQHandler>:
void PVD_IRQHandler(void)
{
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8000dc6:	f7ff bbc3 	b.w	8000550 <HAL_PWR_PVD_IRQHandler>
	...

08000dcc <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 8000dcc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	//HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0));
	//HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_11);
	//HAL_Delay(100);

	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,SET);
 8000dce:	4c09      	ldr	r4, [pc, #36]	; (8000df4 <EXTI0_IRQHandler+0x28>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	4620      	mov	r0, r4
 8000dd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dd8:	f7ff fba6 	bl	8000528 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,SET);
 8000ddc:	4620      	mov	r0, r4
 8000dde:	2201      	movs	r2, #1
 8000de0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000de4:	f7ff fba0 	bl	8000528 <HAL_GPIO_WritePin>
	//HAL_Delay(100);
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000de8:	2001      	movs	r0, #1
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000dea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,SET);
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,SET);
	//HAL_Delay(100);
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000dee:	f7ff bba1 	b.w	8000534 <HAL_GPIO_EXTI_IRQHandler>
 8000df2:	bf00      	nop
 8000df4:	48001000 	.word	0x48001000

08000df8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df8:	4915      	ldr	r1, [pc, #84]	; (8000e50 <SystemInit+0x58>)
 8000dfa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000dfe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000e06:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <SystemInit+0x5c>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	f042 0201 	orr.w	r2, r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000e10:	6858      	ldr	r0, [r3, #4]
 8000e12:	4a11      	ldr	r2, [pc, #68]	; (8000e58 <SystemInit+0x60>)
 8000e14:	4002      	ands	r2, r0
 8000e16:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000e1e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e22:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e2a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000e2c:	685a      	ldr	r2, [r3, #4]
 8000e2e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000e32:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8000e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e36:	f022 020f 	bic.w	r2, r2, #15
 8000e3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8000e3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000e3e:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <SystemInit+0x64>)
 8000e40:	4002      	ands	r2, r0
 8000e42:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e4c:	608b      	str	r3, [r1, #8]
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00
 8000e54:	40021000 	.word	0x40021000
 8000e58:	f87fc00c 	.word	0xf87fc00c
 8000e5c:	ff00fccc 	.word	0xff00fccc

08000e60 <__libc_init_array>:
 8000e60:	b570      	push	{r4, r5, r6, lr}
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <__libc_init_array+0x3c>)
 8000e64:	4c0e      	ldr	r4, [pc, #56]	; (8000ea0 <__libc_init_array+0x40>)
 8000e66:	1ae4      	subs	r4, r4, r3
 8000e68:	10a4      	asrs	r4, r4, #2
 8000e6a:	2500      	movs	r5, #0
 8000e6c:	461e      	mov	r6, r3
 8000e6e:	42a5      	cmp	r5, r4
 8000e70:	d004      	beq.n	8000e7c <__libc_init_array+0x1c>
 8000e72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e76:	4798      	blx	r3
 8000e78:	3501      	adds	r5, #1
 8000e7a:	e7f8      	b.n	8000e6e <__libc_init_array+0xe>
 8000e7c:	f000 f816 	bl	8000eac <_init>
 8000e80:	4c08      	ldr	r4, [pc, #32]	; (8000ea4 <__libc_init_array+0x44>)
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <__libc_init_array+0x48>)
 8000e84:	1ae4      	subs	r4, r4, r3
 8000e86:	10a4      	asrs	r4, r4, #2
 8000e88:	2500      	movs	r5, #0
 8000e8a:	461e      	mov	r6, r3
 8000e8c:	42a5      	cmp	r5, r4
 8000e8e:	d004      	beq.n	8000e9a <__libc_init_array+0x3a>
 8000e90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e94:	4798      	blx	r3
 8000e96:	3501      	adds	r5, #1
 8000e98:	e7f8      	b.n	8000e8c <__libc_init_array+0x2c>
 8000e9a:	bd70      	pop	{r4, r5, r6, pc}
 8000e9c:	08000ef4 	.word	0x08000ef4
 8000ea0:	08000ef4 	.word	0x08000ef4
 8000ea4:	08000ef8 	.word	0x08000ef8
 8000ea8:	08000ef4 	.word	0x08000ef4

08000eac <_init>:
 8000eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eae:	bf00      	nop
 8000eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eb2:	bc08      	pop	{r3}
 8000eb4:	469e      	mov	lr, r3
 8000eb6:	4770      	bx	lr

08000eb8 <_fini>:
 8000eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eba:	bf00      	nop
 8000ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ebe:	bc08      	pop	{r3}
 8000ec0:	469e      	mov	lr, r3
 8000ec2:	4770      	bx	lr
