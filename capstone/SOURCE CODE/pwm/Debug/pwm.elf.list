
pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b44  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08001ccc  08001ccc  00011ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001d18  08001d18  00011d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001d1c  08001d1c  00011d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000114  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000118  20000118  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_line   00003b9d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00009f92  00000000  00000000  00023bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000018a8  00000000  00000000  0002db63  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000006f8  00000000  00000000  0002f410  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a68  00000000  00000000  0002fb08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00005527  00000000  00000000  00030570  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002959  00000000  00000000  00035a97  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  000383f0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000013c4  00000000  00000000  00038470  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001cb4 	.word	0x08001cb4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001cb4 	.word	0x08001cb4

080001c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80001c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000200 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80001cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80001ce:	e003      	b.n	80001d8 <LoopCopyDataInit>

080001d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80001d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80001d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80001d6:	3104      	adds	r1, #4

080001d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <LoopForever+0xa>)
	ldr	r3, =_edata
 80001da:	4b0c      	ldr	r3, [pc, #48]	; (800020c <LoopForever+0xe>)
	adds	r2, r0, r1
 80001dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80001de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80001e0:	d3f6      	bcc.n	80001d0 <CopyDataInit>
	ldr	r2, =_sbss
 80001e2:	4a0b      	ldr	r2, [pc, #44]	; (8000210 <LoopForever+0x12>)
	b	LoopFillZerobss
 80001e4:	e002      	b.n	80001ec <LoopFillZerobss>

080001e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80001e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80001e8:	f842 3b04 	str.w	r3, [r2], #4

080001ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <LoopForever+0x16>)
	cmp	r2, r3
 80001ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80001f0:	d3f9      	bcc.n	80001e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80001f2:	f001 fd05 	bl	8001c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001f6:	f001 fd37 	bl	8001c68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80001fa:	f001 fb31 	bl	8001860 <main>

080001fe <LoopForever>:

LoopForever:
    b LoopForever
 80001fe:	e7fe      	b.n	80001fe <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000200:	2000a000 	.word	0x2000a000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000204:	08001d20 	.word	0x08001d20
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000208:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800020c:	20000004 	.word	0x20000004
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000210:	20000004 	.word	0x20000004
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000214:	20000118 	.word	0x20000118

08000218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000218:	e7fe      	b.n	8000218 <ADC1_2_IRQHandler>
	...

0800021c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800021c:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 800021e:	4b08      	ldr	r3, [pc, #32]	; (8000240 <HAL_InitTick+0x24>)
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000220:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 8000222:	6818      	ldr	r0, [r3, #0]
 8000224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000228:	fbb0 f0f3 	udiv	r0, r0, r3
 800022c:	f000 f88a 	bl	8000344 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000230:	2200      	movs	r2, #0
 8000232:	4621      	mov	r1, r4
 8000234:	f04f 30ff 	mov.w	r0, #4294967295
 8000238:	f000 f844 	bl	80002c4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800023c:	2000      	movs	r0, #0
 800023e:	bd10      	pop	{r4, pc}
 8000240:	20000000 	.word	0x20000000

08000244 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000244:	4a07      	ldr	r2, [pc, #28]	; (8000264 <HAL_Init+0x20>)
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000246:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000248:	6813      	ldr	r3, [r2, #0]
 800024a:	f043 0310 	orr.w	r3, r3, #16
 800024e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000250:	2003      	movs	r0, #3
 8000252:	f000 f825 	bl	80002a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000256:	2000      	movs	r0, #0
 8000258:	f7ff ffe0 	bl	800021c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800025c:	f001 fbd2 	bl	8001a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000260:	2000      	movs	r0, #0
 8000262:	bd08      	pop	{r3, pc}
 8000264:	40022000 	.word	0x40022000

08000268 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000268:	4a02      	ldr	r2, [pc, #8]	; (8000274 <HAL_IncTick+0xc>)
 800026a:	6813      	ldr	r3, [r2, #0]
 800026c:	3301      	adds	r3, #1
 800026e:	6013      	str	r3, [r2, #0]
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000024 	.word	0x20000024

08000278 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000278:	4b01      	ldr	r3, [pc, #4]	; (8000280 <HAL_GetTick+0x8>)
 800027a:	6818      	ldr	r0, [r3, #0]
}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	20000024 	.word	0x20000024

08000284 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000284:	b513      	push	{r0, r1, r4, lr}
 8000286:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000288:	f7ff fff6 	bl	8000278 <HAL_GetTick>
 800028c:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800028e:	f7ff fff3 	bl	8000278 <HAL_GetTick>
 8000292:	9b01      	ldr	r3, [sp, #4]
 8000294:	1b00      	subs	r0, r0, r4
 8000296:	4298      	cmp	r0, r3
 8000298:	d3f9      	bcc.n	800028e <HAL_Delay+0xa>
  {
  }
}
 800029a:	b002      	add	sp, #8
 800029c:	bd10      	pop	{r4, pc}
	...

080002a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002a0:	4a07      	ldr	r2, [pc, #28]	; (80002c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80002a2:	68d3      	ldr	r3, [r2, #12]
 80002a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80002a8:	041b      	lsls	r3, r3, #16
 80002aa:	0c1b      	lsrs	r3, r3, #16
 80002ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80002b0:	0200      	lsls	r0, r0, #8
 80002b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80002ba:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80002bc:	60d3      	str	r3, [r2, #12]
 80002be:	4770      	bx	lr
 80002c0:	e000ed00 	.word	0xe000ed00

080002c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002c4:	4b17      	ldr	r3, [pc, #92]	; (8000324 <HAL_NVIC_SetPriority+0x60>)
 80002c6:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002c8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002cc:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002ce:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002d2:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002d4:	2c04      	cmp	r4, #4
 80002d6:	bf28      	it	cs
 80002d8:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002da:	2d06      	cmp	r5, #6

  return (
 80002dc:	f04f 0501 	mov.w	r5, #1
 80002e0:	fa05 f404 	lsl.w	r4, r5, r4
 80002e4:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002e8:	bf8c      	ite	hi
 80002ea:	3b03      	subhi	r3, #3
 80002ec:	2300      	movls	r3, #0

  return (
 80002ee:	400c      	ands	r4, r1
 80002f0:	409c      	lsls	r4, r3
 80002f2:	fa05 f303 	lsl.w	r3, r5, r3
 80002f6:	3b01      	subs	r3, #1
 80002f8:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002fa:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80002fc:	ea42 0204 	orr.w	r2, r2, r4
 8000300:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000304:	bfaf      	iteee	ge
 8000306:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030a:	f000 000f 	andlt.w	r0, r0, #15
 800030e:	4b06      	ldrlt	r3, [pc, #24]	; (8000328 <HAL_NVIC_SetPriority+0x64>)
 8000310:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000312:	bfa5      	ittet	ge
 8000314:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000318:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	bf00      	nop
 8000324:	e000ed00 	.word	0xe000ed00
 8000328:	e000ed14 	.word	0xe000ed14

0800032c <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800032c:	0942      	lsrs	r2, r0, #5
 800032e:	2301      	movs	r3, #1
 8000330:	f000 001f 	and.w	r0, r0, #31
 8000334:	fa03 f000 	lsl.w	r0, r3, r0
 8000338:	4b01      	ldr	r3, [pc, #4]	; (8000340 <HAL_NVIC_EnableIRQ+0x14>)
 800033a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800033e:	4770      	bx	lr
 8000340:	e000e100 	.word	0xe000e100

08000344 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000344:	3801      	subs	r0, #1
 8000346:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800034a:	d20a      	bcs.n	8000362 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800034e:	4a07      	ldr	r2, [pc, #28]	; (800036c <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000350:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000352:	21f0      	movs	r1, #240	; 0xf0
 8000354:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000358:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800035a:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800035c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000362:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	e000e010 	.word	0xe000e010
 800036c:	e000ed00 	.word	0xe000ed00

08000370 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000370:	4b04      	ldr	r3, [pc, #16]	; (8000384 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000372:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000374:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000376:	bf0c      	ite	eq
 8000378:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800037c:	f022 0204 	bicne.w	r2, r2, #4
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	4770      	bx	lr
 8000384:	e000e010 	.word	0xe000e010

08000388 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000388:	4770      	bx	lr

0800038a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800038a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800038c:	f7ff fffc 	bl	8000388 <HAL_SYSTICK_Callback>
 8000390:	bd08      	pop	{r3, pc}
	...

08000394 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000398:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8000520 <HAL_GPIO_Init+0x18c>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800039c:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800039e:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8000524 <HAL_GPIO_Init+0x190>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003a2:	b085      	sub	sp, #20
 80003a4:	464c      	mov	r4, r9
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80003a6:	9301      	str	r3, [sp, #4]
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00;
 80003a8:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80003aa:	9a01      	ldr	r2, [sp, #4]
 80003ac:	40da      	lsrs	r2, r3
 80003ae:	f000 80b1 	beq.w	8000514 <HAL_GPIO_Init+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80003b2:	2201      	movs	r2, #1
 80003b4:	fa02 fa03 	lsl.w	sl, r2, r3

    if(iocurrent)
 80003b8:	9a01      	ldr	r2, [sp, #4]
 80003ba:	ea12 060a 	ands.w	r6, r2, sl
 80003be:	f000 80a7 	beq.w	8000510 <HAL_GPIO_Init+0x17c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80003c2:	684a      	ldr	r2, [r1, #4]
 80003c4:	f022 0e10 	bic.w	lr, r2, #16
 80003c8:	f1be 0f02 	cmp.w	lr, #2
 80003cc:	d114      	bne.n	80003f8 <HAL_GPIO_Init+0x64>
 80003ce:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80003d2:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80003d6:	f003 0b07 	and.w	fp, r3, #7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80003da:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80003de:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80003e2:	250f      	movs	r5, #15
 80003e4:	fa05 f50b 	lsl.w	r5, r5, fp
 80003e8:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80003ec:	690f      	ldr	r7, [r1, #16]
 80003ee:	fa07 f70b 	lsl.w	r7, r7, fp
 80003f2:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3] = temp;
 80003f4:	f8cc 7020 	str.w	r7, [ip, #32]
 80003f8:	ea4f 0b43 	mov.w	fp, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80003fc:	2703      	movs	r7, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80003fe:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000400:	fa07 fc0b 	lsl.w	ip, r7, fp
 8000404:	ea6f 0c0c 	mvn.w	ip, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000408:	4017      	ands	r7, r2
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800040a:	ea05 050c 	and.w	r5, r5, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800040e:	fa07 f70b 	lsl.w	r7, r7, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000412:	f10e 3eff 	add.w	lr, lr, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000416:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000418:	f1be 0f01 	cmp.w	lr, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 800041c:	6005      	str	r5, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800041e:	d810      	bhi.n	8000442 <HAL_GPIO_Init+0xae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000420:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
 8000422:	68cf      	ldr	r7, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000424:	ea0c 0505 	and.w	r5, ip, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000428:	fa07 f70b 	lsl.w	r7, r7, fp
 800042c:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 800042e:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000430:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000432:	ea25 0a0a 	bic.w	sl, r5, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000436:	f3c2 1500 	ubfx	r5, r2, #4, #1
 800043a:	409d      	lsls	r5, r3
 800043c:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->OTYPER = temp;
 8000440:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000442:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000444:	ea0c 0c05 	and.w	ip, ip, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000448:	688d      	ldr	r5, [r1, #8]
 800044a:	fa05 f50b 	lsl.w	r5, r5, fp
 800044e:	ea45 050c 	orr.w	r5, r5, ip
      GPIOx->PUPDR = temp;
 8000452:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000454:	00d5      	lsls	r5, r2, #3
 8000456:	d55b      	bpl.n	8000510 <HAL_GPIO_Init+0x17c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000458:	f8d8 5018 	ldr.w	r5, [r8, #24]
 800045c:	f045 0501 	orr.w	r5, r5, #1
 8000460:	f8c8 5018 	str.w	r5, [r8, #24]
 8000464:	f8d8 5018 	ldr.w	r5, [r8, #24]
 8000468:	f023 0e03 	bic.w	lr, r3, #3
 800046c:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8000470:	f005 0501 	and.w	r5, r5, #1
 8000474:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8000478:	9503      	str	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800047a:	f003 0c03 	and.w	ip, r3, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047e:	9d03      	ldr	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000480:	f8de 5008 	ldr.w	r5, [lr, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000484:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000488:	270f      	movs	r7, #15
 800048a:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800048e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000492:	ea25 0507 	bic.w	r5, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000496:	d011      	beq.n	80004bc <HAL_GPIO_Init+0x128>
 8000498:	4f20      	ldr	r7, [pc, #128]	; (800051c <HAL_GPIO_Init+0x188>)
 800049a:	42b8      	cmp	r0, r7
 800049c:	d010      	beq.n	80004c0 <HAL_GPIO_Init+0x12c>
 800049e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80004a2:	42b8      	cmp	r0, r7
 80004a4:	d00e      	beq.n	80004c4 <HAL_GPIO_Init+0x130>
 80004a6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80004aa:	42b8      	cmp	r0, r7
 80004ac:	d00c      	beq.n	80004c8 <HAL_GPIO_Init+0x134>
 80004ae:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80004b2:	42b8      	cmp	r0, r7
 80004b4:	bf14      	ite	ne
 80004b6:	2705      	movne	r7, #5
 80004b8:	2704      	moveq	r7, #4
 80004ba:	e006      	b.n	80004ca <HAL_GPIO_Init+0x136>
 80004bc:	2700      	movs	r7, #0
 80004be:	e004      	b.n	80004ca <HAL_GPIO_Init+0x136>
 80004c0:	2701      	movs	r7, #1
 80004c2:	e002      	b.n	80004ca <HAL_GPIO_Init+0x136>
 80004c4:	2702      	movs	r7, #2
 80004c6:	e000      	b.n	80004ca <HAL_GPIO_Init+0x136>
 80004c8:	2703      	movs	r7, #3
 80004ca:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ce:	ea4c 0505 	orr.w	r5, ip, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 80004d2:	f8ce 5008 	str.w	r5, [lr, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80004d6:	f8d9 5000 	ldr.w	r5, [r9]
        temp &= ~((uint32_t)iocurrent);
 80004da:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004dc:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 80004e0:	bf0c      	ite	eq
 80004e2:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 80004e4:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80004e6:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 80004e8:	6865      	ldr	r5, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004ea:	f412 3f00 	tst.w	r2, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 80004ee:	bf0c      	ite	eq
 80004f0:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 80004f2:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80004f4:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80004f6:	68a5      	ldr	r5, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004f8:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 80004fc:	bf0c      	ite	eq
 80004fe:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8000500:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000502:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000504:	68e5      	ldr	r5, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000506:	0292      	lsls	r2, r2, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8000508:	bf54      	ite	pl
 800050a:	403d      	andpl	r5, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 800050c:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800050e:	60e5      	str	r5, [r4, #12]
      }
    }
    
    position++;
 8000510:	3301      	adds	r3, #1
 8000512:	e74a      	b.n	80003aa <HAL_GPIO_Init+0x16>
  }
}
 8000514:	b005      	add	sp, #20
 8000516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800051a:	bf00      	nop
 800051c:	48000400 	.word	0x48000400
 8000520:	40010400 	.word	0x40010400
 8000524:	40021000 	.word	0x40021000

08000528 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000528:	4770      	bx	lr
	...

0800052c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800052c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800052e:	4b04      	ldr	r3, [pc, #16]	; (8000540 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000530:	6959      	ldr	r1, [r3, #20]
 8000532:	4201      	tst	r1, r0
 8000534:	d002      	beq.n	800053c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000536:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000538:	f7ff fff6 	bl	8000528 <HAL_GPIO_EXTI_Callback>
 800053c:	bd08      	pop	{r3, pc}
 800053e:	bf00      	nop
 8000540:	40010400 	.word	0x40010400

08000544 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000544:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000546:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800054a:	07de      	lsls	r6, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800054c:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800054e:	d403      	bmi.n	8000558 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000550:	682b      	ldr	r3, [r5, #0]
 8000552:	079c      	lsls	r4, r3, #30
 8000554:	d471      	bmi.n	800063a <HAL_RCC_OscConfig+0xf6>
 8000556:	e0f0      	b.n	800073a <HAL_RCC_OscConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000558:	4cb3      	ldr	r4, [pc, #716]	; (8000828 <HAL_RCC_OscConfig+0x2e4>)
 800055a:	6863      	ldr	r3, [r4, #4]
 800055c:	f003 030c 	and.w	r3, r3, #12
 8000560:	2b04      	cmp	r3, #4
 8000562:	d007      	beq.n	8000574 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000564:	6863      	ldr	r3, [r4, #4]
 8000566:	f003 030c 	and.w	r3, r3, #12
 800056a:	2b08      	cmp	r3, #8
 800056c:	d116      	bne.n	800059c <HAL_RCC_OscConfig+0x58>
 800056e:	6863      	ldr	r3, [r4, #4]
 8000570:	03d8      	lsls	r0, r3, #15
 8000572:	d513      	bpl.n	800059c <HAL_RCC_OscConfig+0x58>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000574:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000578:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800057c:	6822      	ldr	r2, [r4, #0]
 800057e:	fa93 f3a3 	rbit	r3, r3
 8000582:	fab3 f383 	clz	r3, r3
 8000586:	f003 031f 	and.w	r3, r3, #31
 800058a:	fa22 f303 	lsr.w	r3, r2, r3
 800058e:	07d9      	lsls	r1, r3, #31
 8000590:	d5de      	bpl.n	8000550 <HAL_RCC_OscConfig+0xc>
 8000592:	686b      	ldr	r3, [r5, #4]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d1db      	bne.n	8000550 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8000598:	2001      	movs	r0, #1
 800059a:	e233      	b.n	8000a04 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800059c:	686b      	ldr	r3, [r5, #4]
 800059e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005a2:	d007      	beq.n	80005b4 <HAL_RCC_OscConfig+0x70>
 80005a4:	6822      	ldr	r2, [r4, #0]
 80005a6:	b14b      	cbz	r3, 80005bc <HAL_RCC_OscConfig+0x78>
 80005a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80005ac:	d106      	bne.n	80005bc <HAL_RCC_OscConfig+0x78>
 80005ae:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80005b2:	6022      	str	r2, [r4, #0]
 80005b4:	6822      	ldr	r2, [r4, #0]
 80005b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80005ba:	e005      	b.n	80005c8 <HAL_RCC_OscConfig+0x84>
 80005bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005c0:	6022      	str	r2, [r4, #0]
 80005c2:	6822      	ldr	r2, [r4, #0]
 80005c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005c8:	6022      	str	r2, [r4, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80005ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80005cc:	f022 010f 	bic.w	r1, r2, #15
 80005d0:	68aa      	ldr	r2, [r5, #8]
 80005d2:	430a      	orrs	r2, r1
 80005d4:	62e2      	str	r2, [r4, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80005d6:	b1c3      	cbz	r3, 800060a <HAL_RCC_OscConfig+0xc6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80005d8:	f7ff fe4e 	bl	8000278 <HAL_GetTick>
 80005dc:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80005e0:	4607      	mov	r7, r0
 80005e2:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005e6:	6822      	ldr	r2, [r4, #0]
 80005e8:	fa96 f3a6 	rbit	r3, r6
 80005ec:	fab3 f383 	clz	r3, r3
 80005f0:	f003 031f 	and.w	r3, r3, #31
 80005f4:	fa22 f303 	lsr.w	r3, r2, r3
 80005f8:	07da      	lsls	r2, r3, #31
 80005fa:	d4a9      	bmi.n	8000550 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005fc:	f7ff fe3c 	bl	8000278 <HAL_GetTick>
 8000600:	1bc0      	subs	r0, r0, r7
 8000602:	2864      	cmp	r0, #100	; 0x64
 8000604:	d9ed      	bls.n	80005e2 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8000606:	2003      	movs	r0, #3
 8000608:	e1fc      	b.n	8000a04 <HAL_RCC_OscConfig+0x4c0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800060a:	f7ff fe35 	bl	8000278 <HAL_GetTick>
 800060e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000612:	4607      	mov	r7, r0
 8000614:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000618:	6822      	ldr	r2, [r4, #0]
 800061a:	fa96 f3a6 	rbit	r3, r6
 800061e:	fab3 f383 	clz	r3, r3
 8000622:	f003 031f 	and.w	r3, r3, #31
 8000626:	fa22 f303 	lsr.w	r3, r2, r3
 800062a:	07db      	lsls	r3, r3, #31
 800062c:	d590      	bpl.n	8000550 <HAL_RCC_OscConfig+0xc>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800062e:	f7ff fe23 	bl	8000278 <HAL_GetTick>
 8000632:	1bc0      	subs	r0, r0, r7
 8000634:	2864      	cmp	r0, #100	; 0x64
 8000636:	d9ed      	bls.n	8000614 <HAL_RCC_OscConfig+0xd0>
 8000638:	e7e5      	b.n	8000606 <HAL_RCC_OscConfig+0xc2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800063a:	4c7b      	ldr	r4, [pc, #492]	; (8000828 <HAL_RCC_OscConfig+0x2e4>)
 800063c:	6863      	ldr	r3, [r4, #4]
 800063e:	f013 0f0c 	tst.w	r3, #12
 8000642:	d007      	beq.n	8000654 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000644:	6863      	ldr	r3, [r4, #4]
 8000646:	f003 030c 	and.w	r3, r3, #12
 800064a:	2b08      	cmp	r3, #8
 800064c:	d121      	bne.n	8000692 <HAL_RCC_OscConfig+0x14e>
 800064e:	6863      	ldr	r3, [r4, #4]
 8000650:	03d8      	lsls	r0, r3, #15
 8000652:	d41e      	bmi.n	8000692 <HAL_RCC_OscConfig+0x14e>
 8000654:	2302      	movs	r3, #2
 8000656:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800065a:	6822      	ldr	r2, [r4, #0]
 800065c:	fa93 f3a3 	rbit	r3, r3
 8000660:	fab3 f383 	clz	r3, r3
 8000664:	f003 031f 	and.w	r3, r3, #31
 8000668:	fa22 f303 	lsr.w	r3, r2, r3
 800066c:	07d9      	lsls	r1, r3, #31
 800066e:	d502      	bpl.n	8000676 <HAL_RCC_OscConfig+0x132>
 8000670:	692b      	ldr	r3, [r5, #16]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d190      	bne.n	8000598 <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000676:	6823      	ldr	r3, [r4, #0]
 8000678:	22f8      	movs	r2, #248	; 0xf8
 800067a:	fa92 f2a2 	rbit	r2, r2
 800067e:	6969      	ldr	r1, [r5, #20]
 8000680:	fab2 f282 	clz	r2, r2
 8000684:	fa01 f202 	lsl.w	r2, r1, r2
 8000688:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800068c:	4313      	orrs	r3, r2
 800068e:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000690:	e053      	b.n	800073a <HAL_RCC_OscConfig+0x1f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000692:	692a      	ldr	r2, [r5, #16]
 8000694:	2301      	movs	r3, #1
 8000696:	b37a      	cbz	r2, 80006f8 <HAL_RCC_OscConfig+0x1b4>
 8000698:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800069c:	fab2 f282 	clz	r2, r2
 80006a0:	0092      	lsls	r2, r2, #2
 80006a2:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 80006a6:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 80006aa:	2602      	movs	r6, #2
 80006ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80006ae:	f7ff fde3 	bl	8000278 <HAL_GetTick>
 80006b2:	4607      	mov	r7, r0
 80006b4:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006b8:	485b      	ldr	r0, [pc, #364]	; (8000828 <HAL_RCC_OscConfig+0x2e4>)
 80006ba:	6822      	ldr	r2, [r4, #0]
 80006bc:	fa96 f3a6 	rbit	r3, r6
 80006c0:	fab3 f383 	clz	r3, r3
 80006c4:	f003 031f 	and.w	r3, r3, #31
 80006c8:	fa22 f303 	lsr.w	r3, r2, r3
 80006cc:	07da      	lsls	r2, r3, #31
 80006ce:	d405      	bmi.n	80006dc <HAL_RCC_OscConfig+0x198>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006d0:	f7ff fdd2 	bl	8000278 <HAL_GetTick>
 80006d4:	1bc0      	subs	r0, r0, r7
 80006d6:	2802      	cmp	r0, #2
 80006d8:	d9ec      	bls.n	80006b4 <HAL_RCC_OscConfig+0x170>
 80006da:	e794      	b.n	8000606 <HAL_RCC_OscConfig+0xc2>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006dc:	6803      	ldr	r3, [r0, #0]
 80006de:	22f8      	movs	r2, #248	; 0xf8
 80006e0:	fa92 f2a2 	rbit	r2, r2
 80006e4:	6969      	ldr	r1, [r5, #20]
 80006e6:	fab2 f282 	clz	r2, r2
 80006ea:	fa01 f202 	lsl.w	r2, r1, r2
 80006ee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80006f2:	4313      	orrs	r3, r2
 80006f4:	6003      	str	r3, [r0, #0]
 80006f6:	e020      	b.n	800073a <HAL_RCC_OscConfig+0x1f6>
 80006f8:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80006fc:	fab3 f383 	clz	r3, r3
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000706:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800070a:	2602      	movs	r6, #2
 800070c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800070e:	f7ff fdb3 	bl	8000278 <HAL_GetTick>
 8000712:	4607      	mov	r7, r0
 8000714:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000718:	6822      	ldr	r2, [r4, #0]
 800071a:	fa96 f3a6 	rbit	r3, r6
 800071e:	fab3 f383 	clz	r3, r3
 8000722:	f003 031f 	and.w	r3, r3, #31
 8000726:	fa22 f303 	lsr.w	r3, r2, r3
 800072a:	07db      	lsls	r3, r3, #31
 800072c:	d505      	bpl.n	800073a <HAL_RCC_OscConfig+0x1f6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800072e:	f7ff fda3 	bl	8000278 <HAL_GetTick>
 8000732:	1bc0      	subs	r0, r0, r7
 8000734:	2802      	cmp	r0, #2
 8000736:	d9ed      	bls.n	8000714 <HAL_RCC_OscConfig+0x1d0>
 8000738:	e765      	b.n	8000606 <HAL_RCC_OscConfig+0xc2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800073a:	682b      	ldr	r3, [r5, #0]
 800073c:	0718      	lsls	r0, r3, #28
 800073e:	d403      	bmi.n	8000748 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000740:	682b      	ldr	r3, [r5, #0]
 8000742:	0759      	lsls	r1, r3, #29
 8000744:	d447      	bmi.n	80007d6 <HAL_RCC_OscConfig+0x292>
 8000746:	e0da      	b.n	80008fe <HAL_RCC_OscConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000748:	69aa      	ldr	r2, [r5, #24]
 800074a:	4c37      	ldr	r4, [pc, #220]	; (8000828 <HAL_RCC_OscConfig+0x2e4>)
 800074c:	4937      	ldr	r1, [pc, #220]	; (800082c <HAL_RCC_OscConfig+0x2e8>)
 800074e:	2301      	movs	r3, #1
 8000750:	b302      	cbz	r2, 8000794 <HAL_RCC_OscConfig+0x250>
 8000752:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000756:	fab2 f282 	clz	r2, r2
 800075a:	2602      	movs	r6, #2
 800075c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000760:	f7ff fd8a 	bl	8000278 <HAL_GetTick>
 8000764:	4607      	mov	r7, r0
 8000766:	fa96 f3a6 	rbit	r3, r6
 800076a:	fa96 f3a6 	rbit	r3, r6
 800076e:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000772:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000774:	fa96 f3a6 	rbit	r3, r6
 8000778:	fab3 f383 	clz	r3, r3
 800077c:	f003 031f 	and.w	r3, r3, #31
 8000780:	fa22 f303 	lsr.w	r3, r2, r3
 8000784:	07da      	lsls	r2, r3, #31
 8000786:	d4db      	bmi.n	8000740 <HAL_RCC_OscConfig+0x1fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000788:	f7ff fd76 	bl	8000278 <HAL_GetTick>
 800078c:	1bc0      	subs	r0, r0, r7
 800078e:	2802      	cmp	r0, #2
 8000790:	d9e9      	bls.n	8000766 <HAL_RCC_OscConfig+0x222>
 8000792:	e738      	b.n	8000606 <HAL_RCC_OscConfig+0xc2>
 8000794:	fa93 f3a3 	rbit	r3, r3
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000798:	fab3 f383 	clz	r3, r3
 800079c:	2602      	movs	r6, #2
 800079e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80007a2:	f7ff fd69 	bl	8000278 <HAL_GetTick>
 80007a6:	4607      	mov	r7, r0
 80007a8:	fa96 f3a6 	rbit	r3, r6
 80007ac:	fa96 f3a6 	rbit	r3, r6
 80007b0:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007b6:	fa96 f3a6 	rbit	r3, r6
 80007ba:	fab3 f383 	clz	r3, r3
 80007be:	f003 031f 	and.w	r3, r3, #31
 80007c2:	fa22 f303 	lsr.w	r3, r2, r3
 80007c6:	07db      	lsls	r3, r3, #31
 80007c8:	d5ba      	bpl.n	8000740 <HAL_RCC_OscConfig+0x1fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007ca:	f7ff fd55 	bl	8000278 <HAL_GetTick>
 80007ce:	1bc0      	subs	r0, r0, r7
 80007d0:	2802      	cmp	r0, #2
 80007d2:	d9e9      	bls.n	80007a8 <HAL_RCC_OscConfig+0x264>
 80007d4:	e717      	b.n	8000606 <HAL_RCC_OscConfig+0xc2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007d6:	4c14      	ldr	r4, [pc, #80]	; (8000828 <HAL_RCC_OscConfig+0x2e4>)
 80007d8:	69e3      	ldr	r3, [r4, #28]
 80007da:	00de      	lsls	r6, r3, #3
 80007dc:	d40a      	bmi.n	80007f4 <HAL_RCC_OscConfig+0x2b0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	69e3      	ldr	r3, [r4, #28]
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e4:	61e3      	str	r3, [r4, #28]
 80007e6:	69e3      	ldr	r3, [r4, #28]
 80007e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ec:	9301      	str	r3, [sp, #4]
 80007ee:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80007f0:	2701      	movs	r7, #1
 80007f2:	e000      	b.n	80007f6 <HAL_RCC_OscConfig+0x2b2>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 80007f4:	2700      	movs	r7, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007f6:	4e0e      	ldr	r6, [pc, #56]	; (8000830 <HAL_RCC_OscConfig+0x2ec>)
 80007f8:	6833      	ldr	r3, [r6, #0]
 80007fa:	05d8      	lsls	r0, r3, #23
 80007fc:	d503      	bpl.n	8000806 <HAL_RCC_OscConfig+0x2c2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007fe:	68eb      	ldr	r3, [r5, #12]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d117      	bne.n	8000834 <HAL_RCC_OscConfig+0x2f0>
 8000804:	e02d      	b.n	8000862 <HAL_RCC_OscConfig+0x31e>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000806:	6833      	ldr	r3, [r6, #0]
 8000808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800080c:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800080e:	f7ff fd33 	bl	8000278 <HAL_GetTick>
 8000812:	4680      	mov	r8, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000814:	6833      	ldr	r3, [r6, #0]
 8000816:	05d9      	lsls	r1, r3, #23
 8000818:	d4f1      	bmi.n	80007fe <HAL_RCC_OscConfig+0x2ba>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800081a:	f7ff fd2d 	bl	8000278 <HAL_GetTick>
 800081e:	ebc8 0000 	rsb	r0, r8, r0
 8000822:	2864      	cmp	r0, #100	; 0x64
 8000824:	d9f6      	bls.n	8000814 <HAL_RCC_OscConfig+0x2d0>
 8000826:	e6ee      	b.n	8000606 <HAL_RCC_OscConfig+0xc2>
 8000828:	40021000 	.word	0x40021000
 800082c:	42420480 	.word	0x42420480
 8000830:	40007000 	.word	0x40007000
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000834:	b97b      	cbnz	r3, 8000856 <HAL_RCC_OscConfig+0x312>
 8000836:	6a23      	ldr	r3, [r4, #32]
 8000838:	f023 0301 	bic.w	r3, r3, #1
 800083c:	6223      	str	r3, [r4, #32]
 800083e:	6a23      	ldr	r3, [r4, #32]
 8000840:	f023 0304 	bic.w	r3, r3, #4
 8000844:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000846:	f7ff fd17 	bl	8000278 <HAL_GetTick>
 800084a:	2602      	movs	r6, #2
 800084c:	4681      	mov	r9, r0
 800084e:	46b0      	mov	r8, r6
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000850:	f241 3a88 	movw	sl, #5000	; 0x1388
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000854:	e039      	b.n	80008ca <HAL_RCC_OscConfig+0x386>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000856:	2b05      	cmp	r3, #5
 8000858:	6a23      	ldr	r3, [r4, #32]
 800085a:	d106      	bne.n	800086a <HAL_RCC_OscConfig+0x326>
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6223      	str	r3, [r4, #32]
 8000862:	6a23      	ldr	r3, [r4, #32]
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	e005      	b.n	8000876 <HAL_RCC_OscConfig+0x332>
 800086a:	f023 0301 	bic.w	r3, r3, #1
 800086e:	6223      	str	r3, [r4, #32]
 8000870:	6a23      	ldr	r3, [r4, #32]
 8000872:	f023 0304 	bic.w	r3, r3, #4
 8000876:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000878:	f7ff fcfe 	bl	8000278 <HAL_GetTick>
 800087c:	2602      	movs	r6, #2
 800087e:	4682      	mov	sl, r0
 8000880:	46b1      	mov	r9, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000882:	f241 3888 	movw	r8, #5000	; 0x1388
 8000886:	fa96 f3a6 	rbit	r3, r6
 800088a:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800088e:	b10b      	cbz	r3, 8000894 <HAL_RCC_OscConfig+0x350>
 8000890:	6a22      	ldr	r2, [r4, #32]
 8000892:	e002      	b.n	800089a <HAL_RCC_OscConfig+0x356>
 8000894:	fa96 f3a6 	rbit	r3, r6
 8000898:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800089a:	fa99 f3a9 	rbit	r3, r9
 800089e:	fab3 f383 	clz	r3, r3
 80008a2:	f003 031f 	and.w	r3, r3, #31
 80008a6:	fa22 f303 	lsr.w	r3, r2, r3
 80008aa:	07da      	lsls	r2, r3, #31
 80008ac:	d41d      	bmi.n	80008ea <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008ae:	f7ff fce3 	bl	8000278 <HAL_GetTick>
 80008b2:	ebca 0000 	rsb	r0, sl, r0
 80008b6:	4540      	cmp	r0, r8
 80008b8:	d9e5      	bls.n	8000886 <HAL_RCC_OscConfig+0x342>
 80008ba:	e6a4      	b.n	8000606 <HAL_RCC_OscConfig+0xc2>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008bc:	f7ff fcdc 	bl	8000278 <HAL_GetTick>
 80008c0:	ebc9 0000 	rsb	r0, r9, r0
 80008c4:	4550      	cmp	r0, sl
 80008c6:	f63f ae9e 	bhi.w	8000606 <HAL_RCC_OscConfig+0xc2>
 80008ca:	fa96 f3a6 	rbit	r3, r6
 80008ce:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008d2:	b183      	cbz	r3, 80008f6 <HAL_RCC_OscConfig+0x3b2>
 80008d4:	6a22      	ldr	r2, [r4, #32]
 80008d6:	fa98 f3a8 	rbit	r3, r8
 80008da:	fab3 f383 	clz	r3, r3
 80008de:	f003 031f 	and.w	r3, r3, #31
 80008e2:	fa22 f303 	lsr.w	r3, r2, r3
 80008e6:	07db      	lsls	r3, r3, #31
 80008e8:	d4e8      	bmi.n	80008bc <HAL_RCC_OscConfig+0x378>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80008ea:	b147      	cbz	r7, 80008fe <HAL_RCC_OscConfig+0x3ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80008ec:	69e3      	ldr	r3, [r4, #28]
 80008ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80008f2:	61e3      	str	r3, [r4, #28]
 80008f4:	e003      	b.n	80008fe <HAL_RCC_OscConfig+0x3ba>
 80008f6:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008fc:	e7eb      	b.n	80008d6 <HAL_RCC_OscConfig+0x392>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008fe:	69ea      	ldr	r2, [r5, #28]
 8000900:	b90a      	cbnz	r2, 8000906 <HAL_RCC_OscConfig+0x3c2>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000902:	2000      	movs	r0, #0
 8000904:	e07e      	b.n	8000a04 <HAL_RCC_OscConfig+0x4c0>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000906:	4c41      	ldr	r4, [pc, #260]	; (8000a0c <HAL_RCC_OscConfig+0x4c8>)
 8000908:	6863      	ldr	r3, [r4, #4]
 800090a:	f003 030c 	and.w	r3, r3, #12
 800090e:	2b08      	cmp	r3, #8
 8000910:	f43f ae42 	beq.w	8000598 <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000914:	2a02      	cmp	r2, #2
 8000916:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800091a:	d150      	bne.n	80009be <HAL_RCC_OscConfig+0x47a>
 800091c:	fa93 f3a3 	rbit	r3, r3
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000920:	fab3 f383 	clz	r3, r3
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800092a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000932:	f7ff fca1 	bl	8000278 <HAL_GetTick>
 8000936:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800093a:	4607      	mov	r7, r0
 800093c:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000940:	4932      	ldr	r1, [pc, #200]	; (8000a0c <HAL_RCC_OscConfig+0x4c8>)
 8000942:	6822      	ldr	r2, [r4, #0]
 8000944:	fa96 f3a6 	rbit	r3, r6
 8000948:	fab3 f383 	clz	r3, r3
 800094c:	f003 031f 	and.w	r3, r3, #31
 8000950:	fa22 f303 	lsr.w	r3, r2, r3
 8000954:	07d8      	lsls	r0, r3, #31
 8000956:	d505      	bpl.n	8000964 <HAL_RCC_OscConfig+0x420>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000958:	f7ff fc8e 	bl	8000278 <HAL_GetTick>
 800095c:	1bc0      	subs	r0, r0, r7
 800095e:	2802      	cmp	r0, #2
 8000960:	d9ec      	bls.n	800093c <HAL_RCC_OscConfig+0x3f8>
 8000962:	e650      	b.n	8000606 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000964:	684b      	ldr	r3, [r1, #4]
 8000966:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8000968:	6a2a      	ldr	r2, [r5, #32]
 800096a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800096e:	4302      	orrs	r2, r0
 8000970:	4313      	orrs	r3, r2
 8000972:	604b      	str	r3, [r1, #4]
 8000974:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000978:	fa93 f3a3 	rbit	r3, r3
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800097c:	fab3 f383 	clz	r3, r3
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000986:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800098a:	2201      	movs	r2, #1
 800098c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800098e:	f7ff fc73 	bl	8000278 <HAL_GetTick>
 8000992:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000996:	4606      	mov	r6, r0
 8000998:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800099c:	6822      	ldr	r2, [r4, #0]
 800099e:	fa95 f3a5 	rbit	r3, r5
 80009a2:	fab3 f383 	clz	r3, r3
 80009a6:	f003 031f 	and.w	r3, r3, #31
 80009aa:	fa22 f303 	lsr.w	r3, r2, r3
 80009ae:	07da      	lsls	r2, r3, #31
 80009b0:	d4a7      	bmi.n	8000902 <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009b2:	f7ff fc61 	bl	8000278 <HAL_GetTick>
 80009b6:	1b80      	subs	r0, r0, r6
 80009b8:	2802      	cmp	r0, #2
 80009ba:	d9ed      	bls.n	8000998 <HAL_RCC_OscConfig+0x454>
 80009bc:	e623      	b.n	8000606 <HAL_RCC_OscConfig+0xc2>
 80009be:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80009c2:	fab3 f383 	clz	r3, r3
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80009cc:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009d4:	f7ff fc50 	bl	8000278 <HAL_GetTick>
 80009d8:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80009dc:	4606      	mov	r6, r0
 80009de:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009e2:	6822      	ldr	r2, [r4, #0]
 80009e4:	fa95 f3a5 	rbit	r3, r5
 80009e8:	fab3 f383 	clz	r3, r3
 80009ec:	f003 031f 	and.w	r3, r3, #31
 80009f0:	fa22 f303 	lsr.w	r3, r2, r3
 80009f4:	07db      	lsls	r3, r3, #31
 80009f6:	d584      	bpl.n	8000902 <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009f8:	f7ff fc3e 	bl	8000278 <HAL_GetTick>
 80009fc:	1b80      	subs	r0, r0, r6
 80009fe:	2802      	cmp	r0, #2
 8000a00:	d9ed      	bls.n	80009de <HAL_RCC_OscConfig+0x49a>
 8000a02:	e600      	b.n	8000606 <HAL_RCC_OscConfig+0xc2>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000a04:	b002      	add	sp, #8
 8000a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40021000 	.word	0x40021000

08000a10 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8000a10:	4913      	ldr	r1, [pc, #76]	; (8000a60 <HAL_RCC_GetSysClockFreq+0x50>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000a12:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8000a14:	684c      	ldr	r4, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000a16:	f004 030c 	and.w	r3, r4, #12
 8000a1a:	2b08      	cmp	r3, #8
 8000a1c:	d11e      	bne.n	8000a5c <HAL_RCC_GetSysClockFreq+0x4c>
 8000a1e:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000a22:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a26:	f404 1270 	and.w	r2, r4, #3932160	; 0x3c0000
 8000a2a:	fab3 f383 	clz	r3, r3
 8000a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8000a32:	4a0c      	ldr	r2, [pc, #48]	; (8000a64 <HAL_RCC_GetSysClockFreq+0x54>)
 8000a34:	5cd3      	ldrb	r3, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000a36:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8000a38:	210f      	movs	r1, #15
 8000a3a:	fa91 f1a1 	rbit	r1, r1
 8000a3e:	fab1 f181 	clz	r1, r1
 8000a42:	f002 020f 	and.w	r2, r2, #15
 8000a46:	40ca      	lsrs	r2, r1
 8000a48:	4907      	ldr	r1, [pc, #28]	; (8000a68 <HAL_RCC_GetSysClockFreq+0x58>)
 8000a4a:	5c88      	ldrb	r0, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000a4c:	03e2      	lsls	r2, r4, #15
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8000a4e:	bf52      	itee	pl
 8000a50:	4806      	ldrpl	r0, [pc, #24]	; (8000a6c <HAL_RCC_GetSysClockFreq+0x5c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000a52:	4a07      	ldrmi	r2, [pc, #28]	; (8000a70 <HAL_RCC_GetSysClockFreq+0x60>)
 8000a54:	fbb2 f0f0 	udivmi	r0, r2, r0
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8000a58:	4358      	muls	r0, r3
 8000a5a:	bd10      	pop	{r4, pc}
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a5e:	bd10      	pop	{r4, pc}
 8000a60:	40021000 	.word	0x40021000
 8000a64:	08001cf8 	.word	0x08001cf8
 8000a68:	08001ce8 	.word	0x08001ce8
 8000a6c:	003d0900 	.word	0x003d0900
 8000a70:	007a1200 	.word	0x007a1200

08000a74 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a74:	4a54      	ldr	r2, [pc, #336]	; (8000bc8 <HAL_RCC_ClockConfig+0x154>)
 8000a76:	6813      	ldr	r3, [r2, #0]
 8000a78:	f003 0307 	and.w	r3, r3, #7
 8000a7c:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a82:	4606      	mov	r6, r0
 8000a84:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a86:	d30a      	bcc.n	8000a9e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a88:	6831      	ldr	r1, [r6, #0]
 8000a8a:	078c      	lsls	r4, r1, #30
 8000a8c:	d514      	bpl.n	8000ab8 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a8e:	484f      	ldr	r0, [pc, #316]	; (8000bcc <HAL_RCC_ClockConfig+0x158>)
 8000a90:	6843      	ldr	r3, [r0, #4]
 8000a92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a96:	68b3      	ldr	r3, [r6, #8]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	6043      	str	r3, [r0, #4]
 8000a9c:	e00c      	b.n	8000ab8 <HAL_RCC_ClockConfig+0x44>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a9e:	6813      	ldr	r3, [r2, #0]
 8000aa0:	f023 0307 	bic.w	r3, r3, #7
 8000aa4:	430b      	orrs	r3, r1
 8000aa6:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000aa8:	6813      	ldr	r3, [r2, #0]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	4299      	cmp	r1, r3
 8000ab0:	d0ea      	beq.n	8000a88 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ab8:	07c8      	lsls	r0, r1, #31
 8000aba:	d406      	bmi.n	8000aca <HAL_RCC_ClockConfig+0x56>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000abc:	4a42      	ldr	r2, [pc, #264]	; (8000bc8 <HAL_RCC_ClockConfig+0x154>)
 8000abe:	6813      	ldr	r3, [r2, #0]
 8000ac0:	f003 0307 	and.w	r3, r3, #7
 8000ac4:	429d      	cmp	r5, r3
 8000ac6:	d34a      	bcc.n	8000b5e <HAL_RCC_ClockConfig+0xea>
 8000ac8:	e053      	b.n	8000b72 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000aca:	6872      	ldr	r2, [r6, #4]
 8000acc:	4c3f      	ldr	r4, [pc, #252]	; (8000bcc <HAL_RCC_ClockConfig+0x158>)
 8000ace:	2a01      	cmp	r2, #1
 8000ad0:	d102      	bne.n	8000ad8 <HAL_RCC_ClockConfig+0x64>
 8000ad2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ad6:	e004      	b.n	8000ae2 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ad8:	2a02      	cmp	r2, #2
 8000ada:	bf0c      	ite	eq
 8000adc:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000ae0:	2302      	movne	r3, #2
 8000ae2:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ae6:	6821      	ldr	r1, [r4, #0]
 8000ae8:	fa93 f3a3 	rbit	r3, r3
 8000aec:	fab3 f383 	clz	r3, r3
 8000af0:	f003 031f 	and.w	r3, r3, #31
 8000af4:	fa21 f303 	lsr.w	r3, r1, r3
 8000af8:	07d9      	lsls	r1, r3, #31
 8000afa:	d5da      	bpl.n	8000ab2 <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000afc:	6863      	ldr	r3, [r4, #4]
 8000afe:	f023 0303 	bic.w	r3, r3, #3
 8000b02:	431a      	orrs	r2, r3
 8000b04:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000b06:	f7ff fbb7 	bl	8000278 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b0a:	6873      	ldr	r3, [r6, #4]
 8000b0c:	2b01      	cmp	r3, #1
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000b0e:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b10:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b14:	d10c      	bne.n	8000b30 <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b16:	6863      	ldr	r3, [r4, #4]
 8000b18:	f003 030c 	and.w	r3, r3, #12
 8000b1c:	2b04      	cmp	r3, #4
 8000b1e:	d0cd      	beq.n	8000abc <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b20:	f7ff fbaa 	bl	8000278 <HAL_GetTick>
 8000b24:	1bc0      	subs	r0, r0, r7
 8000b26:	4540      	cmp	r0, r8
 8000b28:	d9f5      	bls.n	8000b16 <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 8000b2a:	2003      	movs	r0, #3
 8000b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d10f      	bne.n	8000b54 <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b34:	6863      	ldr	r3, [r4, #4]
 8000b36:	f003 030c 	and.w	r3, r3, #12
 8000b3a:	2b08      	cmp	r3, #8
 8000b3c:	d0be      	beq.n	8000abc <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b3e:	f7ff fb9b 	bl	8000278 <HAL_GetTick>
 8000b42:	1bc0      	subs	r0, r0, r7
 8000b44:	4540      	cmp	r0, r8
 8000b46:	d9f5      	bls.n	8000b34 <HAL_RCC_ClockConfig+0xc0>
 8000b48:	e7ef      	b.n	8000b2a <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b4a:	f7ff fb95 	bl	8000278 <HAL_GetTick>
 8000b4e:	1bc0      	subs	r0, r0, r7
 8000b50:	4540      	cmp	r0, r8
 8000b52:	d8ea      	bhi.n	8000b2a <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b54:	6863      	ldr	r3, [r4, #4]
 8000b56:	f013 0f0c 	tst.w	r3, #12
 8000b5a:	d1f6      	bne.n	8000b4a <HAL_RCC_ClockConfig+0xd6>
 8000b5c:	e7ae      	b.n	8000abc <HAL_RCC_ClockConfig+0x48>
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b5e:	6813      	ldr	r3, [r2, #0]
 8000b60:	f023 0307 	bic.w	r3, r3, #7
 8000b64:	432b      	orrs	r3, r5
 8000b66:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b68:	6813      	ldr	r3, [r2, #0]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	429d      	cmp	r5, r3
 8000b70:	d19f      	bne.n	8000ab2 <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b72:	6831      	ldr	r1, [r6, #0]
 8000b74:	4c15      	ldr	r4, [pc, #84]	; (8000bcc <HAL_RCC_ClockConfig+0x158>)
 8000b76:	f011 0f04 	tst.w	r1, #4
 8000b7a:	d005      	beq.n	8000b88 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b7c:	6863      	ldr	r3, [r4, #4]
 8000b7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000b82:	68f3      	ldr	r3, [r6, #12]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b88:	070b      	lsls	r3, r1, #28
 8000b8a:	d506      	bpl.n	8000b9a <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000b8c:	6863      	ldr	r3, [r4, #4]
 8000b8e:	6932      	ldr	r2, [r6, #16]
 8000b90:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b94:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b98:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000b9a:	f7ff ff39 	bl	8000a10 <HAL_RCC_GetSysClockFreq>
 8000b9e:	6863      	ldr	r3, [r4, #4]
 8000ba0:	22f0      	movs	r2, #240	; 0xf0
 8000ba2:	fa92 f2a2 	rbit	r2, r2
 8000ba6:	fab2 f282 	clz	r2, r2
 8000baa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000bae:	40d3      	lsrs	r3, r2
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_RCC_ClockConfig+0x15c>)
 8000bb2:	5cd3      	ldrb	r3, [r2, r3]
 8000bb4:	40d8      	lsrs	r0, r3
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <HAL_RCC_ClockConfig+0x160>)
 8000bb8:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f7ff fb2e 	bl	800021c <HAL_InitTick>
  
  return HAL_OK;
 8000bc0:	2000      	movs	r0, #0
}
 8000bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40022000 	.word	0x40022000
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	08001d08 	.word	0x08001d08
 8000bd4:	20000000 	.word	0x20000000

08000bd8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000bd8:	4b01      	ldr	r3, [pc, #4]	; (8000be0 <HAL_RCC_GetHCLKFreq+0x8>)
 8000bda:	6818      	ldr	r0, [r3, #0]
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20000000 	.word	0x20000000

08000be4 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000be4:	6803      	ldr	r3, [r0, #0]
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000be6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000bea:	03df      	lsls	r7, r3, #15
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000bec:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000bee:	d579      	bpl.n	8000ce4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bf0:	4d7a      	ldr	r5, [pc, #488]	; (8000ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000bf2:	69eb      	ldr	r3, [r5, #28]
 8000bf4:	00de      	lsls	r6, r3, #3
 8000bf6:	d40a      	bmi.n	8000c0e <HAL_RCCEx_PeriphCLKConfig+0x2a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bf8:	69eb      	ldr	r3, [r5, #28]
 8000bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	61eb      	str	r3, [r5, #28]
 8000c00:	69eb      	ldr	r3, [r5, #28]
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c06:	9301      	str	r3, [sp, #4]
 8000c08:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c0a:	2701      	movs	r7, #1
 8000c0c:	e000      	b.n	8000c10 <HAL_RCCEx_PeriphCLKConfig+0x2c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8000c0e:	2700      	movs	r7, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c10:	4e73      	ldr	r6, [pc, #460]	; (8000de0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8000c12:	6833      	ldr	r3, [r6, #0]
 8000c14:	05d8      	lsls	r0, r3, #23
 8000c16:	d505      	bpl.n	8000c24 <HAL_RCCEx_PeriphCLKConfig+0x40>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000c18:	6a2b      	ldr	r3, [r5, #32]
 8000c1a:	4870      	ldr	r0, [pc, #448]	; (8000ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c1c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000c20:	d112      	bne.n	8000c48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8000c22:	e016      	b.n	8000c52 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c24:	6833      	ldr	r3, [r6, #0]
 8000c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c2a:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c2c:	f7ff fb24 	bl	8000278 <HAL_GetTick>
 8000c30:	4680      	mov	r8, r0
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c32:	6833      	ldr	r3, [r6, #0]
 8000c34:	05d9      	lsls	r1, r3, #23
 8000c36:	d4ef      	bmi.n	8000c18 <HAL_RCCEx_PeriphCLKConfig+0x34>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c38:	f7ff fb1e 	bl	8000278 <HAL_GetTick>
 8000c3c:	ebc8 0000 	rsb	r0, r8, r0
 8000c40:	2864      	cmp	r0, #100	; 0x64
 8000c42:	d9f6      	bls.n	8000c32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
        {
          return HAL_TIMEOUT;
 8000c44:	2003      	movs	r0, #3
 8000c46:	e0c5      	b.n	8000dd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c48:	6862      	ldr	r2, [r4, #4]
 8000c4a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d10d      	bne.n	8000c6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000c52:	6a2b      	ldr	r3, [r5, #32]
 8000c54:	4961      	ldr	r1, [pc, #388]	; (8000ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000c56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000c5a:	6863      	ldr	r3, [r4, #4]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c60:	2f00      	cmp	r7, #0
 8000c62:	d03f      	beq.n	8000ce4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c64:	69cb      	ldr	r3, [r1, #28]
 8000c66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	61cb      	str	r3, [r1, #28]
 8000c6c:	e03a      	b.n	8000ce4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c6e:	6a01      	ldr	r1, [r0, #32]
 8000c70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c74:	f421 7e40 	bic.w	lr, r1, #768	; 0x300
 8000c78:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8000c7c:	4e59      	ldr	r6, [pc, #356]	; (8000de4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8000c7e:	fab2 f282 	clz	r2, r2
 8000c82:	f04f 0c01 	mov.w	ip, #1
 8000c86:	f846 c022 	str.w	ip, [r6, r2, lsl #2]
 8000c8a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000c8e:	fab3 f383 	clz	r3, r3
 8000c92:	2200      	movs	r2, #0
 8000c94:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000c98:	07ca      	lsls	r2, r1, #31
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8000c9a:	f8c0 e020 	str.w	lr, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000c9e:	d5d8      	bpl.n	8000c52 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca0:	f7ff faea 	bl	8000278 <HAL_GetTick>
 8000ca4:	2602      	movs	r6, #2
 8000ca6:	4681      	mov	r9, r0
 8000ca8:	46b0      	mov	r8, r6
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000caa:	f241 3a88 	movw	sl, #5000	; 0x1388
 8000cae:	fa96 f3a6 	rbit	r3, r6
 8000cb2:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cb6:	b10b      	cbz	r3, 8000cbc <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8000cb8:	6a2a      	ldr	r2, [r5, #32]
 8000cba:	e002      	b.n	8000cc2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8000cbc:	fa96 f3a6 	rbit	r3, r6
 8000cc0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000cc2:	fa98 f3a8 	rbit	r3, r8
 8000cc6:	fab3 f383 	clz	r3, r3
 8000cca:	f003 031f 	and.w	r3, r3, #31
 8000cce:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd2:	07db      	lsls	r3, r3, #31
 8000cd4:	d4bd      	bmi.n	8000c52 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cd6:	f7ff facf 	bl	8000278 <HAL_GetTick>
 8000cda:	ebc9 0000 	rsb	r0, r9, r0
 8000cde:	4550      	cmp	r0, sl
 8000ce0:	d9e5      	bls.n	8000cae <HAL_RCCEx_PeriphCLKConfig+0xca>
 8000ce2:	e7af      	b.n	8000c44 <HAL_RCCEx_PeriphCLKConfig+0x60>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000ce4:	6820      	ldr	r0, [r4, #0]
 8000ce6:	07c7      	lsls	r7, r0, #31
 8000ce8:	d506      	bpl.n	8000cf8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000cea:	493c      	ldr	r1, [pc, #240]	; (8000ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000cec:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000cee:	f023 0203 	bic.w	r2, r3, #3
 8000cf2:	68a3      	ldr	r3, [r4, #8]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000cf8:	0786      	lsls	r6, r0, #30
 8000cfa:	d506      	bpl.n	8000d0a <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000cfc:	4937      	ldr	r1, [pc, #220]	; (8000ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000cfe:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000d00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000d04:	68e3      	ldr	r3, [r4, #12]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8000d0a:	0745      	lsls	r5, r0, #29
 8000d0c:	d506      	bpl.n	8000d1c <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8000d0e:	4933      	ldr	r1, [pc, #204]	; (8000ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000d10:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000d12:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8000d16:	6923      	ldr	r3, [r4, #16]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000d1c:	0681      	lsls	r1, r0, #26
 8000d1e:	d506      	bpl.n	8000d2e <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000d20:	492e      	ldr	r1, [pc, #184]	; (8000ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000d22:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000d24:	f023 0210 	bic.w	r2, r3, #16
 8000d28:	69e3      	ldr	r3, [r4, #28]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000d2e:	0382      	lsls	r2, r0, #14
 8000d30:	d506      	bpl.n	8000d40 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8000d32:	492a      	ldr	r1, [pc, #168]	; (8000ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000d34:	684b      	ldr	r3, [r1, #4]
 8000d36:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8000d3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8000d40:	0643      	lsls	r3, r0, #25
 8000d42:	d506      	bpl.n	8000d52 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8000d44:	4925      	ldr	r1, [pc, #148]	; (8000ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000d46:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000d48:	f023 0220 	bic.w	r2, r3, #32
 8000d4c:	6a23      	ldr	r3, [r4, #32]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8000d52:	0707      	lsls	r7, r0, #28
 8000d54:	d506      	bpl.n	8000d64 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8000d56:	4921      	ldr	r1, [pc, #132]	; (8000ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000d58:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000d5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8000d5e:	6963      	ldr	r3, [r4, #20]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8000d64:	06c6      	lsls	r6, r0, #27
 8000d66:	d506      	bpl.n	8000d76 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8000d68:	491c      	ldr	r1, [pc, #112]	; (8000ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000d6a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000d6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8000d70:	69a3      	ldr	r3, [r4, #24]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8000d76:	0585      	lsls	r5, r0, #22
 8000d78:	d506      	bpl.n	8000d88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000d7a:	4918      	ldr	r1, [pc, #96]	; (8000ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000d7c:	684b      	ldr	r3, [r1, #4]
 8000d7e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8000d82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000d84:	4313      	orrs	r3, r2
 8000d86:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8000d88:	0601      	lsls	r1, r0, #24
 8000d8a:	d506      	bpl.n	8000d9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8000d8c:	4913      	ldr	r1, [pc, #76]	; (8000ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000d8e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000d90:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8000d94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d96:	4313      	orrs	r3, r2
 8000d98:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8000d9a:	05c2      	lsls	r2, r0, #23
 8000d9c:	d506      	bpl.n	8000dac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8000d9e:	490f      	ldr	r1, [pc, #60]	; (8000ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000da0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000da2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8000da6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000da8:	4313      	orrs	r3, r2
 8000daa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8000dac:	04c3      	lsls	r3, r0, #19
 8000dae:	d506      	bpl.n	8000dbe <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8000db0:	490a      	ldr	r1, [pc, #40]	; (8000ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000db2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000db4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000db8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8000dbe:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 8000dc2:	d007      	beq.n	8000dd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8000dc4:	4905      	ldr	r1, [pc, #20]	; (8000ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8000dc6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000dc8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000dcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8000dd2:	2000      	movs	r0, #0
}
 8000dd4:	b002      	add	sp, #8
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	bf00      	nop
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40007000 	.word	0x40007000
 8000de4:	42420400 	.word	0x42420400

08000de8 <HAL_TIM_PeriodElapsedCallback>:
 8000de8:	4770      	bx	lr

08000dea <HAL_TIM_OC_DelayElapsedCallback>:
 8000dea:	4770      	bx	lr

08000dec <HAL_TIM_IC_CaptureCallback>:
 8000dec:	4770      	bx	lr

08000dee <HAL_TIM_PWM_PulseFinishedCallback>:
 8000dee:	4770      	bx	lr

08000df0 <HAL_TIM_TriggerCallback>:
 8000df0:	4770      	bx	lr

08000df2 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000df2:	6803      	ldr	r3, [r0, #0]
 8000df4:	691a      	ldr	r2, [r3, #16]
 8000df6:	0791      	lsls	r1, r2, #30
  * @brief  This function handles TIM interrupts requests.
  * @param  htim: TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000df8:	b510      	push	{r4, lr}
 8000dfa:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000dfc:	d514      	bpl.n	8000e28 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	0792      	lsls	r2, r2, #30
 8000e02:	d511      	bpl.n	8000e28 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000e04:	f06f 0202 	mvn.w	r2, #2
 8000e08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8000e0a:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000e0c:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8000e0e:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000e10:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8000e12:	d002      	beq.n	8000e1a <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000e14:	f7ff ffea 	bl	8000dec <HAL_TIM_IC_CaptureCallback>
 8000e18:	e004      	b.n	8000e24 <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e1a:	f7ff ffe6 	bl	8000dea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e1e:	4620      	mov	r0, r4
 8000e20:	f7ff ffe5 	bl	8000dee <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e24:	2300      	movs	r3, #0
 8000e26:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000e28:	6823      	ldr	r3, [r4, #0]
 8000e2a:	691a      	ldr	r2, [r3, #16]
 8000e2c:	0750      	lsls	r0, r2, #29
 8000e2e:	d516      	bpl.n	8000e5e <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000e30:	68da      	ldr	r2, [r3, #12]
 8000e32:	0751      	lsls	r1, r2, #29
 8000e34:	d513      	bpl.n	8000e5e <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000e36:	f06f 0204 	mvn.w	r2, #4
 8000e3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8000e3c:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e3e:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8000e40:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e44:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000e46:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8000e48:	d002      	beq.n	8000e50 <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000e4a:	f7ff ffcf 	bl	8000dec <HAL_TIM_IC_CaptureCallback>
 8000e4e:	e004      	b.n	8000e5a <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e50:	f7ff ffcb 	bl	8000dea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e54:	4620      	mov	r0, r4
 8000e56:	f7ff ffca 	bl	8000dee <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	7623      	strb	r3, [r4, #24]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000e5e:	6823      	ldr	r3, [r4, #0]
 8000e60:	691a      	ldr	r2, [r3, #16]
 8000e62:	0712      	lsls	r2, r2, #28
 8000e64:	d515      	bpl.n	8000e92 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000e66:	68da      	ldr	r2, [r3, #12]
 8000e68:	0710      	lsls	r0, r2, #28
 8000e6a:	d512      	bpl.n	8000e92 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000e6c:	f06f 0208 	mvn.w	r2, #8
 8000e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8000e72:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000e74:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8000e76:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000e78:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000e7a:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8000e7c:	d002      	beq.n	8000e84 <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000e7e:	f7ff ffb5 	bl	8000dec <HAL_TIM_IC_CaptureCallback>
 8000e82:	e004      	b.n	8000e8e <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e84:	f7ff ffb1 	bl	8000dea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8000e88:	4620      	mov	r0, r4
 8000e8a:	f7ff ffb0 	bl	8000dee <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000e92:	6823      	ldr	r3, [r4, #0]
 8000e94:	691a      	ldr	r2, [r3, #16]
 8000e96:	06d2      	lsls	r2, r2, #27
 8000e98:	d516      	bpl.n	8000ec8 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000e9a:	68da      	ldr	r2, [r3, #12]
 8000e9c:	06d0      	lsls	r0, r2, #27
 8000e9e:	d513      	bpl.n	8000ec8 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000ea0:	f06f 0210 	mvn.w	r2, #16
 8000ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8000ea6:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000ea8:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8000eaa:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000eae:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000eb0:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8000eb2:	d002      	beq.n	8000eba <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000eb4:	f7ff ff9a 	bl	8000dec <HAL_TIM_IC_CaptureCallback>
 8000eb8:	e004      	b.n	8000ec4 <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000eba:	f7ff ff96 	bl	8000dea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	f7ff ff95 	bl	8000dee <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	7623      	strb	r3, [r4, #24]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000ec8:	6823      	ldr	r3, [r4, #0]
 8000eca:	691a      	ldr	r2, [r3, #16]
 8000ecc:	07d1      	lsls	r1, r2, #31
 8000ece:	d508      	bpl.n	8000ee2 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000ed0:	68da      	ldr	r2, [r3, #12]
 8000ed2:	07d2      	lsls	r2, r2, #31
 8000ed4:	d505      	bpl.n	8000ee2 <HAL_TIM_IRQHandler+0xf0>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000ed6:	f06f 0201 	mvn.w	r2, #1
 8000eda:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000edc:	4620      	mov	r0, r4
 8000ede:	f7ff ff83 	bl	8000de8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000ee2:	6823      	ldr	r3, [r4, #0]
 8000ee4:	691a      	ldr	r2, [r3, #16]
 8000ee6:	0610      	lsls	r0, r2, #24
 8000ee8:	d508      	bpl.n	8000efc <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000eea:	68da      	ldr	r2, [r3, #12]
 8000eec:	0611      	lsls	r1, r2, #24
 8000eee:	d505      	bpl.n	8000efc <HAL_TIM_IRQHandler+0x10a>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000ef0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000ef4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000ef6:	4620      	mov	r0, r4
 8000ef8:	f000 fc05 	bl	8001706 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000efc:	6823      	ldr	r3, [r4, #0]
 8000efe:	691a      	ldr	r2, [r3, #16]
 8000f00:	0652      	lsls	r2, r2, #25
 8000f02:	d508      	bpl.n	8000f16 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	0650      	lsls	r0, r2, #25
 8000f08:	d505      	bpl.n	8000f16 <HAL_TIM_IRQHandler+0x124>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000f0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000f0e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000f10:	4620      	mov	r0, r4
 8000f12:	f7ff ff6d 	bl	8000df0 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000f16:	6823      	ldr	r3, [r4, #0]
 8000f18:	691a      	ldr	r2, [r3, #16]
 8000f1a:	0691      	lsls	r1, r2, #26
 8000f1c:	d50a      	bpl.n	8000f34 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000f1e:	68da      	ldr	r2, [r3, #12]
 8000f20:	0692      	lsls	r2, r2, #26
 8000f22:	d507      	bpl.n	8000f34 <HAL_TIM_IRQHandler+0x142>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000f24:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000f28:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000f2a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 8000f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 8000f30:	f000 bbe8 	b.w	8001704 <HAL_TIMEx_CommutationCallback>
 8000f34:	bd10      	pop	{r4, pc}
	...

08000f38 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f38:	4a2a      	ldr	r2, [pc, #168]	; (8000fe4 <TIM_Base_SetConfig+0xac>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8000f3a:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f3c:	4290      	cmp	r0, r2
 8000f3e:	d00e      	beq.n	8000f5e <TIM_Base_SetConfig+0x26>
 8000f40:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f44:	d00b      	beq.n	8000f5e <TIM_Base_SetConfig+0x26>
 8000f46:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000f4a:	4290      	cmp	r0, r2
 8000f4c:	d007      	beq.n	8000f5e <TIM_Base_SetConfig+0x26>
 8000f4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f52:	4290      	cmp	r0, r2
 8000f54:	d003      	beq.n	8000f5e <TIM_Base_SetConfig+0x26>
 8000f56:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8000f5a:	4290      	cmp	r0, r2
 8000f5c:	d115      	bne.n	8000f8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000f5e:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000f64:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000f66:	4a1f      	ldr	r2, [pc, #124]	; (8000fe4 <TIM_Base_SetConfig+0xac>)
 8000f68:	4290      	cmp	r0, r2
 8000f6a:	d019      	beq.n	8000fa0 <TIM_Base_SetConfig+0x68>
 8000f6c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f70:	d016      	beq.n	8000fa0 <TIM_Base_SetConfig+0x68>
 8000f72:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000f76:	4290      	cmp	r0, r2
 8000f78:	d012      	beq.n	8000fa0 <TIM_Base_SetConfig+0x68>
 8000f7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f7e:	4290      	cmp	r0, r2
 8000f80:	d00e      	beq.n	8000fa0 <TIM_Base_SetConfig+0x68>
 8000f82:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8000f86:	4290      	cmp	r0, r2
 8000f88:	d00a      	beq.n	8000fa0 <TIM_Base_SetConfig+0x68>
 8000f8a:	4a17      	ldr	r2, [pc, #92]	; (8000fe8 <TIM_Base_SetConfig+0xb0>)
 8000f8c:	4290      	cmp	r0, r2
 8000f8e:	d007      	beq.n	8000fa0 <TIM_Base_SetConfig+0x68>
 8000f90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f94:	4290      	cmp	r0, r2
 8000f96:	d003      	beq.n	8000fa0 <TIM_Base_SetConfig+0x68>
 8000f98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f9c:	4290      	cmp	r0, r2
 8000f9e:	d103      	bne.n	8000fa8 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000fa0:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000fa6:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8000fa8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000faa:	688b      	ldr	r3, [r1, #8]
 8000fac:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000fae:	680b      	ldr	r3, [r1, #0]
 8000fb0:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <TIM_Base_SetConfig+0xac>)
 8000fb4:	4298      	cmp	r0, r3
 8000fb6:	d00f      	beq.n	8000fd8 <TIM_Base_SetConfig+0xa0>
 8000fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000fbc:	4298      	cmp	r0, r3
 8000fbe:	d00b      	beq.n	8000fd8 <TIM_Base_SetConfig+0xa0>
 8000fc0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8000fc4:	4298      	cmp	r0, r3
 8000fc6:	d007      	beq.n	8000fd8 <TIM_Base_SetConfig+0xa0>
 8000fc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fcc:	4298      	cmp	r0, r3
 8000fce:	d003      	beq.n	8000fd8 <TIM_Base_SetConfig+0xa0>
 8000fd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fd4:	4298      	cmp	r0, r3
 8000fd6:	d101      	bne.n	8000fdc <TIM_Base_SetConfig+0xa4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000fd8:	690b      	ldr	r3, [r1, #16]
 8000fda:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	6143      	str	r3, [r0, #20]
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40012c00 	.word	0x40012c00
 8000fe8:	40014000 	.word	0x40014000

08000fec <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim: TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8000fec:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8000fee:	4604      	mov	r4, r0
 8000ff0:	b1a0      	cbz	r0, 800101c <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8000ff2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000ff6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ffa:	b91b      	cbnz	r3, 8001004 <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000ffc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001000:	f000 fd3e 	bl	8001a80 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001004:	2302      	movs	r3, #2
 8001006:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800100a:	6820      	ldr	r0, [r4, #0]
 800100c:	1d21      	adds	r1, r4, #4
 800100e:	f7ff ff93 	bl	8000f38 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001012:	2301      	movs	r3, #1
 8001014:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8001018:	2000      	movs	r0, #0
 800101a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 800101c:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 800101e:	bd10      	pop	{r4, pc}

08001020 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim: TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001020:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001022:	4604      	mov	r4, r0
 8001024:	b1a0      	cbz	r0, 8001050 <HAL_TIM_PWM_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001026:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800102a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800102e:	b91b      	cbnz	r3, 8001038 <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001030:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001034:	f000 fd42 	bl	8001abc <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001038:	2302      	movs	r3, #2
 800103a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800103e:	6820      	ldr	r0, [r4, #0]
 8001040:	1d21      	adds	r1, r4, #4
 8001042:	f7ff ff79 	bl	8000f38 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001046:	2301      	movs	r3, #1
 8001048:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 800104c:	2000      	movs	r0, #0
 800104e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001050:	2001      	movs	r0, #1
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8001052:	bd10      	pop	{r4, pc}

08001054 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001054:	6a03      	ldr	r3, [r0, #32]
 8001056:	f023 0301 	bic.w	r3, r3, #1
 800105a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800105c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800105e:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001060:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001062:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001064:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001066:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800106a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800106e:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001070:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001072:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001076:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001078:	4d1b      	ldr	r5, [pc, #108]	; (80010e8 <TIM_OC1_SetConfig+0x94>)
 800107a:	42a8      	cmp	r0, r5
 800107c:	d00f      	beq.n	800109e <TIM_OC1_SetConfig+0x4a>
 800107e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001082:	42a8      	cmp	r0, r5
 8001084:	d00b      	beq.n	800109e <TIM_OC1_SetConfig+0x4a>
 8001086:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800108a:	42a8      	cmp	r0, r5
 800108c:	d007      	beq.n	800109e <TIM_OC1_SetConfig+0x4a>
 800108e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001092:	42a8      	cmp	r0, r5
 8001094:	d003      	beq.n	800109e <TIM_OC1_SetConfig+0x4a>
 8001096:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800109a:	42a8      	cmp	r0, r5
 800109c:	d11e      	bne.n	80010dc <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800109e:	68cd      	ldr	r5, [r1, #12]
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80010a0:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80010a4:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80010a6:	4d10      	ldr	r5, [pc, #64]	; (80010e8 <TIM_OC1_SetConfig+0x94>)
 80010a8:	42a8      	cmp	r0, r5
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80010aa:	f023 0304 	bic.w	r3, r3, #4
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80010ae:	d00f      	beq.n	80010d0 <TIM_OC1_SetConfig+0x7c>
 80010b0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80010b4:	42a8      	cmp	r0, r5
 80010b6:	d00b      	beq.n	80010d0 <TIM_OC1_SetConfig+0x7c>
 80010b8:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80010bc:	42a8      	cmp	r0, r5
 80010be:	d007      	beq.n	80010d0 <TIM_OC1_SetConfig+0x7c>
 80010c0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010c4:	42a8      	cmp	r0, r5
 80010c6:	d003      	beq.n	80010d0 <TIM_OC1_SetConfig+0x7c>
 80010c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010cc:	42a8      	cmp	r0, r5
 80010ce:	d105      	bne.n	80010dc <TIM_OC1_SetConfig+0x88>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80010d0:	694e      	ldr	r6, [r1, #20]
 80010d2:	698d      	ldr	r5, [r1, #24]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80010d4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80010d8:	4335      	orrs	r5, r6
 80010da:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80010dc:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80010de:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80010e0:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80010e2:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80010e4:	6203      	str	r3, [r0, #32]
 80010e6:	bd70      	pop	{r4, r5, r6, pc}
 80010e8:	40012c00 	.word	0x40012c00

080010ec <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80010ec:	6a03      	ldr	r3, [r0, #32]
 80010ee:	f023 0310 	bic.w	r3, r3, #16
 80010f2:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80010f4:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80010f6:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80010f8:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80010fa:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80010fc:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80010fe:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001102:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001106:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 800110a:	688d      	ldr	r5, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800110c:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8001110:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001114:	4d16      	ldr	r5, [pc, #88]	; (8001170 <TIM_OC2_SetConfig+0x84>)
 8001116:	42a8      	cmp	r0, r5
 8001118:	d003      	beq.n	8001122 <TIM_OC2_SetConfig+0x36>
 800111a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800111e:	42a8      	cmp	r0, r5
 8001120:	d10d      	bne.n	800113e <TIM_OC2_SetConfig+0x52>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8001122:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001124:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8001128:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800112c:	4d10      	ldr	r5, [pc, #64]	; (8001170 <TIM_OC2_SetConfig+0x84>)
 800112e:	42a8      	cmp	r0, r5
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001134:	d00e      	beq.n	8001154 <TIM_OC2_SetConfig+0x68>
 8001136:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800113a:	42a8      	cmp	r0, r5
 800113c:	d00a      	beq.n	8001154 <TIM_OC2_SetConfig+0x68>
 800113e:	4d0d      	ldr	r5, [pc, #52]	; (8001174 <TIM_OC2_SetConfig+0x88>)
 8001140:	42a8      	cmp	r0, r5
 8001142:	d007      	beq.n	8001154 <TIM_OC2_SetConfig+0x68>
 8001144:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001148:	42a8      	cmp	r0, r5
 800114a:	d003      	beq.n	8001154 <TIM_OC2_SetConfig+0x68>
 800114c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001150:	42a8      	cmp	r0, r5
 8001152:	d107      	bne.n	8001164 <TIM_OC2_SetConfig+0x78>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001154:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001156:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800115a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800115e:	698d      	ldr	r5, [r1, #24]
 8001160:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001164:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001166:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001168:	684a      	ldr	r2, [r1, #4]
 800116a:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800116c:	6203      	str	r3, [r0, #32]
 800116e:	bd30      	pop	{r4, r5, pc}
 8001170:	40012c00 	.word	0x40012c00
 8001174:	40014000 	.word	0x40014000

08001178 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001178:	6a03      	ldr	r3, [r0, #32]
 800117a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800117e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001180:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001182:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001184:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001186:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001188:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800118a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800118e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001192:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8001194:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001196:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 800119a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800119e:	4d17      	ldr	r5, [pc, #92]	; (80011fc <TIM_OC3_SetConfig+0x84>)
 80011a0:	42a8      	cmp	r0, r5
 80011a2:	d003      	beq.n	80011ac <TIM_OC3_SetConfig+0x34>
 80011a4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80011a8:	42a8      	cmp	r0, r5
 80011aa:	d10d      	bne.n	80011c8 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80011ac:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80011ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80011b2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80011b6:	4d11      	ldr	r5, [pc, #68]	; (80011fc <TIM_OC3_SetConfig+0x84>)
 80011b8:	42a8      	cmp	r0, r5
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80011ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80011be:	d00e      	beq.n	80011de <TIM_OC3_SetConfig+0x66>
 80011c0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80011c4:	42a8      	cmp	r0, r5
 80011c6:	d00a      	beq.n	80011de <TIM_OC3_SetConfig+0x66>
 80011c8:	4d0d      	ldr	r5, [pc, #52]	; (8001200 <TIM_OC3_SetConfig+0x88>)
 80011ca:	42a8      	cmp	r0, r5
 80011cc:	d007      	beq.n	80011de <TIM_OC3_SetConfig+0x66>
 80011ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011d2:	42a8      	cmp	r0, r5
 80011d4:	d003      	beq.n	80011de <TIM_OC3_SetConfig+0x66>
 80011d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011da:	42a8      	cmp	r0, r5
 80011dc:	d107      	bne.n	80011ee <TIM_OC3_SetConfig+0x76>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 80011de:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80011e0:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 80011e4:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80011e8:	698d      	ldr	r5, [r1, #24]
 80011ea:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80011ee:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80011f0:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80011f2:	684a      	ldr	r2, [r1, #4]
 80011f4:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80011f6:	6203      	str	r3, [r0, #32]
 80011f8:	bd30      	pop	{r4, r5, pc}
 80011fa:	bf00      	nop
 80011fc:	40012c00 	.word	0x40012c00
 8001200:	40014000 	.word	0x40014000

08001204 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001204:	6a03      	ldr	r3, [r0, #32]
 8001206:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800120a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800120c:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800120e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001210:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001212:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001214:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001216:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800121a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800121e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8001222:	688d      	ldr	r5, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001224:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8001228:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800122c:	4d0e      	ldr	r5, [pc, #56]	; (8001268 <TIM_OC4_SetConfig+0x64>)
 800122e:	42a8      	cmp	r0, r5
 8001230:	d00f      	beq.n	8001252 <TIM_OC4_SetConfig+0x4e>
 8001232:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001236:	42a8      	cmp	r0, r5
 8001238:	d00b      	beq.n	8001252 <TIM_OC4_SetConfig+0x4e>
 800123a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800123e:	42a8      	cmp	r0, r5
 8001240:	d007      	beq.n	8001252 <TIM_OC4_SetConfig+0x4e>
 8001242:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001246:	42a8      	cmp	r0, r5
 8001248:	d003      	beq.n	8001252 <TIM_OC4_SetConfig+0x4e>
 800124a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800124e:	42a8      	cmp	r0, r5
 8001250:	d104      	bne.n	800125c <TIM_OC4_SetConfig+0x58>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001252:	694d      	ldr	r5, [r1, #20]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001254:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001258:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800125c:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800125e:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001260:	684a      	ldr	r2, [r1, #4]
 8001262:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001264:	6203      	str	r3, [r0, #32]
 8001266:	bd30      	pop	{r4, r5, pc}
 8001268:	40012c00 	.word	0x40012c00

0800126c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800126c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 800126e:	6884      	ldr	r4, [r0, #8]
 8001270:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8001274:	4321      	orrs	r1, r4
 8001276:	430a      	orrs	r2, r1

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001278:	ea42 2303 	orr.w	r3, r2, r3, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800127c:	6083      	str	r3, [r0, #8]
 800127e:	bd10      	pop	{r4, pc}

08001280 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0;
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8001280:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001284:	2b01      	cmp	r3, #1
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8001286:	b570      	push	{r4, r5, r6, lr}
 8001288:	4604      	mov	r4, r0
 800128a:	f04f 0002 	mov.w	r0, #2
  uint32_t tmpsmcr = 0;
  
  /* Process Locked */
  __HAL_LOCK(htim);
 800128e:	f000 80ab 	beq.w	80013e8 <HAL_TIM_ConfigClockSource+0x168>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001292:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001296:	6820      	ldr	r0, [r4, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0;
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8001298:	2301      	movs	r3, #1
 800129a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800129e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80012a0:	4b52      	ldr	r3, [pc, #328]	; (80013ec <HAL_TIM_ConfigClockSource+0x16c>)
 80012a2:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80012a4:	6083      	str	r3, [r0, #8]
  
  switch (sClockSourceConfig->ClockSource)
 80012a6:	680b      	ldr	r3, [r1, #0]
 80012a8:	2b40      	cmp	r3, #64	; 0x40
 80012aa:	d074      	beq.n	8001396 <HAL_TIM_ConfigClockSource+0x116>
 80012ac:	d818      	bhi.n	80012e0 <HAL_TIM_ConfigClockSource+0x60>
 80012ae:	2b10      	cmp	r3, #16
 80012b0:	f000 8088 	beq.w	80013c4 <HAL_TIM_ConfigClockSource+0x144>
 80012b4:	d808      	bhi.n	80012c8 <HAL_TIM_ConfigClockSource+0x48>
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f040 8090 	bne.w	80013dc <HAL_TIM_ConfigClockSource+0x15c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80012bc:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80012be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80012c2:	f043 0307 	orr.w	r3, r3, #7
 80012c6:	e088      	b.n	80013da <HAL_TIM_ConfigClockSource+0x15a>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 80012c8:	2b20      	cmp	r3, #32
 80012ca:	f000 8081 	beq.w	80013d0 <HAL_TIM_ConfigClockSource+0x150>
 80012ce:	2b30      	cmp	r3, #48	; 0x30
 80012d0:	f040 8084 	bne.w	80013dc <HAL_TIM_ConfigClockSource+0x15c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80012d4:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80012d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80012da:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 80012de:	e07c      	b.n	80013da <HAL_TIM_ConfigClockSource+0x15a>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 80012e0:	2b70      	cmp	r3, #112	; 0x70
 80012e2:	d032      	beq.n	800134a <HAL_TIM_ConfigClockSource+0xca>
 80012e4:	d81b      	bhi.n	800131e <HAL_TIM_ConfigClockSource+0x9e>
 80012e6:	2b50      	cmp	r3, #80	; 0x50
 80012e8:	d03e      	beq.n	8001368 <HAL_TIM_ConfigClockSource+0xe8>
 80012ea:	2b60      	cmp	r3, #96	; 0x60
 80012ec:	d176      	bne.n	80013dc <HAL_TIM_ConfigClockSource+0x15c>
      
       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance, 
 80012ee:	684d      	ldr	r5, [r1, #4]
 80012f0:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80012f2:	6a01      	ldr	r1, [r0, #32]
 80012f4:	f021 0110 	bic.w	r1, r1, #16
 80012f8:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80012fa:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80012fc:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80012fe:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001302:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 8001306:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12);
 800130a:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800130e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001310:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001312:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001318:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800131c:	e05d      	b.n	80013da <HAL_TIM_ConfigClockSource+0x15a>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 800131e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001322:	d00c      	beq.n	800133e <HAL_TIM_ConfigClockSource+0xbe>
 8001324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001328:	d158      	bne.n	80013dc <HAL_TIM_ConfigClockSource+0x15c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance, 
 800132a:	68cb      	ldr	r3, [r1, #12]
 800132c:	684a      	ldr	r2, [r1, #4]
 800132e:	6889      	ldr	r1, [r1, #8]
 8001330:	f7ff ff9c 	bl	800126c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001334:	6822      	ldr	r2, [r4, #0]
 8001336:	6893      	ldr	r3, [r2, #8]
 8001338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800133c:	e012      	b.n	8001364 <HAL_TIM_ConfigClockSource+0xe4>
  {
  case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));      
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800133e:	6883      	ldr	r3, [r0, #8]
 8001340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001344:	f023 0307 	bic.w	r3, r3, #7
 8001348:	e047      	b.n	80013da <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance, 
 800134a:	68cb      	ldr	r3, [r1, #12]
 800134c:	684a      	ldr	r2, [r1, #4]
 800134e:	6889      	ldr	r1, [r1, #8]
 8001350:	f7ff ff8c 	bl	800126c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity, 
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 8001354:	6822      	ldr	r2, [r4, #0]
 8001356:	6893      	ldr	r3, [r2, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800135c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001360:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      TIM_ETR_SetConfig(htim->Instance, 
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001364:	6093      	str	r3, [r2, #8]
    }
    break;
 8001366:	e039      	b.n	80013dc <HAL_TIM_ConfigClockSource+0x15c>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001368:	6a03      	ldr	r3, [r0, #32]
      
      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800136a:	684d      	ldr	r5, [r1, #4]
 800136c:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800136e:	6a01      	ldr	r1, [r0, #32]
 8001370:	f021 0101 	bic.w	r1, r1, #1
 8001374:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001376:	6982      	ldr	r2, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001378:	f023 030a 	bic.w	r3, r3, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800137c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8001380:	432b      	orrs	r3, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 8001382:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001386:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001388:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800138a:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800138c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001390:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8001394:	e021      	b.n	80013da <HAL_TIM_ConfigClockSource+0x15a>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001396:	6a03      	ldr	r3, [r0, #32]
      
      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001398:	684d      	ldr	r5, [r1, #4]
 800139a:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800139c:	6a01      	ldr	r1, [r0, #32]
 800139e:	f021 0101 	bic.w	r1, r1, #1
 80013a2:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80013a4:	6982      	ldr	r2, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80013a6:	f023 030a 	bic.w	r3, r3, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80013aa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 80013ae:	432b      	orrs	r3, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 80013b0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80013b4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80013b6:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80013b8:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80013ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80013be:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80013c2:	e00a      	b.n	80013da <HAL_TIM_ConfigClockSource+0x15a>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80013c4:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80013c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80013ca:	f043 0317 	orr.w	r3, r3, #23
 80013ce:	e004      	b.n	80013da <HAL_TIM_ConfigClockSource+0x15a>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80013d0:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80013d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80013d6:	f043 0327 	orr.w	r3, r3, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80013da:	6083      	str	r3, [r0, #8]
    break;
    
  default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 80013dc:	2301      	movs	r3, #1
  
  __HAL_UNLOCK(htim);
 80013de:	2000      	movs	r0, #0
    break;
    
  default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 80013e0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80013e4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 80013e8:	bd70      	pop	{r4, r5, r6, pc}
 80013ea:	bf00      	nop
 80013ec:	fffe0088 	.word	0xfffe0088

080013f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80013f0:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80013f2:	2301      	movs	r3, #1
 80013f4:	6a04      	ldr	r4, [r0, #32]
 80013f6:	408b      	lsls	r3, r1
 80013f8:	ea24 0303 	bic.w	r3, r4, r3
 80013fc:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80013fe:	6a03      	ldr	r3, [r0, #32]
 8001400:	408a      	lsls	r2, r1
 8001402:	ea42 0103 	orr.w	r1, r2, r3
 8001406:	6201      	str	r1, [r0, #32]
 8001408:	bd10      	pop	{r4, pc}
	...

0800140c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800140c:	b510      	push	{r4, lr}
 800140e:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001410:	2201      	movs	r2, #1
 8001412:	6800      	ldr	r0, [r0, #0]
 8001414:	f7ff ffec 	bl	80013f0 <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8001418:	6823      	ldr	r3, [r4, #0]
 800141a:	4a0e      	ldr	r2, [pc, #56]	; (8001454 <HAL_TIM_PWM_Start+0x48>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d00f      	beq.n	8001440 <HAL_TIM_PWM_Start+0x34>
 8001420:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001424:	4293      	cmp	r3, r2
 8001426:	d00b      	beq.n	8001440 <HAL_TIM_PWM_Start+0x34>
 8001428:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800142c:	4293      	cmp	r3, r2
 800142e:	d007      	beq.n	8001440 <HAL_TIM_PWM_Start+0x34>
 8001430:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001434:	4293      	cmp	r3, r2
 8001436:	d003      	beq.n	8001440 <HAL_TIM_PWM_Start+0x34>
 8001438:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800143c:	4293      	cmp	r3, r2
 800143e:	d103      	bne.n	8001448 <HAL_TIM_PWM_Start+0x3c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001442:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001446:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	f042 0201 	orr.w	r2, r2, #1
 800144e:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 8001450:	2000      	movs	r0, #0
 8001452:	bd10      	pop	{r4, pc}
 8001454:	40012c00 	.word	0x40012c00

08001458 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001458:	6a03      	ldr	r3, [r0, #32]
 800145a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800145e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001460:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001462:	6842      	ldr	r2, [r0, #4]
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8001464:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001466:	6d44      	ldr	r4, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001468:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2; 
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800146a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800146e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001472:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8001474:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8001476:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 800147a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800147e:	4d0f      	ldr	r5, [pc, #60]	; (80014bc <TIM_OC5_SetConfig+0x64>)
 8001480:	42a8      	cmp	r0, r5
 8001482:	d00f      	beq.n	80014a4 <TIM_OC5_SetConfig+0x4c>
 8001484:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001488:	42a8      	cmp	r0, r5
 800148a:	d00b      	beq.n	80014a4 <TIM_OC5_SetConfig+0x4c>
 800148c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001490:	42a8      	cmp	r0, r5
 8001492:	d007      	beq.n	80014a4 <TIM_OC5_SetConfig+0x4c>
 8001494:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001498:	42a8      	cmp	r0, r5
 800149a:	d003      	beq.n	80014a4 <TIM_OC5_SetConfig+0x4c>
 800149c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014a0:	42a8      	cmp	r0, r5
 80014a2:	d104      	bne.n	80014ae <TIM_OC5_SetConfig+0x56>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 80014a4:	694d      	ldr	r5, [r1, #20]
  tmpccer |= (OC_Config->OCPolarity << 16);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80014a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 80014aa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80014ae:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80014b0:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80014b2:	6544      	str	r4, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80014b4:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80014b6:	6203      	str	r3, [r0, #32]
 80014b8:	bd30      	pop	{r4, r5, pc}
 80014ba:	bf00      	nop
 80014bc:	40012c00 	.word	0x40012c00

080014c0 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80014c0:	6a03      	ldr	r3, [r0, #32]
 80014c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80014c6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80014c8:	6a03      	ldr	r3, [r0, #32]
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 80014ca:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80014cc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80014ce:	6d42      	ldr	r2, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80014d0:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2; 
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80014d2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80014d6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80014da:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 80014de:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80014e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 80014e4:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80014e8:	4d0e      	ldr	r5, [pc, #56]	; (8001524 <TIM_OC6_SetConfig+0x64>)
 80014ea:	42a8      	cmp	r0, r5
 80014ec:	d00f      	beq.n	800150e <TIM_OC6_SetConfig+0x4e>
 80014ee:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80014f2:	42a8      	cmp	r0, r5
 80014f4:	d00b      	beq.n	800150e <TIM_OC6_SetConfig+0x4e>
 80014f6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80014fa:	42a8      	cmp	r0, r5
 80014fc:	d007      	beq.n	800150e <TIM_OC6_SetConfig+0x4e>
 80014fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001502:	42a8      	cmp	r0, r5
 8001504:	d003      	beq.n	800150e <TIM_OC6_SetConfig+0x4e>
 8001506:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800150a:	42a8      	cmp	r0, r5
 800150c:	d104      	bne.n	8001518 <TIM_OC6_SetConfig+0x58>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 800150e:	694d      	ldr	r5, [r1, #20]
  tmpccer |= (OC_Config->OCPolarity << 20);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001510:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8001514:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001518:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800151a:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800151c:	684a      	ldr	r2, [r1, #4]
 800151e:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001520:	6203      	str	r3, [r0, #32]
 8001522:	bd30      	pop	{r4, r5, pc}
 8001524:	40012c00 	.word	0x40012c00

08001528 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8001528:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800152a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800152e:	2b01      	cmp	r3, #1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8001530:	4604      	mov	r4, r0
 8001532:	460d      	mov	r5, r1
 8001534:	f04f 0002 	mov.w	r0, #2
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001538:	d07b      	beq.n	8001632 <HAL_TIM_PWM_ConfigChannel+0x10a>
 800153a:	2301      	movs	r3, #1
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 800153c:	2a08      	cmp	r2, #8
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800153e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001542:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
    
  switch (Channel)
 8001546:	d03c      	beq.n	80015c2 <HAL_TIM_PWM_ConfigChannel+0x9a>
 8001548:	d813      	bhi.n	8001572 <HAL_TIM_PWM_ConfigChannel+0x4a>
 800154a:	b34a      	cbz	r2, 80015a0 <HAL_TIM_PWM_ConfigChannel+0x78>
 800154c:	2a04      	cmp	r2, #4
 800154e:	d16a      	bne.n	8001626 <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001550:	6820      	ldr	r0, [r4, #0]
 8001552:	f7ff fdcb 	bl	80010ec <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001556:	6823      	ldr	r3, [r4, #0]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001558:	6929      	ldr	r1, [r5, #16]
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800155a:	699a      	ldr	r2, [r3, #24]
 800155c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001560:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001562:	699a      	ldr	r2, [r3, #24]
 8001564:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001568:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800156a:	699a      	ldr	r2, [r3, #24]
 800156c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001570:	e025      	b.n	80015be <HAL_TIM_PWM_ConfigChannel+0x96>
  /* Check input state */
  __HAL_LOCK(htim);
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 8001572:	2a10      	cmp	r2, #16
 8001574:	d036      	beq.n	80015e4 <HAL_TIM_PWM_ConfigChannel+0xbc>
 8001576:	2a14      	cmp	r2, #20
 8001578:	d044      	beq.n	8001604 <HAL_TIM_PWM_ConfigChannel+0xdc>
 800157a:	2a0c      	cmp	r2, #12
 800157c:	d153      	bne.n	8001626 <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800157e:	6820      	ldr	r0, [r4, #0]
 8001580:	f7ff fe40 	bl	8001204 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001584:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8001586:	6929      	ldr	r1, [r5, #16]
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001588:	69da      	ldr	r2, [r3, #28]
 800158a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800158e:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001590:	69da      	ldr	r2, [r3, #28]
 8001592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001596:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8001598:	69da      	ldr	r2, [r3, #28]
 800159a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800159e:	e01f      	b.n	80015e0 <HAL_TIM_PWM_ConfigChannel+0xb8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80015a0:	6820      	ldr	r0, [r4, #0]
 80015a2:	f7ff fd57 	bl	8001054 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80015a6:	6823      	ldr	r3, [r4, #0]
 80015a8:	699a      	ldr	r2, [r3, #24]
 80015aa:	f042 0208 	orr.w	r2, r2, #8
 80015ae:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80015b0:	699a      	ldr	r2, [r3, #24]
 80015b2:	f022 0204 	bic.w	r2, r2, #4
 80015b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80015b8:	6999      	ldr	r1, [r3, #24]
 80015ba:	692a      	ldr	r2, [r5, #16]
 80015bc:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80015be:	619a      	str	r2, [r3, #24]
    }
    break;
 80015c0:	e031      	b.n	8001626 <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80015c2:	6820      	ldr	r0, [r4, #0]
 80015c4:	f7ff fdd8 	bl	8001178 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80015c8:	6823      	ldr	r3, [r4, #0]
 80015ca:	69da      	ldr	r2, [r3, #28]
 80015cc:	f042 0208 	orr.w	r2, r2, #8
 80015d0:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80015d2:	69da      	ldr	r2, [r3, #28]
 80015d4:	f022 0204 	bic.w	r2, r2, #4
 80015d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80015da:	69d9      	ldr	r1, [r3, #28]
 80015dc:	692a      	ldr	r2, [r5, #16]
 80015de:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80015e0:	61da      	str	r2, [r3, #28]
    }
    break;
 80015e2:	e020      	b.n	8001626 <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80015e4:	6820      	ldr	r0, [r4, #0]
 80015e6:	f7ff ff37 	bl	8001458 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80015ea:	6823      	ldr	r3, [r4, #0]
 80015ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80015ee:	f042 0208 	orr.w	r2, r2, #8
 80015f2:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80015f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80015f6:	f022 0204 	bic.w	r2, r2, #4
 80015fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 80015fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80015fe:	692a      	ldr	r2, [r5, #16]
 8001600:	430a      	orrs	r2, r1
 8001602:	e00f      	b.n	8001624 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001604:	6820      	ldr	r0, [r4, #0]
 8001606:	f7ff ff5b 	bl	80014c0 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800160a:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 800160c:	6909      	ldr	r1, [r1, #16]
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800160e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001610:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001614:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001616:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800161c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 800161e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001620:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001624:	655a      	str	r2, [r3, #84]	; 0x54
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8001626:	2301      	movs	r3, #1
    
  __HAL_UNLOCK(htim);
 8001628:	2000      	movs	r0, #0
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 800162a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 800162e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 8001632:	bd38      	pop	{r3, r4, r5, pc}

08001634 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001634:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001638:	2b01      	cmp	r3, #1
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 800163a:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800163c:	d01c      	beq.n	8001678 <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800163e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001640:	4c0e      	ldr	r4, [pc, #56]	; (800167c <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  
  /* Check input state */
  __HAL_LOCK(htim);

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001642:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001644:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001646:	42a2      	cmp	r2, r4
 8001648:	d003      	beq.n	8001652 <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 800164a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800164e:	42a2      	cmp	r2, r4
 8001650:	d103      	bne.n	800165a <HAL_TIMEx_MasterConfigSynchronization+0x26>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001652:	684c      	ldr	r4, [r1, #4]
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001654:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001658:	4323      	orrs	r3, r4
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800165a:	680c      	ldr	r4, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800165c:	6889      	ldr	r1, [r1, #8]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800165e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001662:	4323      	orrs	r3, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001664:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001668:	6053      	str	r3, [r2, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800166a:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 800166c:	2300      	movs	r3, #0
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800166e:	6091      	str	r1, [r2, #8]

  __HAL_UNLOCK(htim);
 8001670:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 8001674:	4618      	mov	r0, r3
 8001676:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001678:	2002      	movs	r0, #2
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 800167a:	bd30      	pop	{r4, r5, pc}
 800167c:	40012c00 	.word	0x40012c00

08001680 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001680:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001684:	2b01      	cmp	r3, #1
            STM32F398xx and STM32F303x8 two break inputs can be configured.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, 
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 8001686:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800168a:	d033      	beq.n	80016f4 <HAL_TIMEx_ConfigBreakDeadTime+0x74>

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800168c:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <HAL_TIMEx_ConfigBreakDeadTime+0x7c>)
 800168e:	f8d0 e000 	ldr.w	lr, [r0]
 8001692:	680d      	ldr	r5, [r1, #0]
 8001694:	690c      	ldr	r4, [r1, #16]
 8001696:	694a      	ldr	r2, [r1, #20]
 8001698:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 800169a:	f8d1 c018 	ldr.w	ip, [r1, #24]
 800169e:	459e      	cmp	lr, r3
 80016a0:	f101 0304 	add.w	r3, r1, #4
 80016a4:	e893 0148 	ldmia.w	r3, {r3, r6, r8}
    tmpbdtr |= sBreakDeadTimeConfig->BreakPolarity;
    tmpbdtr |= sBreakDeadTimeConfig->AutomaticOutput;
    tmpbdtr |= (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT);
    tmpbdtr |= (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT);
    tmpbdtr |= sBreakDeadTimeConfig->Break2State;
    tmpbdtr |= sBreakDeadTimeConfig->Break2Polarity;
 80016a8:	ea48 0606 	orr.w	r6, r8, r6
  /* Check input state */
  __HAL_LOCK(htim);

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80016ac:	d003      	beq.n	80016b6 <HAL_TIMEx_ConfigBreakDeadTime+0x36>
 80016ae:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8001700 <HAL_TIMEx_ConfigBreakDeadTime+0x80>
 80016b2:	45ce      	cmp	lr, r9
 80016b4:	d10f      	bne.n	80016d6 <HAL_TIMEx_ConfigBreakDeadTime+0x56>
    tmpbdtr |= sBreakDeadTimeConfig->BreakPolarity;
    tmpbdtr |= sBreakDeadTimeConfig->AutomaticOutput;
    tmpbdtr |= (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT);
    tmpbdtr |= (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT);
    tmpbdtr |= sBreakDeadTimeConfig->Break2State;
    tmpbdtr |= sBreakDeadTimeConfig->Break2Polarity;
 80016b6:	431e      	orrs	r6, r3
 80016b8:	4335      	orrs	r5, r6
 80016ba:	432c      	orrs	r4, r5
 80016bc:	4322      	orrs	r2, r4
 80016be:	69cc      	ldr	r4, [r1, #28]
 80016c0:	ea42 0307 	orr.w	r3, r2, r7
 80016c4:	4323      	orrs	r3, r4
 80016c6:	6a0c      	ldr	r4, [r1, #32]
 80016c8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80016ca:	431c      	orrs	r4, r3
 80016cc:	ea44 430c 	orr.w	r3, r4, ip, lsl #16
 80016d0:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80016d4:	e006      	b.n	80016e4 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
                 TIM_BDTR_AOE | TIM_BDTR_MOE | TIM_BDTR_BKF);
    
    /* Set the BDTR bits */
    tmpbdtr |= sBreakDeadTimeConfig->DeadTime;
    tmpbdtr |= sBreakDeadTimeConfig->LockLevel;
    tmpbdtr |= sBreakDeadTimeConfig->OffStateIDLEMode;
 80016d6:	4333      	orrs	r3, r6
    tmpbdtr |= sBreakDeadTimeConfig->OffStateRunMode;
 80016d8:	432b      	orrs	r3, r5
    tmpbdtr |= sBreakDeadTimeConfig->BreakState;
 80016da:	4323      	orrs	r3, r4
    tmpbdtr |= sBreakDeadTimeConfig->BreakPolarity;
 80016dc:	4313      	orrs	r3, r2
    tmpbdtr |= sBreakDeadTimeConfig->AutomaticOutput;
 80016de:	433b      	orrs	r3, r7
    tmpbdtr |= (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT);
 80016e0:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
  }
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80016e4:	f8ce 3044 	str.w	r3, [lr, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80016e8:	2300      	movs	r3, #0
 80016ea:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 80016ee:	4618      	mov	r0, r3
 80016f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80016f4:	2002      	movs	r0, #2
  htim->Instance->BDTR = tmpbdtr;
  
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
}
 80016f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016fa:	bf00      	nop
 80016fc:	40012c00 	.word	0x40012c00
 8001700:	40013400 	.word	0x40013400

08001704 <HAL_TIMEx_CommutationCallback>:
 8001704:	4770      	bx	lr

08001706 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001706:	4770      	bx	lr

08001708 <MX_TIM15_Init>:


}
/* TIM15 init function */
static void MX_TIM15_Init(void)
{
 8001708:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim15.Instance = TIM15;
  htim15.Init.Prescaler = 0;
 800170a:	4b31      	ldr	r3, [pc, #196]	; (80017d0 <MX_TIM15_Init+0xc8>)

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim15.Instance = TIM15;
 800170c:	4e31      	ldr	r6, [pc, #196]	; (80017d4 <MX_TIM15_Init+0xcc>)
  htim15.Init.Prescaler = 0;
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
  int sound[]={10000,9000,8000,7000,6000,5000,4000};
 800170e:	4d32      	ldr	r5, [pc, #200]	; (80017d8 <MX_TIM15_Init+0xd0>)
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim15.Instance = TIM15;
  htim15.Init.Prescaler = 0;
 8001710:	2700      	movs	r7, #0
 8001712:	e886 0088 	stmia.w	r6, {r3, r7}
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
  int sound[]={10000,9000,8000,7000,6000,5000,4000};
 8001716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}


}
/* TIM15 init function */
static void MX_TIM15_Init(void)
{
 8001718:	b09d      	sub	sp, #116	; 0x74
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim15.Instance = TIM15;
  htim15.Init.Prescaler = 0;
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
  int sound[]={10000,9000,8000,7000,6000,5000,4000};
 800171a:	ac0a      	add	r4, sp, #40	; 0x28
 800171c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800171e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001722:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  	  if(j==sizeof(sound))
 8001726:	4c2d      	ldr	r4, [pc, #180]	; (80017dc <MX_TIM15_Init+0xd4>)
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim15.Instance = TIM15;
  htim15.Init.Prescaler = 0;
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001728:	60b7      	str	r7, [r6, #8]
  int sound[]={10000,9000,8000,7000,6000,5000,4000};

  	  if(j==sizeof(sound))
 800172a:	6823      	ldr	r3, [r4, #0]
 800172c:	2b1c      	cmp	r3, #28
  	  {

  		  j=0;
 800172e:	bf08      	it	eq
 8001730:	6027      	streq	r7, [r4, #0]
  	  }
  	  htim15.Init.Period = sound[j];
 8001732:	6823      	ldr	r3, [r4, #0]
 8001734:	aa1c      	add	r2, sp, #112	; 0x70
 8001736:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  	  HAL_Delay(500);
 800173a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  	  if(j==sizeof(sound))
  	  {

  		  j=0;
  	  }
  	  htim15.Init.Period = sound[j];
 800173e:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001742:	60f3      	str	r3, [r6, #12]
  	  HAL_Delay(500);
 8001744:	f7fe fd9e 	bl	8000284 <HAL_Delay>
  	  j++;
 8001748:	6823      	ldr	r3, [r4, #0]
  //htim15.Init.Period=4000;
  //  htim15.Init.Period = 3330;
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim15.Init.RepetitionCounter = 0;
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800174a:	4822      	ldr	r0, [pc, #136]	; (80017d4 <MX_TIM15_Init+0xcc>)

  		  j=0;
  	  }
  	  htim15.Init.Period = sound[j];
  	  HAL_Delay(500);
  	  j++;
 800174c:	3301      	adds	r3, #1
 800174e:	6023      	str	r3, [r4, #0]
  //htim15.Init.Period=4000;
  //  htim15.Init.Period = 3330;
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001750:	2300      	movs	r3, #0
 8001752:	6133      	str	r3, [r6, #16]
  htim15.Init.RepetitionCounter = 0;
 8001754:	6173      	str	r3, [r6, #20]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001756:	f7ff fc63 	bl	8001020 <HAL_TIM_PWM_Init>
 800175a:	b100      	cbz	r0, 800175e <MX_TIM15_Init+0x56>
 800175c:	e7fe      	b.n	800175c <MX_TIM15_Init+0x54>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175e:	9000      	str	r0, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001760:	9002      	str	r0, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001762:	4669      	mov	r1, sp
 8001764:	481b      	ldr	r0, [pc, #108]	; (80017d4 <MX_TIM15_Init+0xcc>)
 8001766:	f7ff ff65 	bl	8001634 <HAL_TIMEx_MasterConfigSynchronization>
 800176a:	4602      	mov	r2, r0
 800176c:	b100      	cbz	r0, 8001770 <MX_TIM15_Init+0x68>
 800176e:	e7fe      	b.n	800176e <MX_TIM15_Init+0x66>
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001770:	2360      	movs	r3, #96	; 0x60
 8001772:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = 1000;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001774:	9005      	str	r0, [sp, #20]
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 1000;
 8001776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800177a:	9006      	str	r0, [sp, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800177c:	9007      	str	r0, [sp, #28]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800177e:	9008      	str	r0, [sp, #32]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001780:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001782:	a903      	add	r1, sp, #12
 8001784:	4813      	ldr	r0, [pc, #76]	; (80017d4 <MX_TIM15_Init+0xcc>)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 1000;
 8001786:	9304      	str	r3, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001788:	f7ff fece 	bl	8001528 <HAL_TIM_PWM_ConfigChannel>
 800178c:	b100      	cbz	r0, 8001790 <MX_TIM15_Init+0x88>
 800178e:	e7fe      	b.n	800178e <MX_TIM15_Init+0x86>
  {
    Error_Handler();
  }

  sConfigOC.Pulse = 3000;
 8001790:	f640 33b8 	movw	r3, #3000	; 0xbb8
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001794:	2204      	movs	r2, #4
 8001796:	a903      	add	r1, sp, #12
 8001798:	480e      	ldr	r0, [pc, #56]	; (80017d4 <MX_TIM15_Init+0xcc>)
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.Pulse = 3000;
 800179a:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800179c:	f7ff fec4 	bl	8001528 <HAL_TIM_PWM_ConfigChannel>
 80017a0:	b100      	cbz	r0, 80017a4 <MX_TIM15_Init+0x9c>
 80017a2:	e7fe      	b.n	80017a2 <MX_TIM15_Init+0x9a>
  {
    Error_Handler();
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017a4:	9011      	str	r0, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017a6:	9012      	str	r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017a8:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.DeadTime = 0;
 80017aa:	9014      	str	r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017ac:	9015      	str	r0, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017b2:	9017      	str	r0, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017b4:	901b      	str	r0, [sp, #108]	; 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80017b6:	a911      	add	r1, sp, #68	; 0x44
 80017b8:	4806      	ldr	r0, [pc, #24]	; (80017d4 <MX_TIM15_Init+0xcc>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017ba:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakFilter = 0;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80017bc:	f7ff ff60 	bl	8001680 <HAL_TIMEx_ConfigBreakDeadTime>
 80017c0:	b100      	cbz	r0, 80017c4 <MX_TIM15_Init+0xbc>
 80017c2:	e7fe      	b.n	80017c2 <MX_TIM15_Init+0xba>
  {
    Error_Handler();
  }

  HAL_TIM_MspPostInit(&htim15);
 80017c4:	4803      	ldr	r0, [pc, #12]	; (80017d4 <MX_TIM15_Init+0xcc>)
 80017c6:	f000 f9bd 	bl	8001b44 <HAL_TIM_MspPostInit>

}
 80017ca:	b01d      	add	sp, #116	; 0x74
 80017cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40014000 	.word	0x40014000
 80017d4:	20000064 	.word	0x20000064
 80017d8:	08001ccc 	.word	0x08001ccc
 80017dc:	20000020 	.word	0x20000020

080017e0 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80017e0:	b510      	push	{r4, lr}
 80017e2:	b09e      	sub	sp, #120	; 0x78
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017e8:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV8;
 80017ea:	2107      	movs	r1, #7
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017ec:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV8;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017ee:	930d      	str	r3, [sp, #52]	; 0x34
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV8;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f0:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80017f2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f6:	a805      	add	r0, sp, #20

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV8;
 80017f8:	9107      	str	r1, [sp, #28]
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017fa:	9205      	str	r2, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV8;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017fc:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017fe:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001800:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001802:	f7fe fe9f 	bl	8000544 <HAL_RCC_OscConfig>
 8001806:	4601      	mov	r1, r0
 8001808:	b100      	cbz	r0, 800180c <SystemClock_Config+0x2c>
 800180a:	e7fe      	b.n	800180a <SystemClock_Config+0x2a>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800180c:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800180e:	e88d 0018 	stmia.w	sp, {r3, r4}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001812:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001814:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001818:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800181a:	4668      	mov	r0, sp
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800181c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800181e:	f7ff f929 	bl	8000a74 <HAL_RCC_ClockConfig>
 8001822:	b100      	cbz	r0, 8001826 <SystemClock_Config+0x46>
 8001824:	e7fe      	b.n	8001824 <SystemClock_Config+0x44>
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800182a:	901b      	str	r0, [sp, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800182c:	a80f      	add	r0, sp, #60	; 0x3c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800182e:	930f      	str	r3, [sp, #60]	; 0x3c
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001830:	f7ff f9d8 	bl	8000be4 <HAL_RCCEx_PeriphCLKConfig>
 8001834:	4604      	mov	r4, r0
 8001836:	b100      	cbz	r0, 800183a <SystemClock_Config+0x5a>
 8001838:	e7fe      	b.n	8001838 <SystemClock_Config+0x58>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800183a:	f7ff f9cd 	bl	8000bd8 <HAL_RCC_GetHCLKFreq>
 800183e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001842:	fbb0 f0f3 	udiv	r0, r0, r3
 8001846:	f7fe fd7d 	bl	8000344 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800184a:	2004      	movs	r0, #4
 800184c:	f7fe fd90 	bl	8000370 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001850:	4622      	mov	r2, r4
 8001852:	4621      	mov	r1, r4
 8001854:	f04f 30ff 	mov.w	r0, #4294967295
 8001858:	f7fe fd34 	bl	80002c4 <HAL_NVIC_SetPriority>
}
 800185c:	b01e      	add	sp, #120	; 0x78
 800185e:	bd10      	pop	{r4, pc}

08001860 <main>:
	{
		 HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_2);
	}
}*/
int main(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08e      	sub	sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001864:	f7fe fcee 	bl	8000244 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001868:	f7ff ffba 	bl	80017e0 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800186c:	4b5c      	ldr	r3, [pc, #368]	; (80019e0 <main+0x180>)
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim1.Instance = TIM1;
 800186e:	4c5d      	ldr	r4, [pc, #372]	; (80019e4 <main+0x184>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001870:	695a      	ldr	r2, [r3, #20]
 8001872:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001876:	615a      	str	r2, [r3, #20]
 8001878:	695a      	ldr	r2, [r3, #20]
 800187a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800187e:	9200      	str	r2, [sp, #0]
 8001880:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001882:	695a      	ldr	r2, [r3, #20]
 8001884:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001888:	615a      	str	r2, [r3, #20]
 800188a:	695a      	ldr	r2, [r3, #20]
 800188c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001890:	9201      	str	r2, [sp, #4]
 8001892:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001894:	695a      	ldr	r2, [r3, #20]
 8001896:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800189a:	615a      	str	r2, [r3, #20]
 800189c:	695a      	ldr	r2, [r3, #20]
 800189e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80018a2:	9202      	str	r2, [sp, #8]
 80018a4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a6:	695a      	ldr	r2, [r3, #20]
 80018a8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80018ac:	615a      	str	r2, [r3, #20]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b4:	9303      	str	r3, [sp, #12]
 80018b6:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018b8:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2500      	movs	r5, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018bc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018be:	a907      	add	r1, sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018c0:	4b49      	ldr	r3, [pc, #292]	; (80019e8 <main+0x188>)
 80018c2:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	f7fe fd63 	bl	8000394 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80018ce:	462a      	mov	r2, r5
 80018d0:	4629      	mov	r1, r5
 80018d2:	2006      	movs	r0, #6
 80018d4:	f7fe fcf6 	bl	80002c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80018d8:	2006      	movs	r0, #6
 80018da:	f7fe fd27 	bl	800032c <HAL_NVIC_EnableIRQ>

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 179;
 80018de:	4a43      	ldr	r2, [pc, #268]	; (80019ec <main+0x18c>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e0:	60a5      	str	r5, [r4, #8]

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 179;
 80018e2:	23b3      	movs	r3, #179	; 0xb3
 80018e4:	e884 000c 	stmia.w	r4, {r2, r3}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 99;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018e8:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 179;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 99;
 80018ea:	2363      	movs	r3, #99	; 0x63
 80018ec:	60e3      	str	r3, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ee:	6125      	str	r5, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 80018f0:	6165      	str	r5, [r4, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018f2:	f7ff fb7b 	bl	8000fec <HAL_TIM_Base_Init>
 80018f6:	b100      	cbz	r0, 80018fa <main+0x9a>
 80018f8:	e7fe      	b.n	80018f8 <main+0x98>
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018fe:	a907      	add	r1, sp, #28
 8001900:	4620      	mov	r0, r4
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001902:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001904:	f7ff fcbc 	bl	8001280 <HAL_TIM_ConfigClockSource>
 8001908:	b100      	cbz	r0, 800190c <main+0xac>
 800190a:	e7fe      	b.n	800190a <main+0xaa>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800190c:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800190e:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001910:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001912:	a904      	add	r1, sp, #16
 8001914:	4620      	mov	r0, r4
 8001916:	f7ff fe8d 	bl	8001634 <HAL_TIMEx_MasterConfigSynchronization>
 800191a:	b100      	cbz	r0, 800191e <main+0xbe>
 800191c:	e7fe      	b.n	800191c <main+0xbc>
{

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
 800191e:	4c34      	ldr	r4, [pc, #208]	; (80019f0 <main+0x190>)
 8001920:	4b34      	ldr	r3, [pc, #208]	; (80019f4 <main+0x194>)
  htim3.Init.Prescaler =0;
 8001922:	6060      	str	r0, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001924:	60a0      	str	r0, [r4, #8]
  htim3.Init.Period = 65535;
 8001926:	f64f 78ff 	movw	r8, #65535	; 0xffff
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800192a:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800192c:	4620      	mov	r0, r4
{

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
 800192e:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler =0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
 8001930:	f8c4 800c 	str.w	r8, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001934:	f7ff fb74 	bl	8001020 <HAL_TIM_PWM_Init>
 8001938:	b100      	cbz	r0, 800193c <main+0xdc>
 800193a:	e7fe      	b.n	800193a <main+0xda>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193c:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193e:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001940:	a904      	add	r1, sp, #16
 8001942:	4620      	mov	r0, r4
 8001944:	f7ff fe76 	bl	8001634 <HAL_TIMEx_MasterConfigSynchronization>
 8001948:	b100      	cbz	r0, 800194c <main+0xec>
 800194a:	e7fe      	b.n	800194a <main+0xea>
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 1000;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800194c:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800194e:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001950:	2760      	movs	r7, #96	; 0x60
  sConfigOC.Pulse = 1000;
 8001952:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001956:	220c      	movs	r2, #12
 8001958:	a907      	add	r1, sp, #28
 800195a:	4620      	mov	r0, r4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800195c:	9707      	str	r7, [sp, #28]
  sConfigOC.Pulse = 1000;
 800195e:	9608      	str	r6, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001960:	f7ff fde2 	bl	8001528 <HAL_TIM_PWM_ConfigChannel>
 8001964:	4605      	mov	r5, r0
 8001966:	b100      	cbz	r0, 800196a <main+0x10a>
 8001968:	e7fe      	b.n	8001968 <main+0x108>
  {
    Error_Handler();
  }

  HAL_TIM_MspPostInit(&htim3);
 800196a:	4620      	mov	r0, r4
{

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim4.Instance = TIM4;
 800196c:	4c22      	ldr	r4, [pc, #136]	; (80019f8 <main+0x198>)
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }

  HAL_TIM_MspPostInit(&htim3);
 800196e:	f000 f8e9 	bl	8001b44 <HAL_TIM_MspPostInit>
{

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim4.Instance = TIM4;
 8001972:	4b22      	ldr	r3, [pc, #136]	; (80019fc <main+0x19c>)
  htim4.Init.Prescaler = 0;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001974:	60a5      	str	r5, [r4, #8]
  htim4.Init.Period = 65535;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001976:	4620      	mov	r0, r4

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 0;
 8001978:	e884 0028 	stmia.w	r4, {r3, r5}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 65535;
 800197c:	f8c4 800c 	str.w	r8, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001980:	6125      	str	r5, [r4, #16]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001982:	f7ff fb4d 	bl	8001020 <HAL_TIM_PWM_Init>
 8001986:	b100      	cbz	r0, 800198a <main+0x12a>
 8001988:	e7fe      	b.n	8001988 <main+0x128>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198a:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198c:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800198e:	a904      	add	r1, sp, #16
 8001990:	4620      	mov	r0, r4
 8001992:	f7ff fe4f 	bl	8001634 <HAL_TIMEx_MasterConfigSynchronization>
 8001996:	b100      	cbz	r0, 800199a <main+0x13a>
 8001998:	e7fe      	b.n	8001998 <main+0x138>
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 1000;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800199a:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800199c:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800199e:	220c      	movs	r2, #12
 80019a0:	a907      	add	r1, sp, #28
 80019a2:	4620      	mov	r0, r4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019a4:	9707      	str	r7, [sp, #28]
  sConfigOC.Pulse = 1000;
 80019a6:	9608      	str	r6, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019a8:	f7ff fdbe 	bl	8001528 <HAL_TIM_PWM_ConfigChannel>
 80019ac:	b100      	cbz	r0, 80019b0 <main+0x150>
 80019ae:	e7fe      	b.n	80019ae <main+0x14e>
  {
    Error_Handler();
  }

  HAL_TIM_MspPostInit(&htim4);
 80019b0:	4620      	mov	r0, r4
 80019b2:	f000 f8c7 	bl	8001b44 <HAL_TIM_MspPostInit>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM1_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  MX_TIM15_Init();
 80019b6:	f7ff fea7 	bl	8001708 <MX_TIM15_Init>
  {
  /* USER CODE END WHILE */
//RGBColorMixer(50,125,255);
  /* USER CODE BEGIN 3 */
//modifyTheTone();
	  MX_TIM15_Init();
 80019ba:	f7ff fea5 	bl	8001708 <MX_TIM15_Init>

HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_1);
 80019be:	2100      	movs	r1, #0
 80019c0:	480f      	ldr	r0, [pc, #60]	; (8001a00 <main+0x1a0>)
 80019c2:	f7ff fd23 	bl	800140c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 80019c6:	210c      	movs	r1, #12
 80019c8:	4809      	ldr	r0, [pc, #36]	; (80019f0 <main+0x190>)
 80019ca:	f7ff fd1f 	bl	800140c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 80019ce:	210c      	movs	r1, #12
 80019d0:	4809      	ldr	r0, [pc, #36]	; (80019f8 <main+0x198>)
 80019d2:	f7ff fd1b 	bl	800140c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_2);
 80019d6:	2104      	movs	r1, #4
 80019d8:	4809      	ldr	r0, [pc, #36]	; (8001a00 <main+0x1a0>)
 80019da:	f7ff fd17 	bl	800140c <HAL_TIM_PWM_Start>
 80019de:	e7ec      	b.n	80019ba <main+0x15a>
 80019e0:	40021000 	.word	0x40021000
 80019e4:	200000dc 	.word	0x200000dc
 80019e8:	10110000 	.word	0x10110000
 80019ec:	40012c00 	.word	0x40012c00
 80019f0:	200000a0 	.word	0x200000a0
 80019f4:	40000400 	.word	0x40000400
 80019f8:	20000028 	.word	0x20000028
 80019fc:	40000800 	.word	0x40000800
 8001a00:	20000064 	.word	0x20000064

08001a04 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a04:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <HAL_MspInit+0x78>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a06:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a08:	699a      	ldr	r2, [r3, #24]
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	619a      	str	r2, [r3, #24]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a18:	2007      	movs	r0, #7
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1a:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a1c:	f7fe fc40 	bl	80002a0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001a20:	2200      	movs	r2, #0
 8001a22:	4611      	mov	r1, r2
 8001a24:	f06f 000b 	mvn.w	r0, #11
 8001a28:	f7fe fc4c 	bl	80002c4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	4611      	mov	r1, r2
 8001a30:	f06f 000a 	mvn.w	r0, #10
 8001a34:	f7fe fc46 	bl	80002c4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	f06f 0009 	mvn.w	r0, #9
 8001a40:	f7fe fc40 	bl	80002c4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001a44:	2200      	movs	r2, #0
 8001a46:	4611      	mov	r1, r2
 8001a48:	f06f 0004 	mvn.w	r0, #4
 8001a4c:	f7fe fc3a 	bl	80002c4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	4611      	mov	r1, r2
 8001a54:	f06f 0003 	mvn.w	r0, #3
 8001a58:	f7fe fc34 	bl	80002c4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	4611      	mov	r1, r2
 8001a60:	f06f 0001 	mvn.w	r0, #1
 8001a64:	f7fe fc2e 	bl	80002c4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a70:	f7fe fc28 	bl	80002c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a74:	b003      	add	sp, #12
 8001a76:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a7a:	bf00      	nop
 8001a7c:	40021000 	.word	0x40021000

08001a80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a80:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM1)
 8001a82:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <HAL_TIM_Base_MspInit+0x38>)
 8001a84:	6802      	ldr	r2, [r0, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d112      	bne.n	8001ab0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a8a:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001a8e:	2019      	movs	r0, #25
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a90:	699a      	ldr	r2, [r3, #24]
 8001a92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a96:	619a      	str	r2, [r3, #24]
 8001a98:	699b      	ldr	r3, [r3, #24]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001a9a:	2200      	movs	r2, #0
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aa0:	9301      	str	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001aa2:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aa4:	9b01      	ldr	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001aa6:	f7fe fc0d 	bl	80002c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001aaa:	2019      	movs	r0, #25
 8001aac:	f7fe fc3e 	bl	800032c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ab0:	b003      	add	sp, #12
 8001ab2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ab6:	bf00      	nop
 8001ab8:	40012c00 	.word	0x40012c00

08001abc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001abc:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(htim_pwm->Instance==TIM3)
 8001abe:	6803      	ldr	r3, [r0, #0]
 8001ac0:	4a1c      	ldr	r2, [pc, #112]	; (8001b34 <HAL_TIM_PWM_MspInit+0x78>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d110      	bne.n	8001ae8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ac6:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <HAL_TIM_PWM_MspInit+0x7c>)
 8001ac8:	69da      	ldr	r2, [r3, #28]
 8001aca:	f042 0202 	orr.w	r2, r2, #2
 8001ace:	61da      	str	r2, [r3, #28]
 8001ad0:	69db      	ldr	r3, [r3, #28]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ad2:	2200      	movs	r2, #0
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	9301      	str	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ada:	201d      	movs	r0, #29
 8001adc:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ade:	9b01      	ldr	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ae0:	f7fe fbf0 	bl	80002c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ae4:	201d      	movs	r0, #29
 8001ae6:	e012      	b.n	8001b0e <HAL_TIM_PWM_MspInit+0x52>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM4)
 8001ae8:	4a14      	ldr	r2, [pc, #80]	; (8001b3c <HAL_TIM_PWM_MspInit+0x80>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d112      	bne.n	8001b14 <HAL_TIM_PWM_MspInit+0x58>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001aee:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_TIM_PWM_MspInit+0x7c>)
 8001af0:	69da      	ldr	r2, [r3, #28]
 8001af2:	f042 0204 	orr.w	r2, r2, #4
 8001af6:	61da      	str	r2, [r3, #28]
 8001af8:	69db      	ldr	r3, [r3, #28]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001afa:	2200      	movs	r2, #0
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	9302      	str	r3, [sp, #8]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001b02:	201e      	movs	r0, #30
 8001b04:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b06:	9b02      	ldr	r3, [sp, #8]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001b08:	f7fe fbdc 	bl	80002c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b0c:	201e      	movs	r0, #30
 8001b0e:	f7fe fc0d 	bl	800032c <HAL_NVIC_EnableIRQ>
 8001b12:	e00c      	b.n	8001b2e <HAL_TIM_PWM_MspInit+0x72>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM15)
 8001b14:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <HAL_TIM_PWM_MspInit+0x84>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d109      	bne.n	8001b2e <HAL_TIM_PWM_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001b1a:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <HAL_TIM_PWM_MspInit+0x7c>)
 8001b1c:	699a      	ldr	r2, [r3, #24]
 8001b1e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b22:	619a      	str	r2, [r3, #24]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2a:	9303      	str	r3, [sp, #12]
 8001b2c:	9b03      	ldr	r3, [sp, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001b2e:	b005      	add	sp, #20
 8001b30:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b34:	40000400 	.word	0x40000400
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40000800 	.word	0x40000800
 8001b40:	40014000 	.word	0x40014000

08001b44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM3)
 8001b46:	6803      	ldr	r3, [r0, #0]
 8001b48:	4a18      	ldr	r2, [pc, #96]	; (8001bac <HAL_TIM_MspPostInit+0x68>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d10a      	bne.n	8001b64 <HAL_TIM_MspPostInit+0x20>

  /* USER CODE END TIM3_MspPostInit 0 */
    /**TIM3 GPIO Configuration    
    PE5     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b4e:	2320      	movs	r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2200      	movs	r2, #0

  /* USER CODE END TIM3_MspPostInit 0 */
    /**TIM3 GPIO Configuration    
    PE5     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b52:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b5c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b5e:	a901      	add	r1, sp, #4
 8001b60:	4813      	ldr	r0, [pc, #76]	; (8001bb0 <HAL_TIM_MspPostInit+0x6c>)
 8001b62:	e01d      	b.n	8001ba0 <HAL_TIM_MspPostInit+0x5c>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 8001b64:	4a13      	ldr	r2, [pc, #76]	; (8001bb4 <HAL_TIM_MspPostInit+0x70>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d10b      	bne.n	8001b82 <HAL_TIM_MspPostInit+0x3e>
  /* USER CODE END TIM4_MspPostInit 0 */
  
    /**TIM4 GPIO Configuration    
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2200      	movs	r2, #0
  /* USER CODE END TIM4_MspPostInit 0 */
  
    /**TIM4 GPIO Configuration    
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b70:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b7a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b7c:	a901      	add	r1, sp, #4
 8001b7e:	480e      	ldr	r0, [pc, #56]	; (8001bb8 <HAL_TIM_MspPostInit+0x74>)
 8001b80:	e00e      	b.n	8001ba0 <HAL_TIM_MspPostInit+0x5c>

  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }
  else if(htim->Instance==TIM15)
 8001b82:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <HAL_TIM_MspPostInit+0x78>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d10d      	bne.n	8001ba4 <HAL_TIM_MspPostInit+0x60>
  
    /**TIM15 GPIO Configuration    
    PF9     ------> TIM15_CH1
    PF10     ------> TIM15_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b88:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b8c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b98:	4809      	ldr	r0, [pc, #36]	; (8001bc0 <HAL_TIM_MspPostInit+0x7c>)
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM15;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b9e:	a901      	add	r1, sp, #4
 8001ba0:	f7fe fbf8 	bl	8000394 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001ba4:	b007      	add	sp, #28
 8001ba6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001baa:	bf00      	nop
 8001bac:	40000400 	.word	0x40000400
 8001bb0:	48001000 	.word	0x48001000
 8001bb4:	40000800 	.word	0x40000800
 8001bb8:	48000c00 	.word	0x48000c00
 8001bbc:	40014000 	.word	0x40014000
 8001bc0:	48001400 	.word	0x48001400

08001bc4 <SVC_Handler>:
 8001bc4:	4770      	bx	lr

08001bc6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001bc6:	4770      	bx	lr

08001bc8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001bc8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bca:	f7fe fb4d 	bl	8000268 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8001bd2:	f7fe bbda 	b.w	800038a <HAL_SYSTICK_IRQHandler>

08001bd6 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f7fe bca8 	b.w	800052c <HAL_GPIO_EXTI_IRQHandler>

08001bdc <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bdc:	4801      	ldr	r0, [pc, #4]	; (8001be4 <TIM1_UP_TIM16_IRQHandler+0x8>)
 8001bde:	f7ff b908 	b.w	8000df2 <HAL_TIM_IRQHandler>
 8001be2:	bf00      	nop
 8001be4:	200000dc 	.word	0x200000dc

08001be8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001be8:	4801      	ldr	r0, [pc, #4]	; (8001bf0 <TIM3_IRQHandler+0x8>)
 8001bea:	f7ff b902 	b.w	8000df2 <HAL_TIM_IRQHandler>
 8001bee:	bf00      	nop
 8001bf0:	200000a0 	.word	0x200000a0

08001bf4 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001bf4:	4801      	ldr	r0, [pc, #4]	; (8001bfc <TIM4_IRQHandler+0x8>)
 8001bf6:	f7ff b8fc 	b.w	8000df2 <HAL_TIM_IRQHandler>
 8001bfa:	bf00      	nop
 8001bfc:	20000028 	.word	0x20000028

08001c00 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c00:	4915      	ldr	r1, [pc, #84]	; (8001c58 <SystemInit+0x58>)
 8001c02:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001c06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001c0e:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <SystemInit+0x5c>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	f042 0201 	orr.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001c18:	6858      	ldr	r0, [r3, #4]
 8001c1a:	4a11      	ldr	r2, [pc, #68]	; (8001c60 <SystemInit+0x60>)
 8001c1c:	4002      	ands	r2, r0
 8001c1e:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001c26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c2a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c32:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001c3a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c3e:	f022 020f 	bic.w	r2, r2, #15
 8001c42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001c44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001c46:	4a07      	ldr	r2, [pc, #28]	; (8001c64 <SystemInit+0x64>)
 8001c48:	4002      	ands	r2, r0
 8001c4a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001c54:	608b      	str	r3, [r1, #8]
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	f87fc00c 	.word	0xf87fc00c
 8001c64:	ff00fccc 	.word	0xff00fccc

08001c68 <__libc_init_array>:
 8001c68:	b570      	push	{r4, r5, r6, lr}
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <__libc_init_array+0x3c>)
 8001c6c:	4c0e      	ldr	r4, [pc, #56]	; (8001ca8 <__libc_init_array+0x40>)
 8001c6e:	1ae4      	subs	r4, r4, r3
 8001c70:	10a4      	asrs	r4, r4, #2
 8001c72:	2500      	movs	r5, #0
 8001c74:	461e      	mov	r6, r3
 8001c76:	42a5      	cmp	r5, r4
 8001c78:	d004      	beq.n	8001c84 <__libc_init_array+0x1c>
 8001c7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c7e:	4798      	blx	r3
 8001c80:	3501      	adds	r5, #1
 8001c82:	e7f8      	b.n	8001c76 <__libc_init_array+0xe>
 8001c84:	f000 f816 	bl	8001cb4 <_init>
 8001c88:	4c08      	ldr	r4, [pc, #32]	; (8001cac <__libc_init_array+0x44>)
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <__libc_init_array+0x48>)
 8001c8c:	1ae4      	subs	r4, r4, r3
 8001c8e:	10a4      	asrs	r4, r4, #2
 8001c90:	2500      	movs	r5, #0
 8001c92:	461e      	mov	r6, r3
 8001c94:	42a5      	cmp	r5, r4
 8001c96:	d004      	beq.n	8001ca2 <__libc_init_array+0x3a>
 8001c98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c9c:	4798      	blx	r3
 8001c9e:	3501      	adds	r5, #1
 8001ca0:	e7f8      	b.n	8001c94 <__libc_init_array+0x2c>
 8001ca2:	bd70      	pop	{r4, r5, r6, pc}
 8001ca4:	08001d18 	.word	0x08001d18
 8001ca8:	08001d18 	.word	0x08001d18
 8001cac:	08001d1c 	.word	0x08001d1c
 8001cb0:	08001d18 	.word	0x08001d18

08001cb4 <_init>:
 8001cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb6:	bf00      	nop
 8001cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cba:	bc08      	pop	{r3}
 8001cbc:	469e      	mov	lr, r3
 8001cbe:	4770      	bx	lr

08001cc0 <_fini>:
 8001cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cc2:	bf00      	nop
 8001cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cc6:	bc08      	pop	{r3}
 8001cc8:	469e      	mov	lr, r3
 8001cca:	4770      	bx	lr
